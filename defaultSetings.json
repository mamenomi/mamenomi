{
	// ソース管理ビューでインラインのアクションを常に表示するかどうかを制御します。
	"scm.alwaysShowActions": false,

	// リポジトリが SCM ビューに常に表示される必要があるかどうかを制御します。
	"scm.alwaysShowRepositories": false,

	// ファイルを開くときに SCM ビューでそのファイルを自動的に表示および選択するかどうかを制御します。
	"scm.autoReveal": true,

	// アクティビティ バーのソース管理アイコンのカウント バッジを制御します。
	//  - all: すべてのソース管理プロバイダー カウント バッジの合計を表示します。
	//  - focused: フォーカスのあるソース管理プロバイダーのカウント バッジを表示します。
	//  - off: ソース管理のカウント バッジを無効にします。
	"scm.countBadge": "all",

	// 既定のソース管理リポジトリ ビュー モードを制御します。
	//  - tree: リポジトリの変更をツリー形式で表示します。
	//  - list: リポジトリの変更を一覧で表示します。
	"scm.defaultViewMode": "list",

	// エディターの差分デコレーターを制御します。
	//  - all: 使用可能なすべての場所で差分の装飾を表示します。
	//  - gutter: 差分の装飾はエディターのとじしろでのみ表示します。
	//  - overview: 差分の装飾は、概要ルーラーでのみ表示します。
	//  - minimap: 差分の装飾はミニマップでのみ表示します。
	//  - none: 差分の装飾を表示しません。
	"scm.diffDecorations": "all",

	// ソース管理の差分の余白の装飾に関する動作を制御します。
	//  - diff: クリック時にインライン差分ピーク ビューを表示します。
	//  - none: 何もしない。
	"scm.diffDecorationsGutterAction": "diff",

	// 余白におけるソース管理の差分デコレーターの表示を制御します。
	//  - always: 常に余白に差分デコレーターを表示します。
	//  - hover: カーソルを置いた時にのみ余白に差分デコレーターを表示します。
	"scm.diffDecorationsGutterVisibility": "always",

	// 余白の差分表示 (追加と変更) の幅 (ピクセル) を制御します。
	"scm.diffDecorationsGutterWidth": 3,

	// 入力メッセージのフォントを制御します。ワークベンチ ユーザー インターフェイスのフォント ファミリーを使う場合は 'default'、'#editor.fontFamily#' の値を使う場合は 'editor' を使用します。カスタム フォント ファミリーを使うこともできます。
	"scm.inputFontFamily": "default",

	// 入力メッセージのフォント サイズをピクセル単位で制御します。
	"scm.inputFontSize": 13,

	// ソース管理プロバイダー ヘッダーのカウント バッジを制御します。これらのヘッダーは、複数のプロバイダーがある場合にのみ表示されます。
	//  - hidden: ソース管理プロバイダーのカウント バッジを非表示にします。
	//  - auto: 0 以外の場合にのみ、ソース管理プロバイダーのカウント バッジを表示します。
	//  - visible: ソース管理プロバイダーのカウント バッジを表示します。
	"scm.providerCountBadge": "hidden",

	// ソース管理リポジトリのセクションに表示するリポジトリの数を制御します。'0' に設定すると、ビューのサイズを手動で変更できるようになります。
	"scm.repositories.visible": 10,

	// SCM ビューにアクション ボタンを表示するかどうかを制御します。
	"scm.showActionButton": true,

	// エディターで CodeLens を表示するかどうかを制御します。
	"diffEditor.codeLens": false,

	// 有効にすると、差分エディターは先頭または末尾の空白文字の変更を無視します。
	"diffEditor.ignoreTrimWhitespace": true,

	// 差分計算が取り消された後のタイムアウト (ミリ秒単位)。タイムアウトなしには 0 を使用します。
	"diffEditor.maxComputationTime": 5000,

	// 差分を計算する場合の最大ファイル サイズ (MB)。制限なしの場合は 0 を使用します。
	"diffEditor.maxFileSize": 50,

	// 差分エディターが追加/削除された変更に +/- インジケーターを示すかどうかを制御します。
	"diffEditor.renderIndicators": true,

	// 差分エディターが差分を横に並べて表示するか、行内に表示するかを制御します。
	"diffEditor.renderSideBySide": true,

	// 
	//  - off: 行を折り返しません。
	//  - on: 行をビューポートの幅で折り返します。
	//  - inherit: 行は、`editor.wordWrap` 設定に従って折り返されます。
	"diffEditor.wordWrap": "inherit",

	// コミット文字で候補を受け入れるかどうかを制御します。たとえば、JavaScript ではセミコロン (`;`) をコミット文字にして、候補を受け入れてその文字を入力することができます。
	"editor.acceptSuggestionOnCommitCharacter": true,

	// `Tab` キーに加えて `Enter` キーで候補を受け入れるかどうかを制御します。改行の挿入や候補の反映の間であいまいさを解消するのに役立ちます。
	//  - on
	//  - smart: テキストの変更を行うとき、`Enter` を使用する場合にのみ候補を受け付けます。
	//  - off
	"editor.acceptSuggestionOnEnter": "on",

	// 一度にスクリーン リーダーによって読み上げることができるエディターの行数を制御します。スクリーン リーダーが検出されると、既定値が 500 に自動的に設定されます。警告: 既定値より大きい数値の場合は、パフォーマンスに影響があります。
	"editor.accessibilityPageSize": 10,

	// エディターをスクリーン リーダーに最適化されたモードで実行するかどうかを制御します。オンに設定すると単語の折り返しが無効になります。
	//  - auto: エディターはスクリーン リーダーがいつ接続されたかを検出するためにプラットフォーム API を使用します。
	//  - on: エディターは永続的にスクリーン リーダーでの使用向けに最適化されます。単語の折り返しは無効になります。
	//  - off: エディターはスクリーン リーダー向けに最適化されません。
	"editor.accessibilitySupport": "auto",

	// エディターで左角かっこを追加した後に自動的に右角かっこを挿入するかどうかを制御します。
	//  - always
	//  - languageDefined: 言語設定を使用して、いつかっこを自動クローズするか決定します。
	//  - beforeWhitespace: カーソルが空白文字の左にあるときだけ、かっこを自動クローズします。
	//  - never
	"editor.autoClosingBrackets": "languageDefined",

	// 削除時にエディターで隣接する終わり引用符または括弧を削除するかどうかを制御します。
	//  - always
	//  - auto: 隣接する終わり引用符または括弧が自動的に挿入された場合にのみ、それらを削除します。
	//  - never
	"editor.autoClosingDelete": "auto",

	// エディターで終わり引用符または括弧を上書きするかどうかを制御します。
	//  - always
	//  - auto: 終わり引用符または括弧が自動的に挿入された場合にのみ、それらを上書きします。
	//  - never
	"editor.autoClosingOvertype": "auto",

	// ユーザーが開始引用符を追加した後、エディター自動的に引用符を閉じるかどうかを制御します。
	//  - always
	//  - languageDefined: 言語設定を使用して、いつ引用符を自動クローズするか決定します。
	//  - beforeWhitespace: カーソルが空白文字の左にあるときだけ、引用符を自動クローズします。
	//  - never
	"editor.autoClosingQuotes": "languageDefined",

	// ユーザーが行を入力、貼り付け、移動、またはインデントするときに、エディターでインデントを自動的に調整するかどうかを制御します。
	//  - none: エディターはインデントを自動的に挿入しません。
	//  - keep: エディターは、現在の行のインデントを保持します。
	//  - brackets: エディターは、現在の行のインデントを保持し、言語が定義されたかっこを優先します。
	//  - advanced: エディターは、現在の行のインデントを保持し、言語が定義されたかっこを優先し、言語で定義された特別な onEnterRules を呼び出します。
	//  - full: エディターは、現在の行のインデントを保持し、言語が定義されたかっこを優先し、言語で定義された特別な onEnterRules を呼び出し、言語で定義された indentationRules を優先します。
	"editor.autoIndent": "full",

	// 引用符または角かっこを入力するときに、エディターが選択範囲を自動的に囲むかどうかを制御します。
	//  - languageDefined: 言語構成を使用して、選択範囲をいつ自動的に囲むかを判断します。
	//  - quotes: 角かっこではなく、引用符で囲みます。
	//  - brackets: 引用符ではなく、角かっこで囲みます。
	//  - never
	"editor.autoSurround": "languageDefined",

	// 角かっこのペアの彩色を有効にするかどうかを制御します。角かっこの強調表示の色をオーバーライドするには、'workbench.colorCustomizations' を使用します。
	"editor.bracketPairColorization.enabled": false,

	// 保存時に実行されるコードアクションの種類。
	"editor.codeActionsOnSave": {},

	// エディターで CodeLens を表示するかどうかを制御します。
	"editor.codeLens": true,

	// CodeLens のフォント ファミリを制御します。
	"editor.codeLensFontFamily": "",

	// CodeLens のフォント サイズをピクセル単位で制御します。'0' に設定すると、'#editor.fontSize#' の 90% が使用されます。
	"editor.codeLensFontSize": 0,

	// エディターでインライン カラー デコレーターと色の選択を表示する必要があるかどうかを制御します。
	"editor.colorDecorators": true,

	// マウスとキーでの選択により列の選択を実行できるようにします。
	"editor.columnSelection": false,

	// 行コメントの追加または削除アクションの切り替えで、空の行を無視するかどうかを制御します。
	"editor.comments.ignoreEmptyLines": true,

	// コメント時に空白文字を挿入するかどうかを制御します。
	"editor.comments.insertSpace": true,

	// 構文ハイライトをクリップボードにコピーするかどうかを制御します。
	"editor.copyWithSyntaxHighlighting": true,

	// カーソルのアニメーション方式を制御します。
	"editor.cursorBlinking": "blink",

	// 滑らかなキャレットアニメーションを有効にするかどうかを制御します。
	"editor.cursorSmoothCaretAnimation": false,

	// カーソルのスタイルを制御します。
	"editor.cursorStyle": "line",

	// カーソル前後の表示可能な先頭と末尾の行の最小数を制御します。他の一部のエディターでは 'scrollOff' または `scrollOffset` と呼ばれます。
	"editor.cursorSurroundingLines": 0,

	// 'カーソルの周囲の行' を適用するタイミングを制御します。
	//  - default: `cursorSurroundingLines` は、キーボードまたは API でトリガーされた場合にのみ強制されます。
	//  - all: `cursorSurroundingLines` は常に適用されます。
	"editor.cursorSurroundingLinesStyle": "default",

	// `editor.cursorStyle` が `line` に設定されている場合、カーソルの幅を制御します。
	"editor.cursorWidth": 0,

	// 他のすべてのフォーマッタ設定よりも優先される、既定のフォーマッタを定義します。フォーマッタを提供している拡張機能の識別子にする必要があります。
	//  - null: なし
	//  - njpwerner.autodocstring: Automatically generates detailed docstrings for python functions
	//  - vscode.css-language-features: CSS、LESS、SCSS ファイルに豊富な言語サポートを提供。
	//  - vscode.html-language-features: HTML と Handlebar ファイルに豊富な言語サポートを提供します
	//  - redhat.java: Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...
	//  - vscode.json-language-features: JSON ファイルに豊富な言語サポートを提供。
	//  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
	//  - yzhang.markdown-all-in-one: Markdownの記述に必要なものすべて (キーボードショートカット、目次、自動プレビューなど)
	//  - vscode.markdown-language-features: Markdown に豊富な言語サポートを提供。
	//  - ms-mssql.mssql: Develop Microsoft SQL Server, Azure SQL Database and SQL Data Warehouse everywhere
	//  - vscode.php-language-features: PHP ファイルに豊富な言語サポートを提供します。
	//  - ms-python.python: IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), Jupyter Notebooks, code formatting, refactoring, unit tests, and more.
	//  - donjayamanne.python-environment-manager: View and manage Python environments & pacakges.
	//  - ms-vscode.references-view: Reference Search results as separate, stable view in the sidebar
	//  - vscode.search-result: シンタックスハイライトとタブ付き検索結果向け言語機能を提供します。
	//  - vscode.typescript-language-features: JavaScript と TypeScript ファイルに豊富な言語サポートを提供。
	//  - KevinRose.vsc-python-indent: Correct python indentation.
	//  - batisteo.vscode-django: Beautiful syntax and scoped snippets for perfectionists with deadlines
	//  - vscjava.vscode-java-debug: A lightweight Java debugger for Visual Studio Code
	//  - vscjava.vscode-java-pack: Popular extensions for Java development that provides Java IntelliSense, debugging, testing, Maven/Gradle support, project management and more
	//  - vscjava.vscode-maven: Manage Maven projects, execute goals, generate project from archetype, improve user experience for Java developers.
	//  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
	//  - CoenraadS.bracket-pair-colorizer-2: A customizable extension for colorizing matching brackets
	//  - streetsidesoftware.code-spell-checker: Spelling checker for source code
	//  - vscode.configuration-editing: 設定、起動、拡張機能の推奨事項ファイルといった、構成ファイルの機能 (高度な IntelliSense、auto-fixing など) を提供します。
	//  - ms-mssql.data-workspace-vscode: Additional common functionality for database projects
	//  - vscode.debug-auto-launch: node-debug 拡張がアクティブではないときに自動的にアタッチする機能を補助します。
	//  - vscode.debug-server-ready: デバッグ対象のサーバーが準備完了になったら、URI をブラウザーで開きます。
	//  - vscode.emmet: VSCode の Emmet サポート
	//  - vscode.extension-editing: 拡張機能を作成するためのリンティング機能を提供します。
	//  - vscode.git: Git SCM統合
	//  - vscode.github: VS Code 用 GitHub 機能
	//  - vscode.github-authentication: GitHub 認証プロバイダー
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: VS Code に Gulp 機能を追加する拡張機能。
	//  - vscode.image-preview: VS Code の組み込みイメージ プレビューを提供します
	//  - oderwat.indent-rainbow: Makes indentation easier to read
	//  - vscode.ipynb: Jupyter の .ipynb ノートブック ファイルを開いて読み取るための基本サポートを提供します
	//  - vscode.jake: VS Code に Jake 機能を追加する拡張機能。
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, latex, gif, png, svg, jpeg and other such outputs)
	//  - hancel.markdown-image: Easy to insert a image to markdown
	//  - vscode.markdown-math: ノートブックのマークダウンに数式サポートを追加します。
	//  - marp-team.marp-vscode: Create slide deck written in Marp Markdown on VS Code
	//  - PKief.material-icon-theme: Material Design Icons for Visual Studio Code
	//  - vscode.merge-conflict: 行内マージ競合のハイライト、コマンドを提供します。
	//  - vscode.microsoft-authentication: Microsoft 認証プロバイダー
	//  - vscode.npm: npm スクリプトのタスクサポートを追加する拡張
	//  - christian-kohler.path-intellisense: Visual Studio Code plugin that autocompletes filenames
	//  - tht13.python: Python language extension for vscode
	//  - ms-vscode-remote.remote-wsl: Open any folder in the Windows Subsystem for Linux (WSL) and take advantage of Visual Studio Code's full feature set.
	//  - ms-vscode-remote.remote-wsl-recommender: Recommends using the Windows Subsystem for Linux (WSL) and the Remote WSL extension.
	//  - vscode.simple-browser: Web コンテンツを表示するための非常に基本的な組み込みの Web ビューです。
	//  - ms-mssql.sql-database-projects-vscode: Allows users to develop and publish database schemas for MSSQL Databases
	//  - hediet.vscode-drawio: This unofficial extension integrates Draw.io into VS Code.
	//  - slevesque.vscode-hexdump: Display a specified file in hexadecimal
	//  - vscjava.vscode-java-dependency: Manage Java projects in Visual Studio Code
	//  - vscjava.vscode-java-test: Run and debug JUnit or TestNG test cases
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	//  - GabrielBB.vscode-lombok: A lightweight extension to support Lombok annotations processing in Visual Studio Code
	//  - DavidAnson.vscode-markdownlint: Markdown linting and style checking for Visual Studio Code
	//  - DougFinke.vscode-pandoc: Renders markdown through pandoc
	//  - VisualStudioExptTeam.vscodeintellicode: AI 支援開発
	//  - patricklee.vsnotes: Simple VS Code extension for plain text note taking.
	"editor.defaultFormatter": null,

	// [定義へ移動] マウス ジェスチャーで、常にピーク ウィジェットを開くかどうかを制御します。
	"editor.definitionLinkOpensInPeek": false,

	// ファイルがファイルの内容に基づいて開かれる場合、`editor.tabSize#` と `#editor.insertSpaces` を自動的に検出するかどうかを制御します。
	"editor.detectIndentation": true,

	// ドラッグ アンド ドロップによる選択範囲の移動をエディターが許可するかどうかを制御します。
	"editor.dragAndDrop": true,

	// 選択範囲を指定しないでコピーする場合に現在の行をコピーするかどうかを制御します。
	"editor.emptySelectionClipboard": true,

	// `Alt` を押すと、スクロール速度が倍増します。
	"editor.fastScrollSensitivity": 5,

	// 検索ウィジェットがエディターの上に行をさらに追加するかどうかを制御します。true の場合、検索ウィジェットが表示されているときに最初の行を超えてスクロールできます。
	"editor.find.addExtraSpaceOnTop": true,

	// [選択範囲を検索] を自動的にオンにする条件を制御します。
	//  - never: [選択範囲を検索] を自動的にオンにしません (既定)。
	//  - always: [選択範囲を検索] を常に自動的にオンにします。
	//  - multiline: 複数行のコンテンツが選択されている場合は、[選択範囲を検索] を自動的にオンにします。
	"editor.find.autoFindInSelection": "never",

	// 入力中に一致を検索するためにカーソルをジャンプさせるかどうかを制御します。
	"editor.find.cursorMoveOnType": true,

	// 以降で一致が見つからない場合に、検索を先頭から (または末尾から) 自動的に再実行するかどうか制御します。
	"editor.find.loop": true,

	// エディターの選択範囲から検索ウィジェット内の検索文字列を与えるかどうかを制御します。
	//  - never: エディターの選択範囲から検索文字列をシードしません。
	//  - always: カーソル位置にある単語を含め、エディターの選択範囲から検索文字列を常にシードします。
	//  - selection: エディターの選択範囲から検索文字列のみをシードします。
	"editor.find.seedSearchStringFromSelection": "always",

	// エディターでコードの折りたたみを有効にするかどうかを制御します。
	"editor.folding": true,

	// エディターで折りたたまれた範囲を強調表示するかどうかをコントロールします。
	"editor.foldingHighlight": true,

	// エディターがインポート範囲を自動的に折りたたむかどうかを制御します。
	"editor.foldingImportsByDefault": false,

	// 折りたたみ範囲の計算方法を制御します。
	//  - auto: 利用可能な場合は言語固有の折りたたみ方法を使用し、利用可能ではない場合はインデントベースの方法を使用します。
	//  - indentation: インデントベースの折りたたみ方法を使用します。
	"editor.foldingStrategy": "auto",

	// フォント ファミリを制御します。
	"editor.fontFamily": "Consolas, 'Courier New', monospace",

	// フォントの合字やフォントの機能を構成します。合字を有効または無効にするブール値または CSS 'font-feature-settings' プロパティの値の文字列を指定できます。
	"editor.fontLigatures": false,

	// フォント サイズ (ピクセル単位) を制御します。
	"editor.fontSize": 14,

	// フォントの太さを制御します。"標準" および "太字" のキーワードまたは 1 ～ 1000 の数字を受け入れます。
	"editor.fontWeight": "normal",

	// 貼り付けた内容がエディターにより自動的にフォーマットされるかどうかを制御します。フォーマッタを使用可能にする必要があります。また、フォーマッタがドキュメント内の範囲をフォーマットできなければなりません。
	"editor.formatOnPaste": false,

	// ファイルを保存するときにフォーマットします。フォーマッタが有効でなければなりません。ファイルの遅延保存やエディターを閉じることは許可されていません。
	"editor.formatOnSave": false,

	// 保存の形式でファイル全体をフォーマット指定するか、変更のみをフォーマットするかを制御します。`editor.formatOnSave` が有効な場合にのみ適用されます。
	//  - file: ファイル全体をフォーマットします。
	//  - modifications: 変更をフォーマットします (ソース管理が必要)。
	//  - modificationsIfAvailable: 変更部分のみのフォーマットを試みます (ソース管理が必要)。ソース管理が使用できない場合は、ファイル全体がフォーマットされます。
	"editor.formatOnSaveMode": "file",

	// エディターで入力後に自動的に行のフォーマットを行うかどうかを制御します。
	"editor.formatOnType": false,

	// エディターで縦のグリフ余白が表示されるかどうかを制御します。ほとんどの場合、グリフ余白はデバッグに使用されます。
	"editor.glyphMargin": true,

	// '宣言へ移動' の結果が現在の場所である場合に実行される代替コマンド ID。
	"editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",

	// '定義へ移動' の結果が現在の場所である場合に実行される代替コマンド ID。
	"editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",

	// '実装へ移動' の結果が現在の場所である場合に実行される代替コマンド ID。
	"editor.gotoLocation.alternativeImplementationCommand": "",

	// '参照へ移動' の結果が現在の場所である場合に実行される代替コマンド ID。
	"editor.gotoLocation.alternativeReferenceCommand": "",

	// '型定義へ移動' の結果が現在の場所である場合に実行される代替コマンド ID。
	"editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",

	// この設定は非推奨です。代わりに、'editor.editor.gotoLocation.multipleDefinitions' や 'editor.editor.gotoLocation.multipleImplementations' などの個別の設定を使用してください。
	// 
	"editor.gotoLocation.multiple": null,

	// 複数のターゲットの場所があるときの '宣言へ移動' コマンドの動作を制御します。
	//  - peek: 結果のピーク ビューを表示 (既定)
	//  - gotoAndPeek: 主な結果に移動し、ピーク ビューを表示します
	//  - goto: プライマリ結果に移動し、他のユーザーへのピークレス ナビゲーションを有効にします
	"editor.gotoLocation.multipleDeclarations": "peek",

	// 複数のターゲットの場所があるときの '定義へ移動' コマンドの動作を制御します。
	//  - peek: 結果のピーク ビューを表示 (既定)
	//  - gotoAndPeek: 主な結果に移動し、ピーク ビューを表示します
	//  - goto: プライマリ結果に移動し、他のユーザーへのピークレス ナビゲーションを有効にします
	"editor.gotoLocation.multipleDefinitions": "peek",

	// 複数のターゲットの場所があるときの '実装に移動' コマンドの動作を制御します。
	//  - peek: 結果のピーク ビューを表示 (既定)
	//  - gotoAndPeek: 主な結果に移動し、ピーク ビューを表示します
	//  - goto: プライマリ結果に移動し、他のユーザーへのピークレス ナビゲーションを有効にします
	"editor.gotoLocation.multipleImplementations": "peek",

	// ターゲットの場所が複数存在する場合の '参照へ移動' コマンドの動作を制御します。
	//  - peek: 結果のピーク ビューを表示 (既定)
	//  - gotoAndPeek: 主な結果に移動し、ピーク ビューを表示します
	//  - goto: プライマリ結果に移動し、他のユーザーへのピークレス ナビゲーションを有効にします
	"editor.gotoLocation.multipleReferences": "peek",

	// 複数のターゲットの場所があるときの '型定義へ移動' コマンドの動作を制御します。
	//  - peek: 結果のピーク ビューを表示 (既定)
	//  - gotoAndPeek: 主な結果に移動し、ピーク ビューを表示します
	//  - goto: プライマリ結果に移動し、他のユーザーへのピークレス ナビゲーションを有効にします
	"editor.gotoLocation.multipleTypeDefinitions": "peek",

	// ブラケット ペアのガイドを有効にするかどうかを制御します。
	//  - true: ブラケット ペア ガイドを有効にする。
	//  - active: アクティブなブラケット ペアに対してのみブラケット ペア ガイドを有効にします。
	//  - false: ブラケット ペア ガイドを無効にします。
	"editor.guides.bracketPairs": false,

	// 水平方向のブラケット ペアのガイドを有効にするかどうかを制御します。
	//  - true: 縦のブラケット ペアのガイドに加えて、同じく水平のガイドを有効にします。
	//  - active: アクティブなブラケット ペアに対してのみ、水平のガイドを有効にします。
	//  - false: 水平ブラケット ペア ガイドを無効にします。
	"editor.guides.bracketPairsHorizontal": "active",

	// ブラケット ペアのガイドを有効にするかどうかを制御します。
	"editor.guides.highlightActiveBracketPair": true,

	// エディターでアクティブなインデントのガイドを強調表示するかどうかを制御します。
	"editor.guides.highlightActiveIndentation": true,

	// エディターでインデント ガイドを表示するかどうかを制御します。
	"editor.guides.indentation": true,

	// 概要ルーラーでカーソルを非表示にするかどうかを制御します。
	"editor.hideCursorInOverviewRuler": false,

	// スペースがある場合は、行の上にマウス カーソルを被せて表示する。
	"editor.hover.above": true,

	// ホバーを表示後の待ち時間 (ミリ秒) を制御します。
	"editor.hover.delay": 300,

	// ホバーを表示するかどうかを制御します。
	"editor.hover.enabled": true,

	// ホバーにマウスを移動したときに、ホバーを表示し続けるかどうかを制御します。
	"editor.hover.sticky": true,

	// エディターでインレー ヒントを有効にします。
	"editor.inlayHints.enabled": true,

	// エディターでインレー ヒントのフォント ファミリを制御します。空に設定すると、`editor.fontFamily` が使用されます。
	"editor.inlayHints.fontFamily": "",

	// エディター内のインレイ ヒントのフォント サイズを制御します。既定値の 90% の `editor.fontSize` は、構成された値が `5` より小さいか、エディター フォント サイズより大きい場合に使用されます。
	"editor.inlayHints.fontSize": 0,

	// エディターにインライン候補を自動的に表示するかどうかを制御します。
	"editor.inlineSuggest.enabled": true,

	// `Tab` キーを押すとスペースが挿入されます。`editor.detectIndentation` がオンの場合、この設定はファイル コンテンツに基づいて上書きされます。
	"editor.insertSpaces": true,

	// インデントを増減する角かっこを定義します。
	"editor.language.brackets": false,

	// 角かっこのペアの色付けが有効になっている場合、入れ子のレベルによって色付けされる角かっこのペアを定義します。
	"editor.language.colorizedBracketPairs": false,

	// 大きなファイルでメモリが集中する特定の機能を無効にするための特別な処理。
	"editor.largeFileOptimizations": true,

	// 文字間隔 (ピクセル単位) を制御します。
	"editor.letterSpacing": 0,

	// エディターでコード アクションの電球を有効にします。
	"editor.lightbulb.enabled": true,

	// 行の高さを制御します。
	//  - 0 を使用してフォント サイズから行の高さを自動的に計算します。
	//  - 0 から 8 までの値は、フォント サイズの乗数として使用されます。
	//  - 8 以上の値は有効値として使用されます。
	"editor.lineHeight": 0,

	// 行番号の表示を制御します。
	//  - off: 行番号は表示されません。
	//  - on: 行番号は、絶対値として表示されます。
	//  - relative: 行番号は、カーソル位置までの行数として表示されます。
	//  - interval: 行番号は 10 行ごとに表示されます。
	"editor.lineNumbers": "on",

	// リンクされた編集がエディターで有効にされるかどうかを制御します。言語によっては、編集中に HTML タグなどの関連する記号が更新されます。
	"editor.linkedEditing": false,

	// エディターがリンクを検出してクリック可能な状態にするかどうかを制御します。
	"editor.links": true,

	// 対応するかっこを強調表示します。
	"editor.matchBrackets": "always",

	// この長さを越える行は、パフォーマンス上の理由によりトークン化されません。
	"editor.maxTokenizationLineLength": 20000,

	// ミニマップを表示するかどうかを制御します。
	"editor.minimap.enabled": true,

	// 表示するミニマップの最大幅を特定の列数に制限します。
	"editor.minimap.maxColumn": 120,

	// 行にカラー ブロックではなく実際の文字を表示します。
	"editor.minimap.renderCharacters": true,

	// ミニマップに描画されるコンテンツのスケール: 1、2、または 3。
	"editor.minimap.scale": 1,

	// ミニマップ スライダーを表示するタイミングを制御します。
	"editor.minimap.showSlider": "mouseover",

	// ミニマップを表示する場所を制御します。
	"editor.minimap.side": "right",

	// ミニマップのサイズを制御します。
	//  - proportional: ミニマップのサイズは、エディターのコンテンツと同じです (スクロールする場合があります)。
	//  - fill: ミニマップは、必要に応じて、エディターの高さを埋めるため、拡大または縮小します (スクロールしません)。
	//  - fit: ミニマップは必要に応じて縮小し、エディターより大きくなることはありません (スクロールしません)。
	"editor.minimap.size": "proportional",

	// マウス ホイール スクロール イベントの `deltaX` と `deltaY` で使用される乗数。
	"editor.mouseWheelScrollSensitivity": 1,

	// `Ctrl` キーを押しながらマウス ホイールを使用してエディターのフォントをズームします。
	"editor.mouseWheelZoom": false,

	// 複数のカーソルが重なっているときは、マージします。
	"editor.multiCursorMergeOverlapping": true,

	// マウスを使用して複数のカーソルを追加するときに使用する修飾子です。「定義に移動」や「リンクを開く」のマウス ジェスチャーは、マルチカーソルの修飾子と競合しないように適用されます。[詳細](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier)。
	//  - ctrlCmd: Windows および Linux 上の `Control` キーと macOS 上の `Command` キーに割り当てます。
	//  - alt: Windows および Linux 上の `Alt` キーと macOS 上の `Option` キーに割り当てます。
	"editor.multiCursorModifier": "alt",

	// 貼り付けたテキストの行数がカーソル数と一致する場合の貼り付けを制御します。
	//  - spread: カーソルごとにテキストを 1 行ずつ貼り付けます。
	//  - full: 各カーソルは全文を貼り付けます。
	"editor.multiCursorPaste": "spread",

	// エディターでセマンティック シンボルの出現箇所を強調表示するかどうかを制御します。
	"editor.occurrencesHighlight": true,

	// 概要ルーラーの周囲に境界線が描画されるかどうかを制御します。
	"editor.overviewRulerBorder": true,

	// エディターの下端と最後の行の間の余白の大きさを制御します。
	"editor.padding.bottom": 0,

	// エディターの上端と最初の行の間の余白の大きさを制御します。
	"editor.padding.top": 0,

	// パラメーター ヒント メニューを周回するか、リストの最後で閉じるかどうかを制御します。
	"editor.parameterHints.cycle": false,

	// 入力時にパラメーター ドキュメントと型情報を表示するポップアップを有効にします。
	"editor.parameterHints.enabled": true,

	// ピーク ウィジェットのインライン エディターまたはツリーをフォーカスするかどうかを制御します。
	//  - tree: ピークを開くときにツリーにフォーカスする
	//  - editor: ピークを開くときにエディターにフォーカスする
	"editor.peekWidgetDefaultFocus": "tree",

	// 入力中に候補を自動的に表示するかどうかを制御します。
	"editor.quickSuggestions": {
		"other": true,
		"comments": false,
		"strings": false
	},

	// クイック候補が表示されるまでのミリ秒を制御します。
	"editor.quickSuggestionsDelay": 10,

	// 名前を変更する前に変更をプレビューする機能を有効または無効にする
	"editor.rename.enablePreview": true,

	// 非推奨です。代わりに、`editor.linkedEditing` を使用してください。
	// エディターでの型の自動名前変更を制御します。
	"editor.renameOnType": false,

	// エディターで制御文字を表示するかどうかを制御します。
	"editor.renderControlCharacters": true,

	// ファイルの末尾が改行の場合は、最後の行番号を表示します。
	"editor.renderFinalNewline": true,

	// エディターが現在の行をどのように強調表示するかを制御します。
	//  - none
	//  - gutter
	//  - line
	//  - all: 余白と現在の行を強調表示します。
	"editor.renderLineHighlight": "line",

	// エディターにフォーカスがある場合にのみ現在の行をエディターで強調表示する必要があるかどうかを制御します。
	"editor.renderLineHighlightOnlyWhenFocus": false,

	// エディターで空白文字を表示するかどうかを制御します。
	//  - none
	//  - boundary: 単語間の単一スペース以外の空白文字を表示します。
	//  - selection: 選択したテキストにのみ空白文字を表示します。
	//  - trailing: 末尾の空白文字のみを表示します。
	//  - all
	"editor.renderWhitespace": "selection",

	// 選択範囲の角を丸くするかどうかを制御します。
	"editor.roundedSelection": true,

	// 特定の等幅文字数の後に垂直ルーラーを表示します。複数のルーラーには複数の値を使用します。配列が空の場合はルーラーを表示しません。
	"editor.rulers": [],

	// 水平スクロールバーの表示を制御します。
	//  - auto: 水平スクロールバーは、必要な場合にのみ表示されます。
	//  - visible: 水平スクロールバーは常に表示されます。
	//  - hidden: 水平スクロールバーは常に非表示になります。
	"editor.scrollbar.horizontal": "auto",

	// 水平スクロールバーの高さ。
	"editor.scrollbar.horizontalScrollbarSize": 12,

	// クリックするとページ単位でスクロールするか、クリック位置にジャンプするかを制御します。
	"editor.scrollbar.scrollByPage": false,

	// 垂直スクロールバーの表示を制御します。
	//  - auto: 垂直スクロールバーは、必要な場合にのみ表示されます。
	//  - visible: 垂直スクロールバーは常に表示されます。
	//  - hidden: 垂直スクロールバーは常に非表示になります。
	"editor.scrollbar.vertical": "auto",

	// 垂直スクロールバーの幅。
	"editor.scrollbar.verticalScrollbarSize": 14,

	// エディターが水平方向に余分にスクロールする文字数を制御します。
	"editor.scrollBeyondLastColumn": 5,

	// エディターが最後の行を越えてスクロールするかどうかを制御します。
	"editor.scrollBeyondLastLine": true,

	// 垂直および水平方向の両方に同時にスクロールする場合は、主要な軸に沿ってスクロールします。トラックパッド上で垂直方向にスクロールする場合は、水平ドリフトを防止します。
	"editor.scrollPredominantAxis": true,

	// エディターが選択項目と類似の一致項目を強調表示するかどうかを制御します。
	"editor.selectionHighlight": true,

	// semanticHighlighting をサポートされる言語で表示するかどうかを制御します。
	//  - true: セマンティックの強調表示がすべての配色テーマについて有効になりました。
	//  - false: セマンティックの強調表示がすべての配色テーマについて無効になりました。
	//  - configuredByTheme: セマンティックの強調表示は、現在の配色テーマの 'semanticHighlighting' 設定によって構成されています。
	"editor.semanticHighlighting.enabled": "configuredByTheme",

	// 現在選択されている配色テーマからの、エディターのセマンティック トークンの色とスタイルをオーバーライドします。
	"editor.semanticTokenColorCustomizations": {},

	// 非推奨の変数の取り消し線を制御します。
	"editor.showDeprecated": true,

	// とじしろのの折りたたみコントロールを表示するタイミングを制御します。
	//  - always: 常に折りたたみコントロールを表示します。
	//  - mouseover: マウスがとじしろの上にあるときにのみ、折りたたみコントロールを表示します。
	"editor.showFoldingControls": "mouseover",

	// 使用されていないコードのフェードアウトを制御します。
	"editor.showUnused": true,

	// 先頭と末尾の空白を常に選択するかどうか。
	"editor.smartSelect.selectLeadingAndTrailingWhitespace": true,

	// アニメーションでエディターをスクロールするかどうかを制御します。
	"editor.smoothScrolling": false,

	// 他の修正候補と一緒にスニペットを表示するかどうか、およびその並び替えの方法を制御します。
	//  - top: 他の候補の上にスニペットの候補を表示します。
	//  - bottom: 他の候補の下にスニペットの候補を表示します。
	//  - inline: 他の候補と一緒にスニペットの候補を表示します。
	//  - none: スニペットの候補を表示しません。
	"editor.snippetSuggestions": "inline",

	// エディターのコンテンツをダブルクリックするか、`Escape` キーを押しても、ピーク エディターを開いたままにします。
	"editor.stablePeek": false,

	// インデントにスペースを使用するときは、タブ文字の選択動作をエミュレートします。選択範囲はタブ位置に留まります。
	"editor.stickyTabStops": false,

	// この設定は非推奨です。代わりに、'editor.suggest.showKeywords' や 'editor.suggest.showSnippets' などの個別の設定を使用してください。
	// 
	"editor.suggest.filteredTypes": {},

	// 候補のフィルター処理と並び替えでささいな入力ミスを考慮するかどうかを制御します。
	"editor.suggest.filterGraceful": true,

	// 入力候補を受け入れるときに単語を上書きするかどうかを制御します。これは、この機能の利用を選択する拡張機能に依存することにご注意ください。
	//  - insert: カーソルの右のテキストを上書きせずに候補を挿入します。
	//  - replace: 候補を挿入し、カーソルの右のテキストを上書きします。
	"editor.suggest.insertMode": "insert",

	// 並べ替えがカーソル付近に表示される単語を優先するかどうかを制御します。
	"editor.suggest.localityBonus": false,

	// この設定は非推奨です。候補ウィジェットのサイズ変更ができるようになりました。
	// 
	"editor.suggest.maxVisibleSuggestions": 0,

	// 提案の結果をエディターでプレビューするかどうかを制御します。
	"editor.suggest.preview": false,

	// 保存された候補セクションを複数のワークプレースとウィンドウで共有するかどうかを制御します (`editor.suggestSelection` が必要)。
	"editor.suggest.shareSuggestSelections": false,

	// 有効にすると、IntelliSense に 'クラス' 候補が表示されます。
	"editor.suggest.showClasses": true,

	// 有効にすると、IntelliSense に `色` 候補が表示されます。
	"editor.suggest.showColors": true,

	// 有効にすると、IntelliSense に `定数` 候補が表示されます。
	"editor.suggest.showConstants": true,

	// 有効にすると、IntelliSense に `コンストラクター` 候補が表示されます。
	"editor.suggest.showConstructors": true,

	// 有効にすると、IntelliSense に `customcolor` 候補が表示されます。
	"editor.suggest.showCustomcolors": true,

	// 有効にすると、IntelliSense に `非推奨` 候補が表示されます。
	"editor.suggest.showDeprecated": true,

	// 有効にすると、IntelliSense に `enumMember` 候補が表示されます。
	"editor.suggest.showEnumMembers": true,

	// 有効にすると、IntelliSense に `列挙型` 候補が表示されます。
	"editor.suggest.showEnums": true,

	// 有効にすると、IntelliSense に `イベント` 候補が表示されます。
	"editor.suggest.showEvents": true,

	// 有効にすると、IntelliSense に `フィールド` 候補が表示されます。
	"editor.suggest.showFields": true,

	// 有効にすると、IntelliSense に 'ファイル' 候補が表示されます。
	"editor.suggest.showFiles": true,

	// 有効にすると、IntelliSense に `フォルダー` 候補が表示されます。
	"editor.suggest.showFolders": true,

	// 有効にすると、IntelliSense に `関数` 候補が表示されます。
	"editor.suggest.showFunctions": true,

	// 提案のアイコンを表示するか、非表示にするかを制御します。
	"editor.suggest.showIcons": true,

	// 候補の詳細をラベル付きのインラインで表示するか、詳細ウィジェットにのみ表示するかを制御します
	"editor.suggest.showInlineDetails": true,

	// 有効にすると、IntelliSense に `インターフェイス` 候補が表示されます。
	"editor.suggest.showInterfaces": true,

	// 有効にすると、IntelliSense によって '問題' 候補が示されます。
	"editor.suggest.showIssues": true,

	// 有効にすると、IntelliSense に `キーワード` 候補が表示されます。
	"editor.suggest.showKeywords": true,

	// 有効にすると、IntelliSense に `メソッド` 候補が表示されます。
	"editor.suggest.showMethods": true,

	// 有効にすると、IntelliSense に `モジュール` 候補が表示されます。
	"editor.suggest.showModules": true,

	// 有効にすると、IntelliSense に `演算子` 候補が表示されます。
	"editor.suggest.showOperators": true,

	// 有効にすると、IntelliSense に `プロパティ` 候補が表示されます。
	"editor.suggest.showProperties": true,

	// 有効にすると、IntelliSense に `参照` 候補が表示されます。
	"editor.suggest.showReferences": true,

	// 有効にすると、IntelliSense に `スニペット` 候補が表示されます。
	"editor.suggest.showSnippets": true,

	// 候補ウィジェットの下部にあるステータス バーの表示を制御します。
	"editor.suggest.showStatusBar": false,

	// 有効にすると、IntelliSense に `構造体` 候補が表示されます。
	"editor.suggest.showStructs": true,

	// 有効にすると、IntelliSense に `typeParameter` 候補が表示されます。
	"editor.suggest.showTypeParameters": true,

	// 有効にすると、IntelliSense に `ユニット` 候補が表示されます。
	"editor.suggest.showUnits": true,

	// 有効な場合、IntelliSense によって 'ユーザー' 候補が示されます。
	"editor.suggest.showUsers": true,

	// 有効にすると、IntelliSense に `値` 候補が表示されます。
	"editor.suggest.showValues": true,

	// 有効にすると、IntelliSense に `変数` 候補が表示されます。
	"editor.suggest.showVariables": true,

	// 有効にすると、IntelliSense に 'テキスト' -候補が表示されます。
	"editor.suggest.showWords": true,

	// アクティブ スニペットがクイック候補を防止するかどうかを制御します。
	"editor.suggest.snippetsPreventQuickSuggestions": true,

	// 候補ウィジェットのフォント サイズ。`0` に設定すると、`editor.fontSize` の値が使用されます。
	"editor.suggestFontSize": 0,

	// 候補ウィジェットの行の高さ。`0` に設定すると、`editor.lineHeight` の値が使用されます。最小値は 8 です。
	"editor.suggestLineHeight": 0,

	// トリガー文字の入力時に候補が自動的に表示されるようにするかどうかを制御します。
	"editor.suggestOnTriggerCharacters": true,

	// 候補リストを表示するときに候補を事前に選択する方法を制御します。
	//  - first: 常に最初の候補を選択します。
	//  - recentlyUsed: `console.| -> console.log` などと選択対象に関して入力しない限りは、最近の候補を選択します。`log` は最近完了したためです。
	//  - recentlyUsedByPrefix: これらの候補を完了した以前のプレフィックスに基づいて候補を選択します。例: `co -> console` および `con -> const`。
	"editor.suggestSelection": "recentlyUsed",

	// タブ補完を有効にします。
	//  - on: タブ補完は、tab キーを押したときに最適な候補を挿入します。
	//  - off: タブ補完を無効にします。
	//  - onlySnippets: プレフィックスが一致する場合に、タブでスニペットを補完します。'quickSuggestions' が無効な場合に最適です。
	"editor.tabCompletion": "off",

	// 1 つのタブに相当するスペースの数。`editor.detectIndentation` がオンの場合、この設定はファイル コンテンツに基づいて上書きされます。
	"editor.tabSize": 4,

	// エディターの構文の色とフォント スタイルを、現在選択されている配色テーマからオーバーライドします。
	"editor.tokenColorCustomizations": {},

	// 自動挿入された末尾の空白を削除します。
	"editor.trimAutoWhitespace": true,

	// 折りたたまれた線の後の空のコンテンツをクリックすると線が展開されるかどうかを制御します。
	"editor.unfoldOnClickAfterEndOfLine": false,

	// 問題を起こす可能性がある、普通ではない行終端記号は削除してください。
	//  - auto: 通常とは異なる行の終端文字は自動的に削除される。
	//  - off: 通常とは異なる行の終端文字は無視される。
	//  - prompt: 通常とは異なる行の終端文字の削除プロンプトが表示される。
	"editor.unusualLineTerminators": "prompt",

	// 空白の挿入や削除はタブ位置に従って行われます。
	"editor.useTabStops": true,

	// ドキュメント内の単語に基づいて入力候補を計算するかどうかを制御します。
	"editor.wordBasedSuggestions": true,

	// 単語ベースの入力候補が計算されるドキュメントを制御します。
	//  - currentDocument: アクティブなドキュメントからのみ単語の候補を表示します。
	//  - matchingDocuments: 同じ言語の開いているすべてのドキュメントから単語の候補を表示します。
	//  - allDocuments: 開いているすべてのドキュメントから単語の候補を表示します。
	"editor.wordBasedSuggestionsMode": "matchingDocuments",

	// 単語に関連したナビゲーションまたは操作を実行するときに、単語の区切り文字として使用される文字。
	"editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

	// 行の折り返し方法を制御します。
	//  - off: 行を折り返しません。
	//  - on: 行をビューポートの幅で折り返します。
	//  - wordWrapColumn: `editor.wordWrapColumn` で行を折り返します。
	//  - bounded: ビューポートと `editor.wordWrapColumn` の最小値で行を折り返します。
	"editor.wordWrap": "off",

	// `editor.wordWrap` が `wordWrapColumn` または `bounded` の場合に、エディターの折り返し桁を制御します。
	"editor.wordWrapColumn": 80,

	// 折り返し行のインデントを制御します。
	//  - none: インデントしません。 折り返し行は列 1 から始まります。
	//  - same: 折り返し行は、親と同じインデントになります。
	//  - indent: 折り返し行は、親 +1 のインデントになります。
	//  - deepIndent: 折り返し行は、親 +2 のインデントになります。
	"editor.wrappingIndent": "same",

	// 折り返しポイントを計算するアルゴリズムを制御します。
	//  - simple: すべての文字の幅が同じであると仮定します。これは、モノスペース フォントや、グリフの幅が等しい特定のスクリプト (ラテン文字など) で正しく動作する高速アルゴリズムです。
	//  - advanced: 折り返しポイントの計算をブラウザーにデリゲートします。これは、大きなファイルのフリーズを引き起こす可能性があるものの、すべてのケースで正しく動作する低速なアルゴリズムです。
	"editor.wrappingStrategy": "simple",

	// 制限モードでバナーを表示するタイミングを制御します。
	//  - always: 信頼されていないワークスペースが開かれるたびにバナーを表示します。
	//  - untilDismissed: 信頼されていないワークスペースが初めて開かれる場合、閉じられるまでバナーを表示します。
	//  - never: 信頼されていないワークスペースが開かれる場合はバナーを表示しません。
	"security.workspace.trust.banner": "untilDismissed",

	// 空のウィンドウを VS Code 内で既定で信頼するかどうかを制御します。'#security.workspace.trust.untrustedFiles#' と共に使用すると、空のウィンドウでプロンプトを表示せずに、VS Code のすべての機能を有効にすることができます。
	"security.workspace.trust.emptyWindow": true,

	// VS Code 内でワークスペースの信頼を有効にするかどうかを制御します。
	"security.workspace.trust.enabled": true,

	// ワークスペースを信頼するための起動メッセージが表示されるタイミングを制御します。
	//  - always: 信頼されていないワークスペースが開かれるたびに信頼を確認します。
	//  - once: 信頼されていないワークスペースが初めて開かれるときに信頼を確認します。
	//  - never: 信頼されていないワークスペースが開かれる場合に信頼を確認しない。
	"security.workspace.trust.startupPrompt": "once",

	// 信頼されたワークスペースで信頼されていないファイルを開くときの取り扱いを制御します。この設定は、'#security.workspace.trust.emptyWindow#' 経由で信頼される空のウィンドウでファイルを開く場合にも適用されます。
	//  - prompt: ワークスペースごとに信頼されていないファイルをどのように処理するかを確認します。信頼されているワークスペースに信頼できないファイルが一度追加されると、再度プロンプトが表示されることはありません。
	//  - open: 確認せずに、信頼されていないファイルを信頼されているワークスペースに追加することを常に許可します。
	//  - newWindow: 確認せずに、制限モードで、信頼されていないファイルを常に別のウィンドウで開く。
	"security.workspace.trust.untrustedFiles": "prompt",

	// ワークベンチのアクティビティ バー アイコンをクリックする動作を制御します。
	//  - toggle: クリックした項目が既に表示されている場合は、サイド バーを非表示にします。
	//  - focus: クリックした項目が既に表示されている場合は、サイド バーにフォーカスします。
	"workbench.activityBar.iconClickBehavior": "toggle",

	// ワークベンチでのアクティビティ バーの表示をコントロールします。
	"workbench.activityBar.visible": true,

	// 現在選択している配色テーマで配色を上書きします。
	"workbench.colorCustomizations": {},

	// ワークベンチで使用される配色テーマを指定します。
	"workbench.colorTheme": "Default Dark+",

	// コマンド パレットで最近使用したコマンド履歴を保持する数を制御します。0 に設定するとコマンド履歴を無効にします。
	"workbench.commandPalette.history": 50,

	// コマンド パレットを次回開いたとき、コマンド パレットの最後の入力を復元するかどうかを制御します。
	"workbench.commandPalette.preserveInput": false,

	// リストのいずれかの種類と一致するエディターがエディター グループの最初のものとして開いており、複数のグループが開いている場合、グループは自動的にロックされます。ロックされたグループは、ユーザーのジェスチャ (例: ドラッグ アンド ドロップ) で明示的に選択された場合に、エディターを開くときにのみ使用されますが、既定では使用されません。その結果、ロックされたグループ内のアクティブなエディターが、誤って別のエディターで置き換えられる可能性は低くなります。
	"workbench.editor.autoLockGroups": {
		"workbench.input.interactive": false,
		"interactive": false,
		"workbench.editorinputs.searchEditorInput": false,
		"imagePreview.previewEditor": false,
		"vscode.markdown.preview.editor": false,
		"jsProfileVisualizer.cpuprofile.table": false,
		"hediet.vscode-drawio": false,
		"hediet.vscode-drawio-text": false,
		"java.formatterSettingsEditor": false,
		"terminalEditor": true,
		"default": false,
		"jupyter-notebook": false,
		"mainThreadWebview-markdown.preview": false
	},

	// 複数のグループが開かれているとき、中央揃えのレイアウトを自動的に横幅最大にするかどうかを制御します。1 つのグループのみが開かれている場合は、元の中央揃えの横幅に戻ります。
	"workbench.editor.centeredLayoutAutoResize": true,

	// 空のエディターのグループにある最後のタブを閉じたときの動作を制御します。有効であるとき、空のグループは自動的に閉じられます。無効であるとき、空のグループはグリッドの一部として残ります。
	"workbench.editor.closeEmptyGroups": true,

	// セッション中のファイルを表示しているエディターが、その他のプロセスによって削除されるか名前を変更された場合に、エディターを自動的に閉じるかどうかを制御します。これを無効にすると、このような場合にエディターを開き続けます。アプリケーション内で削除すると、エディターは常に閉じられ、変更が保存されていないエディターのデータを保存して閉じることはありません。
	"workbench.editor.closeOnFileDelete": false,

	// エディター ファイルの装飾にバッジを使用するかどうかを制御します。
	"workbench.editor.decorations.badges": true,

	// エディター ファイルの装飾に配色を使用するかどうかを制御します。
	"workbench.editor.decorations.colors": true,

	// 開かれるエディターをプレビューとして表示するかどうかを制御します。プレビュー エディターは開かれたままにならず、(ダブルクリックまたは編集などによって) 開かれたままになるように明示的に設定されるまで再利用され、斜体のフォントで表示されます。
	"workbench.editor.enablePreview": true,

	// コード ナビゲーションがエディターから開始された場合に、エディターをプレビューのままにするかどうかを制御します。プレビュー エディターは、(ダブルクリックまたは編集などによって) 開かれたままになるように明示的に設定されていない限り、開かれたままにならず、再利用されます。`workbench.editor.enablePreview` が無効な場合、この値は無視されます。
	"workbench.editor.enablePreviewFromCodeNavigation": false,

	// Quick Open から開かれるエディターをプレビューとして表示するかどうかを制御します。プレビュー エディターは、(ダブルクリックまたは編集などによって) 開かれたままになるように明示的に設定されない限り、開かれたままにならず、再利用されます。`workbench.editor.enablePreview` が無効な場合、この値は無視されます。
	"workbench.editor.enablePreviewFromQuickOpen": false,

	// 最近使用した順序でタブを閉じるか、左から右の順にタブを閉じるかを制御します。
	"workbench.editor.focusRecentEditorAfterClose": true,

	// 変更が保存されていないエディターのタブで上罫線を描画するかどうかを制御します。`workbench.editor.showTabs` が無効な場合、この値は無視されます。
	"workbench.editor.highlightModifiedTabs": false,

	// エディターに表示するラベルの書式を制御します。
	//  - default: ファイルの名前を表示します。タブが有効かつ 1 つのグループ内の 2 つの同名ファイルに各ファイルのパスの区切り記号が追加されます。タブを無効にすると、エディターがアクティブな時にワークスペース フォルダーの相対パスが表示されます。
	//  - short: ディレクトリ名に続けてファイル名を表示します。
	//  - medium: ワークスペース フォルダーからの相対パスに続けてファイル名を表示します。
	//  - long: 絶対パスに続けてファイル名を表示します。
	"workbench.editor.labelFormat": "default",

	// 言語の選択で言語が明示的に設定されている場合を除き、テキスト エディターの言語を自動的に検出するかどうかを制御します。これは、オフにしたくない言語を指定できるように、言語でスコープを設定することもできます。これは、Markdown のような言語 (多くの場合、言語検出で Markdown ではなく埋め込み言語であると認識させる可能性のある他の言語が含まれている) で便利です。
	"workbench.editor.languageDetection": true,

	// 開いているエディターの数を制限するかどうかを制御します。有効にすると、最近使用されていないエディターが閉じられ、新しく開くエディター用にスペースが確保されます。
	"workbench.editor.limit.enabled": false,

	// 開いているエディターの最大数をエディター グループごとに適用するか、すべてのエディター グループに適用するかを制御します。
	"workbench.editor.limit.perEditorGroup": false,

	// 開いているエディターの最大数を制御します。エディター グループごとまたはすべてのグループ間でこの制限を制御するには、`workbench.editor.limit.perEditorGroup` 設定を使用します。
	"workbench.editor.limit.value": 10,

	// マウス ボタン 4 と 5 (指定されている場合) を使用して開いているファイル間を移動します。
	"workbench.editor.mouseBackForwardToNavigate": true,

	// エディターを開く場所を制御します。`left` または `right` を選択すると現在アクティブになっているエディターの左または右にエディターを開きます。`first` または `last` を選択すると現在アクティブになっているエディターとは別個にエディターを開きます。
	"workbench.editor.openPositioning": "right",

	// (たとえば、エクスプローラーから) 並べて開く複数のエディターの既定の向きを制御します。既定では、エディターを現在アクティブなものの右側に開きます。`down` に変更すると、エディターを現在アクティブなものの下側に開きます。
	"workbench.editor.openSideBySideDirection": "right",

	// 固定されたエディターのタブのサイズ設定を制御します。固定されたタブは、開いているすべてのタブの先頭に表示され、通常、固定が解除されるまで閉じられません。`workbench.editor.showTabs` が無効な場合、この値は無視されます。
	//  - normal: 固定されたタブは、固定されていないタブの外観を継承します。
	//  - compact: 固定されたタブは、コンパクト形式でアイコンまたはエディター名の最初の文字のみが表示されます。
	//  - shrink: 固定されたタブは、エディター名の一部を示すコンパクトな固定サイズに縮小されます。
	"workbench.editor.pinnedTabSizing": "normal",

	// エディターを閉じた後に再び開いたときに、最後のエディター ビューの状態 (スクロール位置など) を復元します。エディター ビューの状態は、エディター グループごとに保存され、グループが閉じられると破棄されます。エディター グループに以前のビュー状態が見つからなかった場合に、すべてのエディター グループにわたって最後に確認されたビュー状態を使用するには、`workbench.editor.sharedViewState` 設定を使用します。
	"workbench.editor.restoreViewState": true,

	// エディターを開くときに、どこの表示グループにエディターを表示するかどうかを制御します。無効にした場合、エディターは現在のアクティブなエディター グループに優先して開かれます。有効にした場合は、現在のアクティブなエディター グループで開くのではなく、既に開かれた状態のエディターを表示します。特定のグループ内や現在アクティブなグループの横に強制的にエディターを開いた場合などに、この設定が無視される場合もあることにご注意ください。
	"workbench.editor.revealIfOpen": false,

	// タブの上をスクロールしたときに、それらを開くかどうかを制御します。既定では、スクロール時にはタブは表示されるだけで、開かれることはありません。スクロール中に Shift キーを押したままにすると、その間この動作を変更できます。`workbench.editor.showTabs` が無効な場合、この値は無視されます。
	"workbench.editor.scrollToSwitchTabs": false,

	// すべてのエディター グループで最新のエディター ビューの状態 (スクロール位置など) を保持し、エディター グループに対する特定のエディター ビュー状態が検出された場合は復元します。
	"workbench.editor.sharedViewState": false,

	// 開いているエディターをアイコン付きで表示するかどうかを制御します。これにはファイル アイコン テーマも有効にする必要があります。
	"workbench.editor.showIcons": true,

	// 開いているエディターをタブで表示するかどうかを制御します。
	"workbench.editor.showTabs": true,

	// エディター グループ内でエディターが分割された場合のレイアウトを、垂直方向または水平方向に制御します。
	//  - vertical: エディターは上から下に配置されます。
	//  - horizontal: エディターは左から右に配置されます。
	"workbench.editor.splitInGroupLayout": "horizontal",

	// エディターまたはファイルをエディター領域の端にドロップして、エディター グループをドラッグ アンド ドロップ操作から分割できるかどうかを制御します。
	"workbench.editor.splitOnDragAndDrop": true,

	// エディター グループの分割時のサイズを制御します。
	//  - distribute: すべてのエディター グループを等分に分割します。
	//  - split: アクティブなエディター グループを等分に分割します。
	"workbench.editor.splitSizing": "distribute",

	// エディターのタブの [閉じる] ボタンの位置を制御するか、'off' に設定された場合に無効にします。`workbench.editor.showTabs` が無効な場合、この値は無視されます。
	"workbench.editor.tabCloseButton": "right",

	// エディターのタブのサイズ設定を制御します。`workbench.editor.showTabs` が無効な場合、この値は無視されます。
	//  - fit: 常に完全なエディター ラベルを表示するのに足りるタブの大きさを維持します。
	//  - shrink: すべてのタブを一度に表示するには利用可能なスペースが足りない場合に、タブを縮小するようにします。
	"workbench.editor.tabSizing": "fit",

	// エディター タイトル領域のタブおよび階層リンクに使用するスクロール バーの高さを制御します。
	//  - default: 既定のサイズ。
	//  - large: マウスでつかみやすいサイズに拡大する。
	"workbench.editor.titleScrollbarSizing": "default",

	// 無題のヒントをエディター内のインライン テキストにするか、フローティング ボタンにするか、非表示にするかを制御します。
	"workbench.editor.untitled.hint": "text",

	// 無題のエディターのラベルの形式を制御します。
	//  - content: 無題ファイルの名前は、ファイル パスが関連付けられていない限り、最初の行の内容から導き出されます。行が空であるか、単語文字が含まれていない場合に、名前にフォールバックします。
	//  - name: 無題のファイルの名前は、ファイルの内容から派生していません。
	"workbench.editor.untitled.labelFormat": "content",

	// 使用可能なスペースを超えたときにタブを複数行に折り返すか、スクロール バーを表示するかどうかを制御します。`workbench.editor.showTabs` が無効な場合、この値は無視されます。
	"workbench.editor.wrapTabs": false,

	// glob パターンをエディターに構成します (例: `"*.hex": "hexEditor.hexEdit"`)。これらは既定の動作よりも優先されます。
	"workbench.editorAssociations": {},

	// Microsoft のオンライン サービスから実行する実験を取得します。
	"workbench.enableExperiments": true,

	// 外部 URI (http、https) に使用する opener を構成します。
	"workbench.externalUriOpeners": {},

	// ワークベンチ項目にホバーが表示されるまでの待ち時間 (ミリ秒) を制御します (例: 拡張機能が用意されている一部のツリー ビュー項目)。既に表示されている項目では、この設定の変更を反映するために更新が必要な場合があります。
	"workbench.hover.delay": 500,

	// ワークベンチで使用されるファイル アイコン テーマを指定するか、ファイル アイコンを表示しないように 'null' を指定します。
	//  - null: ファイル アイコンがありません
	//  - vs-minimal
	//  - vs-seti
	//  - material-icon-theme
	"workbench.iconTheme": "vs-seti",

	// リストやツリーでのキーボード ナビゲーションを、単に入力するだけで自動的にトリガーするかどうかを制御します。`false` に設定した場合、キーボード ナビゲーションは `list.toggleKeyboardNavigation` コマンドを実行したときにのみトリガーされます。これに対してキーボード ショートカットを割り当てることができます。
	"workbench.list.automaticKeyboardNavigation": true,

	// `Alt` を押すと、スクロール速度が倍増します。
	"workbench.list.fastScrollSensitivity": 5,

	// リストとツリーがワークベンチで水平スクロールをサポートするかどうかを制御します。警告: この設定をオンにすると、パフォーマンスに影響があります。
	"workbench.list.horizontalScrolling": false,

	// ワークベンチのリストおよびツリーのキーボード ナビゲーション スタイルを制御します。単純、強調表示、フィルターを指定できます。
	//  - simple: 簡単なキーボード ナビゲーションは、キーボード入力に一致する要素に焦点を当てます。一致処理はプレフィックスでのみ実行されます。
	//  - highlight: キーボード ナビゲーションの強調表示を使用すると、キーボード入力に一致する要素が強調表示されます。上および下への移動は、強調表示されている要素のみを移動します。
	//  - filter: キーボード ナビゲーションのフィルターでは、キーボード入力に一致しないすべての要素がフィルター処理され、非表示になります。
	"workbench.list.keyboardNavigation": "highlight",

	// マウス ホイール スクロール イベントの `deltaX` と `deltaY` で使用される乗数。
	"workbench.list.mouseWheelScrollSensitivity": 1,

	// マウスを使用して項目を複数選択するときに使用する修飾キーです (たとえば、エクスプローラーでエディターと scm ビューを開くなど)。'横に並べて開く' マウス ジェスチャー (がサポートされている場合) は、複数選択の修飾キーと競合しないように調整されます。
	//  - ctrlCmd: Windows および Linux 上の `Control` キーと macOS 上の `Command` キーに割り当てます。
	//  - alt: Windows および Linux 上の `Alt` キーと macOS 上の `Option` キーに割り当てます。
	"workbench.list.multiSelectModifier": "ctrlCmd",

	// マウスを使用して、ツリーとリスト内の項目を開く方法を制御します (サポートされている場合)。適用できない場合、一部のツリーやリストではこの設定が無視されることがあります。
	"workbench.list.openMode": "singleClick",

	// リストとツリーでスムーズ スクロールを使用するかどうかを制御します。
	"workbench.list.smoothScrolling": false,

	// パネル (端末、デバッグ コンソール、出力、問題) の既定の場所を制御します。ワークベンチの下、右、左に表示できます。
	"workbench.panel.defaultLocation": "bottom",

	// パネルを開くときに最大化するかどうかを制御します。開くときに必ず最大化するか、決して最大化しないか、最後に閉じたときの状態で開くかを選択できます。
	//  - always: 開くときにパネルを常に最大化します。
	//  - never: 開くときにパネルを決して最大化しません。パネルは最大化されずに開きます。
	//  - preserve: 閉じる前の状態でパネルを開きます。
	"workbench.panel.opensMaximized": "preserve",

	// `window.autoDetectColorScheme` が有効な場合に、ダークな OS の外観に適した色のテーマを指定します。
	"workbench.preferredDarkColorTheme": "Default Dark+",

	// `window.autoDetectHighContrast` が有効な場合に、ハイ コントラスト モードに適した色のテーマを指定します。
	"workbench.preferredHighContrastColorTheme": "Default High Contrast",

	// `window.autoDetectColorScheme` が有効な場合に、ライトな OS の外観に適した色のテーマを指定します。
	"workbench.preferredLightColorTheme": "Default Light+",

	// 使用する製品アイコンのテーマを指定します。
	//  - Default: 既定
	"workbench.productIconTheme": "Default",

	// フォーカスを失ったときに Quick Open を自動的に閉じるかどうかを制御します。
	"workbench.quickOpen.closeOnFocusLost": true,

	// Quick Open を次回開いたとき、Quick Open の最後の入力を復元するかどうかを制御します。
	"workbench.quickOpen.preserveInput": false,

	// ビューまたはエディター間のドラッグ領域のホバー フィードバックの遅延をミリ秒単位で制御します。
	"workbench.sash.hoverDelay": 300,

	// ビューまたはエディター間にあるドラッグ領域のフィードバック領域のサイズをピクセル単位で制御します。マウスを使用してビューのサイズを変更するのが困難な場合は、これを大きな値に設定してください。
	"workbench.sash.size": 4,

	// 既定で使用する設定エディターを指定します。
	//  - ui: UI の設定エディターを使用します。
	//  - json: JSON ファイル エディターを使用します。
	"workbench.settings.editor": "ui",

	// 設定で自然文検索モードを有効にするかどうかを制御します。自然文検索はMicrosoft オンライン サービスによって提供されます。
	"workbench.settings.enableNaturalLanguageSearch": true,

	// キーバインド設定を開いたときに、すべての既定のキーバインド設定を表示するエディターも開くかどうかを制御します。
	"workbench.settings.openDefaultKeybindings": false,

	// 設定を開いたときに、すべての既定の設定を表示するエディターも開くかどうかを制御します。
	"workbench.settings.openDefaultSettings": false,

	// 検索中の設定エディターの目次の動作を制御します。
	//  - hide: 検索中の目次を非表示にします。
	//  - filter: 目次をフィルターして、一致している設定を持つカテゴリだけを表示します。カテゴリをクリックするとそのカテゴリに結果が絞り込まれます。
	"workbench.settings.settingsSearchTocBehavior": "filter",

	// JSON として設定を編集するときに、split JSON エディターを使用するかどうかを制御します。
	"workbench.settings.useSplitJSON": false,

	// サイド バーとアクティビティ バーの位置を制御します。ワークベンチの左側または右側のいずれかに表示できます。
	"workbench.sideBar.location": "left",

	// 起動時にどのエディターを表示するかを制御します。無い場合、前のセッションを復元します。
	//  - none: エディターなしで開始
	//  - welcomePage: ウェルカム ページを開き、VS Codeと拡張機能を使って作業を開始するのに役立つコンテンツを表示します。
	//  - readme: README を含むフォルダーを開くときに README を開き、それ以外の場合は 'welcomePage' にフォールバックします。注意: これはグローバル構成として確認されました。これは、ワークスペースまたはフォルダー構成で設定されている場合は無視されます。
	//  - newUntitledFile: 無題の新規ファイルを開きます (空のウィンドウが開かれているときのみ)。
	//  - welcomePageInEmptyWorkbench: 空のワークベンチを開くとき、ウェルカム ページを開きます。
	"workbench.startupEditor": "welcomePage",

	// ワークベンチの下部にステータス バーを表示するかどうかを制御します。
	"workbench.statusBar.visible": true,

	// 有効にすると、エディターを 1 つも開いていないときに透かしのヒントが表示されます。
	"workbench.tips.enabled": true,

	// フォルダー名をクリックしたときにツリー フォルダーが展開される方法を制御します。適用できない場合、一部のツリーやリストではこの設定が無視されることがあります。
	"workbench.tree.expandMode": "singleClick",

	// ツリーのインデントをピクセル単位で制御します。
	"workbench.tree.indent": 8,

	// ツリーでインデントのガイドを表示するかどうかを制御します。
	"workbench.tree.renderIndentGuides": "onHover",

	// 有効にすると、信頼されたワークスペースでリンクを開いたときに信頼されたドメインのプロンプトが表示されます。
	"workbench.trustedDomains.promptInTrustedWorkspace": false,

	// ビュー ヘッダー アクションを表示するかどうかを制御します。ビュー ヘッダー アクションは常に表示されるか、パネルをフォーカスやホバーしたときのみ表示のいずれかです。
	"workbench.view.alwaysShowHeaderActions": false,

	// 有効にした場合、ウェルカム ページでの動作を減らします。
	"workbench.welcomePage.preferReducedMotion": false,

	// 有効にすると、拡張機能をインストールしたときに、その拡張機能のチュートリアルが開きます。
	"workbench.welcomePage.walkthroughs.openOnInstall": true,

	// 設定すると、OS の外観に基づいて好みのカラー テーマに自動的に切り替わります。OS の外観がダーク テーマの場合、`workbench.preferredDarkColorTheme#` で指定されたテーマが使われ、ライト テーマの場合には `#workbench.preferredLightColorTheme`で指定されたテーマが使われます。
	"window.autoDetectColorScheme": false,

	// 有効にすると、OS でハイ コントラスト テーマが使用されている場合にはハイ コントラスト テーマに自動的に変更されます。使用するハイ コントラスト テーマは `workbench.preferredHighContrastColorTheme` で指定されます。
	"window.autoDetectHighContrast": true,

	// 最後のエディターを閉じたときに、ウィンドウも閉じるかどうかを制御します。この設定はフォルダーを表示していないウィンドウにのみ適用されます。
	"window.closeWhenEmpty": false,

	// Alt キーを押してメニュー バーにフォーカスするかどうかを制御します。この設定は、Alt キーを使用してメニュー バーを切り替える操作には影響しません。
	"window.customMenuBarAltFocus": true,

	// ダイアログ ウィンドウの外観を調整します。
	"window.dialogStyle": "native",

	// 有効になっている場合、タイトル バーでアプリケーション アイコンをクリックするとウィンドウが閉じ、ウィンドウをアイコンでドラッグすることができません。この設定が有効になるのは、`window.titleBarStyle` が `custom` に設定されている場合のみです。
	"window.doubleClickIconToClose": false,

	// Alt キー ショートカットを使用してメイン メニューを開くことができるかどうかを制御します。ニーモニックを無効にすると、これらの Alt キー ショートカットを代わりにエディター コマンドにバインドできます。
	"window.enableMenuBarMnemonics": true,

	// メニュー バーの表示と非表示を制御します。'切り替え' 設定は Alt キーを 1 回押すとメニュー バーの表示と非表示が切り替わることを意味します。'コンパクト' 設定では、メニューがサイド バーに移動します。
	//  - classic: メニューはウィンドウの上部に表示され、全画面表示モードでのみ非表示になります。
	//  - visible: メニューは、全画面表示モードの場合でも、常にウィンドウの上部に表示されます。
	//  - toggle: メニューは非表示になっていますが、Alt キーを使用してウィンドウの上部に表示できます。
	//  - hidden: メニューは常に非表示です。
	//  - compact: メニューはサイドバーにコンパクト ボタンとして表示されます。`window.titleBarStyle` が `native`の場合、この値は無視されます。
	"window.menuBarVisibility": "classic",

	// 既に 1 つ以上のウィンドウを開いているとき、新しく開くウィンドウのサイズを制御します。この設定は、最初に開いたウィンドウに適用されないことに注意してください。最初のウィンドウは常に、前回閉じたサイズと位置で復元します。
	//  - default: 新しいウィンドウを画面の中央に開きます。
	//  - inherit: 新しいウィンドウを、最後にアクティブだったウィンドウと同じサイズで開きます。
	//  - offset: 最後のアクティブなウィンドウと同じ寸法の新しいウィンドウをオフセット位置で開きます。
	//  - maximized: 新しいウィンドウを最大化した状態で開きます。
	//  - fullscreen: 新しいウィンドウを全画面表示モードで開きます。
	"window.newWindowDimensions": "default",

	// ファイルを新しいウィンドウで開くかどうかを制御します。
	// この設定は無視される場合もあります (例: `-new-window` または `--reuse-window` コマンド ライン オプションを使用する場合など)。
	//  - on: 新しいウィンドウでファイルを開きます。
	//  - off: ファイルのフォルダーを開いているウィンドウまたは最後のアクティブ ウィンドウでファイルを開きます。
	//  - default: アプリケーション内から選択したとき (例: ファイル メニュー介したとき) を除き、新しいウィンドウでファイルを開きます。
	"window.openFilesInNewWindow": "off",

	// フォルダーを新しいウィンドウで開くか、最後のアクティブ ウィンドウで開くかどうかを制御します。
	// この設定は無視される場合もあります (例: `--new-window` または `--reuse-window` コマンド ライン オプションを使用する場合など)。
	//  - on: フォルダーを新しいウィンドウで開きます。
	//  - off: フォルダーを最後のアクティブ ウィンドウで開きます。
	//  - default: フォルダーがアプリケーション内から (たとえば、[ファイル] メニューから) 選択された場合を除いて、新しいウィンドウでフォルダーを開きます。
	"window.openFoldersInNewWindow": "default",

	// 引数なしで 2 つ目のインスタンスを起動するとき、新しい空のウィンドウを開くか、最後に実行されていたウィンドウにフォーカスするかどうかを制御します。
	// この設定は無視される場合もあります (例: `--new-window` または `--reuse-window` コマンド ライン オプションを使用する場合など)。
	//  - on: 新しい空のウィンドウを開きます。
	//  - off: 最後にアクティブだった実行中のインスタンスにフォーカスします。
	"window.openWithoutArgumentsInNewWindow": "on",

	// 全画面表示モードで終了した場合に、ウィンドウを全画面表示モードに復元するかどうかを制御します。
	"window.restoreFullscreen": false,

	// 初めての起動後にウィンドウを再度開く方法を制御します。この設定は、アプリケーションが既に実行中の場合は効果がありません。
	//  - preserve: 常にすべてのウィンドウが再度開かれます。フォルダーまたはワークスペースが開かれている場合は (例: コマンド ラインから)、新しいウィンドウとして開かれます (ただし、前に開かれている場合は例外)。ファイルが開かれている場合、それらは復元されたウィンドウのうちの 1 つで開かれます。
	//  - all: フォルダー、ワークスペース、ファイルが (コマンド ラインなどから) 開かれている場合を除き、すべてのウィンドウを再度開きます。
	//  - folders: フォルダー、ワークスペース、ファイルが (コマンド ラインなどから) 開かれている場合を除き、フォルダーまたはワークスペースが開かれていたすべてのウィンドウを再度開きます。
	//  - one: フォルダー、ワークスペース、ファイルが (コマンド ラインなどから) 開かれている場合を除き、最後のアクティブ ウィンドウを再度開きます。
	//  - none: ウィンドウを再度開きません。フォルダーまたはワークスペースが (コマンド ラインなどから) 開かれている場合を除き、空のウィンドウが表示されます。
	"window.restoreWindows": "all",

	// アクティブなエディターに基づいてウィンドウのタイトルを制御します。変数はコンテキストに基づいて置き換えられます:
	// - '${activeEditorShort}': ファイル名 (例: myFile.txt)。
	// - `${activeEditorMedium}`: ワークスペース フォルダーに対して相対的なファイルのパス (例: myFolder/myFileFolder/myFile.txt)。
	// - `${activeEditorLong}`: ファイルの完全なパス (例: /Users/Development/myFolder/myFileFolder/myFile.txt)。
	// - `${activeFolderShort}`: ファイルが含まれているフォルダーの名前 (例: myFileFolder)。
	// - `${activeFolderMedium}`: ファイルを含むフォルダーの、ワークスペースフォルダーからの相対パス(例: myFolder/myFileFolder)。
	// - '${activeFolderLong}': ファイルが格納されているフォルダーのフルパス (例: /Users/Development/myFolder/myFileFolder)。
	// - ${folderName}`: ファイルが含まれているワークスペース フォルダーの名前 (例: myFolder)。
	// - `${folderPath}`: ファイルが含まれているワークスペースの絶対パスです (例: /Users/Development/myFolder)。
	// - `${rootName}`: 開かれたワークスペースまたはフォルダーの名前 (例: myFolder または myWorkspace)。
	// - `${rootPath}`: 開かれたワークスペースまたはフォルダーのファイル パス (例: /Users/Development/myWorkspace)。
	// - `${appName}`: 例: VS Code。
	// - `${remoteName}`: 例: SSH
	// - `${dirty}`: アクティブなエディターの変更が保存されていない場合を示すインジケーター。
	// - `${separator}`: 値か固定のテキストで囲われたとき、条件付きの区切り記号 (" - ") を表示します。
	"window.title": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${appName}",

	// ウィンドウのタイトル バーの外観を調整します。Linux と Windows では、この設定はアプリケーションとコンテキスト メニューの外観にも影響します。変更を適用するには完全な再起動が必要です。
	"window.titleBarStyle": "custom",

	// 'window.title' で使用される区切り記号です。
	"window.titleSeparator": " - ",

	// ウィンドウのズーム レベルを調整します。元のサイズは 0 で、1 つ上げるごとに (1 など) 20% ずつ拡大することを表し、1 つ下げるごとに (-1 など) 20% ずつ縮小することを表します。小数点以下の桁数を入力して、さらに細かくズーム レベルを調整することもできます。
	"window.zoomLevel": 0,

	// Zen Mode をオンにしたときに、レイアウトを中央寄せにするかどうかを制御します。
	"zenMode.centerLayout": true,

	// Zen Mode をオンにしたときに、ワークベンチを自動的に全画面モードに切り替えるかどうかを制御します。
	"zenMode.fullScreen": true,

	// Zen Mode をオンにしたときに、ワークベンチの左側または右側のいずれかにあるアクティビティ バーを非表示にするかどうかを制御します。
	"zenMode.hideActivityBar": true,

	// Zen Mode をオンにしたときにエディターの行番号も非表示にするかどうかを制御します。
	"zenMode.hideLineNumbers": true,

	// Zen Mode をオンにするとワークベンチの下部にあるステータス バーを非表示にするかどうかを制御します。
	"zenMode.hideStatusBar": true,

	// Zen Mode をオンにしたときにワークベンチ タブも非表示にするかどうかを制御します。
	"zenMode.hideTabs": true,

	// Zen Mode で終了したウィンドウを Zen Mode に復元するかどうかを制御します。
	"zenMode.restore": true,

	// Zen Mode 中に通知を表示するかどうかを制御します。true の場合、エラー通知のみが表示されます。
	"zenMode.silentNotifications": true,

	// スクリーンキャスト モードのキーボードのフォント サイズ (ピクセル) を制御します。
	"screencastMode.fontSize": 56,

	// キーボード オーバーレイをスクリーンキャスト モードで表示する時間 (ミリ秒単位) を制御します。
	"screencastMode.keyboardOverlayTimeout": 800,

	// スクリーンキャスト モードでマウス インジケーターの色を 16 進数 (#RGB、#RGBA、#RRGGBB、#RRGGBBAA) で制御します。
	"screencastMode.mouseIndicatorColor": "#FF0000",

	// スクリーンキャスト モードのマウス インジケーターのサイズ (ピクセル単位) を制御します。
	"screencastMode.mouseIndicatorSize": 20,

	// スクリーンキャスト モードでのみキーボード ショートカットを表示します。
	"screencastMode.onlyKeyboardShortcuts": false,

	// スクリーンキャスト モードの縦方向のオフセットをワークベンチの高さのパーセンテージとして下部からオーバーレイするかどうかを制御します。
	"screencastMode.verticalOffset": 20,

	// 言語に対するファイルの関連付け (例: `"*.extension": "html") を構成します。これらの関連付けは、インストールされている言語の既定の関連付けより優先されます。
	"files.associations": {},

	// 有効な場合、ファイルを開くときに文字セット エンコードをエディターが推測します。言語ごとに構成することも可能です。この設定は、テキスト検索では尊重されないことに注意してください。`files.encoding` のみ尊重されます。
	"files.autoGuessEncoding": false,

	// 変更が保存されていないエディターの自動保存を制御します。自動保存の詳細については、[こちら](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save)をお読みください。
	//  - off: 変更のあったエディターは自動的に保存されません。
	//  - afterDelay: 変更のあったエディターは、構成された '#files.autoSaveDelay#' の後に自動的に保存されます。
	//  - onFocusChange: エディターがフォーカスを失うと、変更のあったエディターが自動的に保存されます。
	//  - onWindowChange: エディターがフォーカスを失うと、変更のあったエディターが自動的に保存されます。
	"files.autoSave": "off",

	// 変更が保存されていないエディターが自動で保存されるまでの遅延をミリ秒単位で制御します。`files.autoSave` が `afterDelay` に設定されている場合のみ適用されます。
	"files.autoSaveDelay": 1000,

	// 新しいファイルに割り当てられている既定の言語モード。`${activeEditorLanguage}` に構成されている場合は、現在アクティブなテキスト エディターの言語モードを使用します (存在する場合)。
	"files.defaultLanguage": "",

	// ファイル/フォルダーを削除時するときに、 OS のごみ箱に移動します。無効にするとファイル/フォルダーは完全に削除されます。
	"files.enableTrash": true,

	// ファイルの読み取り/書き込みで使用する既定の文字セット エンコーディング。言語ごとに構成することも可能です。
	//  - utf8: UTF-8
	//  - utf8bom: UTF-8 with BOM
	//  - utf16le: UTF-16 LE
	//  - utf16be: UTF-16 BE
	//  - windows1252: Western (Windows 1252)
	//  - iso88591: Western (ISO 8859-1)
	//  - iso88593: Western (ISO 8859-3)
	//  - iso885915: Western (ISO 8859-15)
	//  - macroman: Western (Mac Roman)
	//  - cp437: DOS (CP 437)
	//  - windows1256: Arabic (Windows 1256)
	//  - iso88596: Arabic (ISO 8859-6)
	//  - windows1257: Baltic (Windows 1257)
	//  - iso88594: Baltic (ISO 8859-4)
	//  - iso885914: Celtic (ISO 8859-14)
	//  - windows1250: Central European (Windows 1250)
	//  - iso88592: Central European (ISO 8859-2)
	//  - cp852: Central European (CP 852)
	//  - windows1251: Cyrillic (Windows 1251)
	//  - cp866: Cyrillic (CP 866)
	//  - iso88595: Cyrillic (ISO 8859-5)
	//  - koi8r: Cyrillic (KOI8-R)
	//  - koi8u: Cyrillic (KOI8-U)
	//  - iso885913: Estonian (ISO 8859-13)
	//  - windows1253: Greek (Windows 1253)
	//  - iso88597: Greek (ISO 8859-7)
	//  - windows1255: Hebrew (Windows 1255)
	//  - iso88598: Hebrew (ISO 8859-8)
	//  - iso885910: Nordic (ISO 8859-10)
	//  - iso885916: Romanian (ISO 8859-16)
	//  - windows1254: Turkish (Windows 1254)
	//  - iso88599: Turkish (ISO 8859-9)
	//  - windows1258: Vietnamese (Windows 1258)
	//  - gbk: Simplified Chinese (GBK)
	//  - gb18030: Simplified Chinese (GB18030)
	//  - cp950: Traditional Chinese (Big5)
	//  - big5hkscs: Traditional Chinese (Big5-HKSCS)
	//  - shiftjis: Japanese (Shift JIS)
	//  - eucjp: Japanese (EUC-JP)
	//  - euckr: Korean (EUC-KR)
	//  - windows874: Thai (Windows 874)
	//  - iso885911: Latin/Thai (ISO 8859-11)
	//  - koi8ru: Cyrillic (KOI8-RU)
	//  - koi8t: Tajik (KOI8-T)
	//  - gb2312: Simplified Chinese (GB 2312)
	//  - cp865: Nordic DOS (CP 865)
	//  - cp850: Western European DOS (CP 850)
	"files.encoding": "utf8",

	// 既定の改行文字。
	//  - \n: LF
	//  - \r\n: CRLF
	//  - auto: OS 固有の改行文字を使用します。
	"files.eol": "auto",

	// ファイルとフォルダーを除外するために glob パターンを構成します。たとえば、ファイル エクスプローラーでは、この設定に基づいて、表示されるか非表示になるファイルとフォルダーが決まります。検索固有の除外を定義するには、'#search.exclude#' 設定を参照してください。glob パターンの詳細については、[こちら](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) をご覧ください。
	"files.exclude": {
		"**/.git": true,
		"**/.svn": true,
		"**/.hg": true,
		"**/CVS": true,
		"**/.DS_Store": true,
		"**/Thumbs.db": true
	},

	// 実験: ファイル サービスをサンドボックス化するように変更します。指示がない限り、これを変更しないでください。
	"files.experimentalSandboxedFileService": false,

	// エディターを終了するときに保存を確認するダイアログを省略し、保存されていないファイルをセッション後も保持するかどうかを制御します。
	//  - off: Hot Exit を無効にします。変更が保存されていないエディターを含むウィンドウを閉じようとすると、プロンプトが表示されます。
	//  - onExit: Windows または Linux で最後のウィンドウが閉じられるとき、または `workbench.action.quit` コマンドがトリガーされるとき (コマンド パレット、キー バインド、メニュー)、Hot Exit がトリガーされます。フォルダーが開かれていないウィンドウはすべて、次回の起動時に復元されます。未保存のファイルが含まれる、以前に開かれたウィンドウのリストは、[ファイル] > [最近使用したファイル] > [詳細...] と移動すると表示できます。
	//  - onExitAndWindowClose: Windows または Linux で最後のウィンドウが閉じられるとき、または `workbench.action.quit` コマンドがトリガーされるとき (コマンド パレット、キー バインド、メニュー)、またフォルダーが開かれているウィンドウについても、それが最後のウィンドウかどうかに関係なく、Hot Exit がトリガーされます。フォルダーが開かれていないウィンドウはすべて、次回の起動時に復元されます。未保存のファイルが含まれる、以前に開かれたウィンドウのリストは、[ファイル] > [最近使用したファイル] > [詳細...] と移動すると表示できます。
	"files.hotExit": "onExit",

	// 有効にすると、ファイルの保存時に最新の行を末尾に挿入します。
	"files.insertFinalNewline": false,

	// ファイル ウォッチに使用するメカニズムを制御します。ファイル ウォッチに関連する問題が発生した場合にのみ、これを変更します。
	//  - on: 新しいファイル ウォッチャーで問題が発生した場合に備えて、従来のファイル ウォッチャーを有効にします。
	//  - off: 従来のファイル ウォッチャーを無効にし、新しいファイル ウォッチャーを有効にすることで、その機能を活用できるようにします。
	//  - default: 新しいファイル ウォッチャーは、インサイダー バージョンを使用している場合や、マルチルート ワークスペースを開いている場合に有効になります。
	"files.legacyWatcher": "default",

	// 大きなファイルを開こうとしたとき、VS Code の再起動後に使用できるメモリを制御します。コマンド ラインで `--max-memory=NEWSIZE` を指定するのと同じ効果があります。
	"files.maxMemoryForLargeFilesMB": 4096,

	// 作成、名前変更、削除のファイル参加者が取り消されるまでのタイムアウト (ミリ秒)。参加者を無効にするには、'0' を使用します。
	"files.participants.timeout": 60000,

	// ファイルを再度開いたときに、元に戻す機能のスタックを復元します。
	"files.restoreUndoStack": true,

	// 保存の競合は、ファイルを保存している間に別のプログラムによって変更されたときに発生する可能性があります。データ損失を防ぐために、ユーザーは、エディターの変更とディスク上のバージョンを比較するように求められます。この設定は、保存の競合エラーが頻繁に発生する場合にのみ変更し、データが失われる可能性があるため注意してください。
	//  - askUser: 保存を拒否し、保存の競合を手動で解決するように要求します。
	//  - overwriteFileOnDisk: エディターでの変更を使用してディスク上のファイルを上書きすることで、保存の競合を解決します。
	"files.saveConflictResolution": "askUser",

	// 単純なファイル ダイアログを有効にします。有効な場合、単純なファイル ダイアログはシステム ファイル ダイアログを置き換えます。
	"files.simpleDialog.enable": false,

	// 有効にすると、ファイルの保存時に最終行以降の新しい行をトリミングします。
	"files.trimFinalNewlines": false,

	// 有効にすると、ファイルの保存時に末尾の空白をトリミングします。
	"files.trimTrailingWhitespace": false,

	// ファイル監視から除外するパスまたは glob パターンを構成します。相対パス (例: 'build/output') は、現在開いているワークスペースを使用して絶対パスに解決されます。glob パターンは、プロパティと一致させる (例: `**/build/output/**` や `/Users/name/workspaces/project/build/output/**`) ために絶対パスと一致しなければなりません (例: パス内のプレフィックスに '**/' を付けるか、完全なパスとサフィックスに '/**' を付ける)。ファイル監視プロセスが CPU を大量に消費する場合は、関心の低い大きなフォルダー (ビルド出力フォルダーなど) を除外してください。
	"files.watcherExclude": {
		"**/.git/objects/**": true,
		"**/.git/subtree-cache/**": true,
		"**/node_modules/*/**": true,
		"**/.hg/store/**": true
	},

	// 追加のパスを構成して、ワークスペース内の変更を監視します。既定では、シンボリック リンクのフォルダーを除き、すべてのワークスペースのフォルダーを再帰的に監視します。絶対パスまたは相対パスを明示的に追加して、シンボリック リンクのフォルダーの監視をサポートすることができます。相対パスは、現在開いているワークスペースを使用して絶対パスに解決されます。
	"files.watcherInclude": [],

	// エクスプローラーでファイルを開くとき、自動的にファイルの内容を表示して選択するかどうかを制御します。
	//  - true: ファイルは、表示や選択が行われるようになります。
	//  - false: ファイルは、表示や選択が行われません。
	//  - focusNoScroll: ファイルは、スクロールしてビューに表示されることはありませんが、引き続きフォーカスされます。
	"explorer.autoReveal": true,

	// エクスプローラーでフォルダーをコンパクト形式でレンダリングするかどうかを制御します。このような形式では、単一の子フォルダーは結合されたツリー要素に圧縮されます。たとえば、Java パッケージ構造に役立ちます。
	"explorer.compactFolders": true,

	// ごみ箱を経由したファイル削除時にエクスプローラーが確認を求めるかどうかを制御します。
	"explorer.confirmDelete": true,

	// ドラッグ アンド ドロップを使用したファイルやフォルダーの移動時にエクスプローラーが確認を求めるかどうかを制御します。
	"explorer.confirmDragAndDrop": true,

	// 相対ファイル パスをコピーする場合に使用するパス区切り文字です。
	//  - /: スラッシュをパス区切り文字として使用します。
	//  - \: 円記号をパス区切り文字として使用します。
	//  - auto: オペレーティング システムの特定のパス区切り文字を使用します。
	"explorer.copyRelativePathSeparator": "auto",

	// ファイルの装飾にバッジを使用するかどうかを制御します。
	"explorer.decorations.badges": true,

	// ファイルの装飾に配色を使用するかどうかを制御します。
	"explorer.decorations.colors": true,

	// ドラッグ アンド ドロップによるファイルとフォルダーの移動をエクスプローラーで許可するかどうかを制御します。この設定は、エクスプローラー内からのドラッグ アンド ドロップのみに影響します。
	"explorer.enableDragAndDrop": true,

	// 初期化中に 1 つのフォルダーのみを含むマルチルート ワークスペースをエクスプローラーで展開するかどうかを制御します
	"explorer.expandSingleFolderWorkspaces": true,

	// 貼り付けで重複するエクスプローラー項目に新しい名前を付けるときに使用する名前付け規則を制御します。
	//  - simple: 後ろに数字が付いている可能性のある、重複している名前の末尾に「copy」という語を追加します
	//  - smart: 重複した名前の末端に数字を追加します。名前の一部に既に数字が含まれている場合、その数字を増やしてみます。
	"explorer.incrementalNaming": "simple",

	// [開いているエディター] ペイン内のエディターの並べ替え順序を制御します。
	//  - editorOrder: エディターは、エディターのタブが表示されているのと同じ順序で並べ替えられています。
	//  - alphabetical: エディターは、各エディター グループ内でアルファベット順に並べ替えられています。
	"explorer.openEditors.sortOrder": "editorOrder",

	// [開いているエディター] ペインに表示されるエディターの数。これを 0 に設定すると、[開いているエディター] ペインが非表示になります。
	"explorer.openEditors.visible": 9,

	// エクスプローラーでのファイルとフォルダーのプロパティに基づく並べ替えを制御します。
	//  - default: ファイルとフォルダーを名前で並び替えます。フォルダーはファイルの前に表示されます。
	//  - mixed: ファイルとフォルダーをアルファベット順に名前で並び替えます。ファイルはフォルダーと混交して表示されます。
	//  - filesFirst: ファイルとフォルダーを名前で並び替えます。ファイルはフォルダーの前に表示されます。
	//  - type: ファイルとフォルダーを拡張子の種類でグループ化して名前で並び替えます。フォルダーはファイルの前に表示されます。
	//  - modified: ファイルとフォルダーを降順に最終更新日で並び替えます。フォルダーはファイルの前に表示されます。
	"explorer.sortOrder": "default",

	// エクスプローラーでのファイル名とフォルダー名の辞書順並べ替えを制御します。
	//  - default: 大文字の名前と小文字の名前が混在しています。
	//  - upper: 大文字の名前は、小文字の名前の前にまとめてグループ化されます。
	//  - lower: 小文字の名前は、大文字の名前の前にまとめてグループ化されます。
	//  - unicode: 名前は、Unicode 順に並べ替えられます。
	"explorer.sortOrderLexicographicOptions": "default",

	// 検索ビューの行内のアクションバーの位置を制御します。
	//  - auto: 検索ビューが狭い場合はアクションバーを右に、検索ビューが広い場合はコンテンツの直後にアクションバーを配置します。
	//  - right: アクションバーを常に右側に表示します。
	"search.actionsPosition": "right",

	// 検索結果を折りたたむか展開するかどうかを制御します。
	//  - auto: 結果が 10 件未満のファイルが展開されます。他のファイルは折りたたまれます。
	//  - alwaysCollapse
	//  - alwaysExpand
	"search.collapseResults": "alwaysExpand",

	// フルテキスト検索および Quick Open でファイルやフォルダーを除外するための glob パターンを構成します。'#files.exclude#' 設定からすべての glob パターンを継承します。glob パターンの詳細については、[こちら](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) を参照してください。
	"search.exclude": {
		"**/node_modules": true,
		"**/bower_components": true,
		"**/*.code-search": true
	},

	// 検索中にシンボリック リンクをたどるかどうかを制御します。
	"search.followSymlinks": true,

	// 有効にした場合、ローカル ウィンドウでの検索は拡張機能ホストではなく、常に個別の検索プロセスで実行されます。
	"search.forceSearchProcess": false,

	// この設定は非推奨です。代わりに、検索アイコンを新しい場所にドラッグできます。
	// 検索をサイドバーのビューとして表示するか、より水平方向の空間をとるためにパネル領域のパネルとして表示するかを制御します。
	"search.location": "sidebar",

	// 有効にすると、searchService プロセスは 1 時間操作がない場合でもシャットダウンされず、アクティブな状態に保たれます。これにより、ファイル検索キャッシュがメモリに保持されます。
	"search.maintainFileSearchCache": false,

	// 検索結果の最大数を制御します。これを ' null ' (空) に設定して、無制限の結果を返すことができます。
	"search.maxResults": 20000,

	// [検索: フォルダーを指定して検索] と [フォルダー内を検索] の新しい操作が実行される場所を制御します。サイド バーの検索ビューまたは検索エディターのいずれかになります
	//  - view: パネルまたはサイドバーのいずれかで検索ビュー内を検索します。
	//  - reuseEditor: 存在する場合は既存の検索エディターで、それ以外の場合は新しい検索エディターで検索します。
	//  - newEditor: 新しい検索エディターで検索します。
	"search.mode": "view",

	// フィルター処理時に、 Quick Open におけるエディター履歴の並べ替え順序を制御します。
	//  - default: 履歴エントリは、使用されるフィルター値に基づいて関連性によって並び替えられます。関連性の高いエントリが最初に表示されます。
	//  - recency: 履歴エントリは、新しい順に並べ替えられます。最近開いたエントリが最初に表示されます。
	"search.quickOpen.history.filterSortOrder": "default",

	// 最近開いたファイルの結果を、Quick Open の結果ファイルに含めるかどうか。
	"search.quickOpen.includeHistory": true,

	// グローバル シンボル検索の結果を、Quick Open の結果ファイルに含めるかどうか。
	"search.quickOpen.includeSymbols": false,

	// 新しい検索エディターを作成するときに使用する、前後のコンテキスト行の既定数です。'#search.searchEditor.reusePriorSearchConfiguration#' を使用している場合、検索エディターの以前の構成を使用するには、これを 'null ' (空) に設定することができます。
	"search.searchEditor.defaultNumberOfContextLines": 1,

	// 検索エディターで結果をダブル クリックした場合の効果を構成します。
	//  - selectWord: ダブルクリックすると、カーソルの下にある単語が選択されます。
	//  - goToLocation: ダブルクリックすると、アクティブなエディター グループに結果が開きます。
	//  - openLocationToSide: ダブルクリックすると、結果はエディター グループの横に開かれ、まだ存在しない場合は作成されます。
	"search.searchEditor.doubleClickBehaviour": "goToLocation",

	// 有効にすると、新しい検索エディターで、以前に開かれていた検索エディターの包含、除外、フラグが再利用されます。
	"search.searchEditor.reusePriorSearchConfiguration": false,

	// 入力中の文字列を全てのファイルから検索する。
	"search.searchOnType": true,

	// '#search.searchOnType#' を有効にすると、文字が入力されてから検索が開始されるまでのタイムアウト (ミリ秒) が制御されます。'search.searchOnType' が無効になっている場合には影響しません。
	"search.searchOnTypeDebouncePeriod": 300,

	// 検索ビューにフォーカスを置いたときに、検索クエリが、エディターで選択されているテキストに更新されます。これは、クリックされたときか、`workbench.views.search.focus` コマンドがトリガーされたときに発生します。
	"search.seedOnFocus": false,

	// アクティブなエディターで何も選択されていないときに、カーソルに最も近い語からのシード検索を有効にします。
	"search.seedWithNearestWord": false,

	// 検索結果に行番号を表示するかどうかを制御します。
	"search.showLineNumbers": false,

	// すべて小文字のパターンの場合、大文字と小文字を区別しないで検索し、そうでない場合は大文字と小文字を区別して検索します。
	"search.smartCase": false,

	// 検索結果の並べ替え順序を制御します。
	//  - default: 結果はフォルダー名とファイル名でアルファベット順に並べ替えられます。
	//  - fileNames: 結果はフォルダーの順序を無視したファイル名でアルファベット順に並べ替えられます。
	//  - type: 結果は、ファイル拡張子でアルファベット順に並べ替えられます。
	//  - modified: 結果は、ファイルの最終更新日で降順に並べ替えられます。
	//  - countDescending: 結果は、ファイルあたりの数で降順に並べ替えられます。
	//  - countAscending: 結果は、ファイルごとのカウントで昇順に並べ替えられます。
	"search.sortOrder": "default",

	// ファイルを検索するときに、グローバルの `.gitignore` と `.ignore` ファイルを使用するかどうかを制御します。`search.useIgnoreFiles` を有効にする必要があります。
	"search.useGlobalIgnoreFiles": false,

	// ファイルを検索するときに、`.gitignore` ファイルと `.ignore` ファイルを使用するかどうかを制御します。
	"search.useIgnoreFiles": true,

	// 廃止されました。PCRE2 でのみサポートされている正規表現機能を使用すると、PCRE2 が自動的に使用されます。
	// テキスト検索に PCRE2 正規表現エンジンを使用するかどうか。これにより、先読みや後方参照といった高度な正規表現機能を使用できるようになります。ただし、すべての PCRE2 機能がサポートされているわけではありません。JavaScript によってサポートされる機能のみが使用できます。
	"search.usePCRE2": false,

	// 一致項目を選択するか置換するときに、置換のプレビューを開くかどうかを制御します。
	"search.useReplacePreview": true,

	// 推奨されません。高度な正規表現機能サポートのために "search.usePCRE2" の利用を検討してください。
	// この設定は推奨されず、現在 "search.usePCRE2" にフォール バックします。
	"search.useRipgrep": true,

	// 使用するプロキシ設定。設定されていない場合は、'http_proxy' および 'https_proxy' の環境変数から継承されます。
	"http.proxy": "",

	// すべてのネットワーク要求に対して 'Proxy-Authorization' ヘッダーとして送信する値。
	"http.proxyAuthorization": null,

	// 提供された CA の一覧と照らしてプロキシ サーバーの証明書を確認するかどうか制御します。
	"http.proxyStrictSSL": true,

	// 拡張機能プロキシ サポートを使用します。
	//  - off: 拡張機能のプロキシ サポートを無効にします。
	//  - on: 拡張機能のプロキシ サポートを有効にします。
	//  - fallback: プロキシが見つからないときに、拡張機能のプロキシ サポートを有効にし、要求オプションにフォールバックします。
	//  - override: 拡張機能のプロキシ サポートを有効にします。リクエスト オプションを上書きします。
	"http.proxySupport": "override",

	// CA 証明書を OS から読み込む必要があるかどうかを制御します (Windows および macOS では、オフにした場合にウィンドウの再読み込みが必要です)。
	"http.systemCertificates": true,

	// この設定は非推奨になりました。代わりに 'update.mode' を使用してください。
	// 自動更新を受け取るかどうかを構成します。変更後に再起動が必要です。更新プログラムは Microsoft のオンライン サービスから取得されます。
	"update.channel": "default",

	// Windows で新しい VS Code バージョンをバックグラウンドでダウンロードしてインストールできるようにします。
	"update.enableWindowsBackgroundUpdates": true,

	// 自動更新を受け取るかどうかを構成します。変更後に再起動が必要です。更新プログラムは Microsoft のオンライン サービスから取得されます。
	//  - none: 更新を無効にします。
	//  - manual: バックグラウンドでの自動更新の確認を無効にします。更新を手動で確認すると、更新を利用できます。
	//  - start: 起動時にのみ更新プログラムを確認します。バックグラウンドの自動更新チェックを無効にします。
	//  - default: 自動更新の確認を有効にします。Code は自動的かつ定期的に更新を確認します。
	"update.mode": "default",

	// 更新後にリリース ノートを表示します。リリース ノートは Micorosft のオンライン サービスから取得されます。
	"update.showReleaseNotes": true,

	// HTML タグの自動クローズを有効/無効にします。
	"html.autoClosingTags": true,

	// 完了が承認された場合の属性の既定値を制御します。
	//  - doublequotes: 属性値が "" に設定されています。
	//  - singlequotes: 属性値が '' に設定されています。
	//  - empty: 属性値が設定されていません。
	"html.completion.attributeDefaultValue": "doublequotes",

	// [カスタム データ形式](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md) に従って JSON ファイルを指す相対ファイル パスの一覧。
	// 
	// VS Code では、起動時にカスタム データを読み込んで、ユーザーが JSON ファイルに指定するカスタム HTML タグ、属性、属性値の HTML サポートを強化します。
	// 
	// ファイル パスはワークスペースを基準とした相対パスであり、ワークスペース フォルダーの設定のみが考慮されます。
	"html.customData": [],

	// コンテンツを再フォーマットしてはならないタグの、コンマ区切りの一覧。`null` は、既定値の `pre` タグを表します。
	"html.format.contentUnformatted": "pre,code,textarea",

	// 既定の HTML フォーマッタを有効/無効にします。
	"html.format.enable": true,

	// 末尾に改行を入れます。
	"html.format.endWithNewline": false,

	// 直前に改行を 1 つ入れるタグの、コンマで区切られたリストです。`null` は、既定値の `head, body, /html` を表します。
	"html.format.extraLiners": "head, body, /html",

	// {{#foo}}` から `{{/foo}}` をフォーマットしてインデントします。
	"html.format.indentHandlebars": false,

	// '<head>' および '<body>' セクションをインデントします。
	"html.format.indentInnerHtml": false,

	// 1 つのチャンク内に保持できる改行の最大数。無制限にするには、`null` を使います。
	"html.format.maxPreserveNewLines": null,

	// 要素の前にある既存の改行を保持するかどうかを制御します。要素の前でのみ機能し、タグの内側やテキストに対しては機能しません。
	"html.format.preserveNewLines": true,

	// Django、ERB、Handlebars、PHP テンプレート言語のタグを優先します。
	"html.format.templating": false,

	// 再フォーマットしてはならないタグの、コンマ区切りの一覧。`null` の場合、既定で https://www.w3.org/TR/html5/dom.html#phrasing-content にリストされているすべてのタグになります。
	"html.format.unformatted": "wbr",

	// テキスト コンテンツをこの文字列の間にまとめます。
	"html.format.unformattedContentDelimiter": "",

	// 属性を折り返します。
	//  - auto: 行の長さが超過した場合のみ属性を折り返します。
	//  - force: 先頭以外の各属性を折り返します。
	//  - force-aligned: 先頭以外の各属性を折り返して位置を合わせます。
	//  - force-expand-multiline: 各属性を折り返します。
	//  - aligned-multiple: 行の長さが超過したときに、属性を垂直方向に整列させます。
	//  - preserve: 属性の折り返しを保持します。
	//  - preserve-aligned: 属性の折り返しを保持しますが、整列させます。
	"html.format.wrapAttributes": "auto",

	// `html.format.wrapAttributes` で 'force aligned' と 'aligned multiple' を使用するときの配置のサイズ。既定のインデント サイズを使用する場合は `null` です。
	"html.format.wrapAttributesIndentSize": null,

	// 1 行あたりの最大文字数 (0 = 無効にする)。
	"html.format.wrapLineLength": 120,

	// ホバー時にタグと属性のドキュメントを表示します。
	"html.hover.documentation": true,

	// ホバー時に MDN への参照を表示します。
	"html.hover.references": true,

	// `editor.linkedEditing` のために非推奨
	// 対応する HTML タグでカーソルのミラーリングを有効または無効にします。
	"html.mirrorCursorOnMatchingTag": false,

	// ビルトイン HTML 言語サポートが HTML5 のタグ、プロパティ、および値を候補表示するかどうかを制御します。
	"html.suggest.html5": true,

	// VS Code と HTML 言語サーバー間の通信をトレースします。
	"html.trace.server": "off",

	// ビルトイン HTML 言語サポートが埋め込みスクリプトを検証するかどうかを制御します。
	"html.validate.scripts": true,

	// ビルトイン HTML 言語サポートが埋め込みスタイルを検証するかどうかを制御します。
	"html.validate.styles": true,

	// 設定 `json.colorDecorators.enable` は使用されなくなりました。`editor.colorDecorators` を使用してください。
	// カラー デコレーターを有効または無効にします
	"json.colorDecorators.enable": true,

	// 既定の JSON フォーマッタを有効/無効にします
	"json.format.enable": true,

	// 計算されたアウトライン記号と折りたたまれた領域の最大数 (パフォーマンス上の理由から制限されています)。
	"json.maxItemsComputed": 5000,

	// 有効にすると、JSON スキーマを http および https の場所からフェッチできるようになります。
	"json.schemaDownload.enable": true,

	// スキーマを現在のプロジェクトの JSON ファイルに関連付けます。
	"json.schemas": [],

	// VS Code と JSON 言語サーバー間の通信をトレースします。
	"json.trace.server": "off",

	// マークダウン ファイル内のリンクを開く場所を制御します。
	//  - currentGroup: アクティブなエディター グループ内にリンクを開きます。
	//  - beside: アクティブなエディターの横にあるリンクを開きます。
	"markdown.links.openLocation": "currentGroup",

	// Markdown プレビューで改行を表現する方法を設定します。'true' に設定すると、段落内の改行に対して <br> が作成されます。
	"markdown.preview.breaks": false,

	// Markdown プレビューでダブルクリックすると、エディターに切り替わります。
	"markdown.preview.doubleClickToSwitchToEditor": true,

	// Markdown プレビューで使用されるフォント ファミリを制御します。
	"markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",

	// Markdown プレビューで使用されるフォント サイズ (ピクセル単位) を制御します。
	"markdown.preview.fontSize": 14,

	// Markdown プレビューで使用される行の高さを制御します。この数値はフォント サイズを基準とします。
	"markdown.preview.lineHeight": 1.6,

	// Markdown プレビューで URL 形式のテキストからリンクへの変換を有効または無効にします。
	"markdown.preview.linkify": true,

	// Markdown プレビューに、エディターの現在の選択範囲を示すマークが付きます。
	"markdown.preview.markEditorSelection": true,

	// Markdown プレビューで他のマークダウン ファイルへのリンクを開く方法を制御します。
	//  - inPreview: Markdown プレビューでリンクを開こうとします。
	//  - inEditor: エディターでリンクを開こうとします。
	"markdown.preview.openMarkdownLinks": "inPreview",

	// Markdown プレビューをスクロールすると、エディターのビューが更新されます。
	"markdown.preview.scrollEditorWithPreview": true,

	// Markdown エディターをスクロールすると、プレビューのビューが更新されます。
	"markdown.preview.scrollPreviewWithEditor": true,

	// Markdown プレビューで、特定の言語に依存しない置換と引用符の美化を有効または無効にします。
	"markdown.preview.typographer": false,

	// Markdown プレビューから使用する CSS スタイル シートへの URL またはローカル パスの一覧。相対パスは、エクスプローラーで開いているフォルダーを基準に解釈されます。開いているフォルダーがない場合は、Markdown ファイルの場所を基準にして解釈されます。すべての '\' は '\\' として記述する必要があります。
	"markdown.styles": [],

	// Markdown 拡張機能のデバッグ ログを有効にします。
	"markdown.trace": "off",

	// 組み込みの PHP 言語候補機能を有効にするかどうかを制御します。このサポートによって、PHP グローバルと変数の候補が示されます。
	"php.suggest.basic": true,

	// 組み込みの PHP 検証を有効/無効にします。
	"php.validate.enable": true,

	// PHP 実行可能ファイルを指定します。
	"php.validate.executablePath": null,

	// リンターを保存時に実行するか、入力時に実行するか。
	"php.validate.run": "onSave",

	// JSX タグの自動終了を有効または無効にします。
	"javascript.autoClosingTags": true,

	// 既定の JavaScript フォーマッタを有効/無効にします。
	"javascript.format.enable": true,

	// コンマ区切り記号の後のスペース処理を定義します。
	"javascript.format.insertSpaceAfterCommaDelimiter": true,

	// コンストラクター キーワードの後のスペース処理を定義します。
	"javascript.format.insertSpaceAfterConstructor": false,

	// 匿名関数の関数キーワードの後のスペース処理を定義します。
	"javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// 制御フロー ステートメント内のキーワードの後のスペース処理を定義します。
	"javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// 左右の空のかっこの間のスペース処理を定義します。
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

	// JSX 式の始め波かっこの後と終わり波かっこの前のスペース処理を定義します。
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// 左右の空でないかっこの間のスペース処理を定義します。
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// 左右の空でない角かっこの間のスペース処理を定義します。
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// 左右の空でないかっこの間のスペース処理を定義します。
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// テンプレート文字列の始め波かっこの後と終わり波かっこの前のスペース処理を定義します。
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	// for ステートメント内のセミコロンの後のスペース処理を定義します。
	"javascript.format.insertSpaceAfterSemicolonInForStatements": true,

	// 2 項演算子の後のスペース処理を定義します。
	"javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// 関数の引数のかっこの前にあるスペース処理を定義します。
	"javascript.format.insertSpaceBeforeFunctionParenthesis": false,

	// 新しい行にコントロール ブロックの始め波かっこを配置するかどうかを定義します。
	"javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// 新しい行に関数の始め波かっこを配置するかどうかを定義します。
	"javascript.format.placeOpenBraceOnNewLineForFunctions": false,

	// オプションのセミコロンの扱いを定義します。ワークスペースで TypeScript 3.7 バージョン以上を使用する必要があります。
	//  - ignore: セミコロンを挿入または削除しないでください。
	//  - insert: ステートメントの最後にセミコロンを挿入します。
	//  - remove: 不要なセミコロンを削除します。
	"javascript.format.semicolons": "ignore",

	// この設定は、`js/ts.implicitProjectConfig.checkJs` を優先して非推奨になりました。
	// JavaScript ファイルのセマンティック チェックを有効または無効にします。既存の 'jsconfig.json' または 'tsconfig.json' ファイルによってこの設定がオーバーライドされます。
	"javascript.implicitProjectConfig.checkJs": false,

	// この設定は、`js/ts.implicitProjectConfig.experimentalDecorators` を優先して非推奨になりました。
	// プロジェクト外の JavaScript ファイルの 'experimentalDecorators' を有効または無効にします。既存の 'jsconfig.json' または 'tsconfig.json' ファイルによってこの設定がオーバーライドされます。
	"javascript.implicitProjectConfig.experimentalDecorators": false,

	// 列挙型宣言内のメンバー値のインレイ ヒントを有効/無効にします:
	// ' ' ' typescript
	// 
	// enum MyValue {
	//  A/* = 0 */;
	// 	B/* = 1 */;
	// }
	//  
	// ```
	// ワークスペースで TypeScript 4.4+ を使用する必要があります。
	"javascript.inlayHints.enumMemberValues.enabled": false,

	// 関数シグネチャの暗黙的な戻り値の型について、インレイ ヒントを有効化/無効化:
	// ' ' ' typescript
	// 
	// function foo ()/*: number */{
	// 	return Date.now();
	// }
	//  
	// ```
	// ワークスペースで TypeScript 4.4+ を使用する必要があります。
	"javascript.inlayHints.functionLikeReturnTypes.enabled": false,

	// パラメーター名へのインレイ ヒントを有効/無効にする:
	// ' ' ' typescript
	// 
	// parseInt (/* str: */' 123 ', /* radix: */8)
	//  
	// ```
	// ワークスペースで TypeScript 4.4+ を使用する必要があります。
	//  - none: パラメーター名のヒントを無効にします。
	//  - literals: リテラル引数に対してのみ、パラメーター名のヒントを有効にします。
	//  - all: リテラル引数およびリテラル引数以外の引数に対してパラメーター名のヒントを有効にします。
	"javascript.inlayHints.parameterNames.enabled": "none",

	// パラメーター名と同一のテキストを持つ引数に対するパラメーター名のヒントを抑制します。
	"javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

	// 暗黙的なパラメーター型へのインレイ ヒントを有効/無効にする:
	// ' ' ' typescript
	// 
	// addEventListener ('click', e/*: MouseEvent */=>...)
	//  
	// ```
	// ワークスペースで TypeScript 4.4+ を使用する必要があります。
	"javascript.inlayHints.parameterTypes.enabled": false,

	// プロパティ宣言の暗黙的な型へのインレイ ヒントを有効/無効にする:
	// ```tTypescript
	// 
	// class Foo {
	// 	prop /* :number */ = Date.now();
	// }
	//  
	// ```
	// ワークスペースで TypeScript 4.4+ を使用する必要があります。
	"javascript.inlayHints.propertyDeclarationTypes.enabled": false,

	// 暗黙的な変数型のインレイ ヒントを有効/無効にします:
	// ' ' ' typescript
	// 
	// const foo/*: number */= Date。 now ();
	//  
	// ```
	// ワークスペースで TypeScript 4.4 + を使用する必要があります。
	"javascript.inlayHints.variableTypes.enabled": false,

	// 自動 import の優先パス スタイル。
	//  - shortest: 相対インポートよりもパス セグメント数が少なくなる場合にのみ、非相対インポートを優先します。
	//  - relative: インポートされたファイルの場所への相対パスを優先します。
	//  - non-relative: `jsconfig.json` または `tsconfig.json` に構成されている `baseUrl` または `paths` に基づいて非相対インポートを優先します。
	//  - project-relative: 相対インポート パスでパッケージまたはプロジェクト ディレクトリが提供される場合にのみ、非相対インポートを優先します。ワークスペースで TypeScript 4.2+ を使用する必要があります。
	"javascript.preferences.importModuleSpecifier": "shortest",

	// 自動インポート用に終了する優先パス。ワークスペースで TypeScript 4.5 以降を使用する必要があります。
	//  - auto: プロジェクト設定を使用してデフォルトを選択します。
	//  - minimal: './component/index.js' を './component' に短縮します。
	//  - index: ./component/index.js' を './component/index' に短縮します。
	//  - js: パスの末尾を短くしないでください。拡張子 '.js' を含めます。
	"javascript.preferences.importModuleSpecifierEnding": "auto",

	// JSX 属性補完向けに優先されるスタイル。
	//  - auto: グッズの種類に基づく属性名の後に `={}` または `=""` を挿入します。
	//  - braces: 属性名の後に `={}` を挿入します。
	//  - none: 属性名の挿入のみ。
	"javascript.preferences.jsxAttributeCompletionStyle": "auto",

	// クイック修正に使用するのに好ましい引用符のスタイル: 'single' 引用符、'double' 引用符、既存のインポートから引用符の種類を推測する 'auto'。
	"javascript.preferences.quoteStyle": "auto",

	// 設定 'typescript.preferences.renameShorthandProperties' は非推奨になりました。'typescript.preferences.useAliasesForRenames' をお勧めします
	// 名前の変更時にオブジェクトの省略形のプロパティのエイリアスの導入を有効または無効にします。ワークスペースで TypeScript 3.4 以降を使用する必要があります。
	"javascript.preferences.renameShorthandProperties": true,

	// 名前の変更時にオブジェクトの省略形のプロパティのエイリアスの導入を有効または無効にします。ワークスペースで TypeScript 3.4 以降を使用する必要があります。
	"javascript.preferences.useAliasesForRenames": true,

	// JavaScript ファイル内で CodeLens の参照を有効/無効にします。
	"javascript.referencesCodeLens.enabled": false,

	// JavaScript ファイル内のすべての関数で CodeLens への参照を有効または無効にします。
	"javascript.referencesCodeLens.showOnAllFunctions": false,

	// 自動インポートの提案を有効または無効にします。
	"javascript.suggest.autoImports": true,

	// パラメーター シグネチャを含む完全な関数。
	"javascript.suggest.completeFunctionCalls": false,

	// JSDoc のコメントを完成させるための提案を有効/無効にします。
	"javascript.suggest.completeJSDocs": true,

	// オートコンプリートの提案を有効/無効にします。
	"javascript.suggest.enabled": true,

	// オプションのチェーン呼び出しを挿入する定義されていない可能性のある値で入力候補を表示することを有効または無効にします。TS 3.7+ および厳密な null チェックを有効にする必要があります。
	"javascript.suggest.includeAutomaticOptionalChainCompletions": true,

	// 部分的に入力されたインポート ステートメントで、自動インポート形式の入力候補を有効または無効にします。ワークスペースで TypeScript 4.3 以降を使用する必要があります。
	"javascript.suggest.includeCompletionsForImportStatements": true,

	// クラス メンバーのスニペット補完を有効または無効にします。ワークスペースで TypeScript 4.5 以降を使用する必要があります
	"javascript.suggest.includeCompletionsWithClassMemberSnippets": true,

	// JSDoc テンプレートの '@return' 注釈の生成を有効または無効にします。ワークスペースで TypeScript 4.2+ を使用する必要があります。
	"javascript.suggest.jsdoc.generateReturns": true,

	// JavaScript の候補のファイルから一意の名前を含めることを有効または無効にします。名前の候補は、`@ts-check` または `checkJs` を使用して意味的にチェックされる JavaScript コードでは常に無効であることに注意してください。
	"javascript.suggest.names": true,

	// import ステートメントや require 呼び出しでパスの提案を有効/無効にします。
	"javascript.suggest.paths": true,

	// エディター内で JavaScript ファイルの診断の提案を有効または無効にします。
	"javascript.suggestionActions.enabled": true,

	// VS Code で名前変更や移動を行ったファイルのインポート パスの自動更新を有効または無効にします。
	//  - prompt: 名前を変更するときに確認をします。
	//  - always: 常に自動的にパスを更新します。
	//  - never: パスの名前を変更せず確認も行いません。
	"javascript.updateImportsOnFileMove.enabled": "prompt",

	// JavaScript の検証を有効/無効にします。
	"javascript.validate.enable": true,

	// JavaScript ファイルのセマンティック チェックを有効または無効にします。既存の 'jsconfig.json' または 'tsconfig.json' ファイルによってこの設定がオーバーライドされます。
	"js/ts.implicitProjectConfig.checkJs": false,

	// プロジェクト外の JavaScript ファイルの 'experimentalDecorators' を有効または無効にします。既存の 'jsconfig.json' または 'tsconfig.json' ファイルによってこの設定がオーバーライドされます。
	"js/ts.implicitProjectConfig.experimentalDecorators": false,

	// プロジェクト外の JavaScript および TypeScript ファイルの [厳密な関数の型](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) を有効または無効にします。既存の 'jsconfig.json' または 'tsconfig.json' ファイルによってこの設定がオーバーライドされます。
	"js/ts.implicitProjectConfig.strictFunctionTypes": true,

	// プロジェクト外の JavaScript および TypeScript ファイルの [厳密な null チェック](https://www.typescriptlang.org/tsconfig#strictNullChecks) を有効または無効にします。既存の 'jsconfig.json' または 'tsconfig.json' ファイルによってこの設定がオーバーライドされます。
	"js/ts.implicitProjectConfig.strictNullChecks": false,

	// JSX タグの自動終了を有効または無効にします。
	"typescript.autoClosingTags": true,

	// npm が [自動タイプ取得] 用にインストールされているかどうかを確認します (https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition)。
	"typescript.check.npmIsInstalled": true,

	// [自動タイプ取得] (https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition) を無効にします。自動タイプ取得では、外部ライブラリの IntelliSense を向上させるために、npm から '@types' パッケージが取得されます。
	"typescript.disableAutomaticTypeAcquisition": false,

	// ワークスペースで Intellisense 用に構成されている TypeScript バージョンを使用することについてユーザーへの確認を有効にします。
	"typescript.enablePromptUseWorkspaceTsdk": false,

	// 既定の TypeScript フォーマッタを有効/無効にします。
	"typescript.format.enable": true,

	// コンマ区切り記号の後のスペース処理を定義します。
	"typescript.format.insertSpaceAfterCommaDelimiter": true,

	// コンストラクター キーワードの後のスペース処理を定義します。
	"typescript.format.insertSpaceAfterConstructor": false,

	// 匿名関数の関数キーワードの後のスペース処理を定義します。
	"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// 制御フロー ステートメント内のキーワードの後のスペース処理を定義します。
	"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// 左右の空のかっこの間のスペース処理を定義します。
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

	// JSX 式の始め波かっこの後と終わり波かっこの前のスペース処理を定義します。
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// 左右の空でないかっこの間のスペース処理を定義します。
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// 左右の空でない角かっこの間のスペース処理を定義します。
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// 左右の空でないかっこの間のスペース処理を定義します。
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// テンプレート文字列の始め波かっこの後と終わり波かっこの前のスペース処理を定義します。
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	// for ステートメント内のセミコロンの後のスペース処理を定義します。
	"typescript.format.insertSpaceAfterSemicolonInForStatements": true,

	// TypeScript の型アサーションの後のスペース処理を定義します。
	"typescript.format.insertSpaceAfterTypeAssertion": false,

	// 2 項演算子の後のスペース処理を定義します。
	"typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// 関数の引数のかっこの前にあるスペース処理を定義します。
	"typescript.format.insertSpaceBeforeFunctionParenthesis": false,

	// 新しい行にコントロール ブロックの始め波かっこを配置するかどうかを定義します。
	"typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// 新しい行に関数の始め波かっこを配置するかどうかを定義します。
	"typescript.format.placeOpenBraceOnNewLineForFunctions": false,

	// オプションのセミコロンの扱いを定義します。ワークスペースで TypeScript 3.7 バージョン以上を使用する必要があります。
	//  - ignore: セミコロンを挿入または削除しないでください。
	//  - insert: ステートメントの最後にセミコロンを挿入します。
	//  - remove: 不要なセミコロンを削除します。
	"typescript.format.semicolons": "ignore",

	// CodeLens の実装を有効/無効にします。この CodeLens は interface の実装を表示します。
	"typescript.implementationsCodeLens.enabled": false,

	// 列挙型宣言内のメンバー値のインレイ ヒントを有効/無効にします:
	// ' ' ' typescript
	// 
	// enum MyValue {
	//  A/* = 0 */;
	// 	B/* = 1 */;
	// }
	//  
	// ```
	// ワークスペースで TypeScript 4.4+ を使用する必要があります。
	"typescript.inlayHints.enumMemberValues.enabled": false,

	// 関数シグネチャの暗黙的な戻り値の型について、インレイ ヒントを有効化/無効化:
	// ' ' ' typescript
	// 
	// function foo ()/*: number */{
	// 	return Date.now();
	// }
	//  
	// ```
	// ワークスペースで TypeScript 4.4+ を使用する必要があります。
	"typescript.inlayHints.functionLikeReturnTypes.enabled": false,

	// パラメーター名へのインレイ ヒントを有効/無効にする:
	// ' ' ' typescript
	// 
	// parseInt (/* str: */' 123 ', /* radix: */8)
	//  
	// ```
	// ワークスペースで TypeScript 4.4+ を使用する必要があります。
	//  - none: パラメーター名のヒントを無効にします。
	//  - literals: リテラル引数に対してのみ、パラメーター名のヒントを有効にします。
	//  - all: リテラル引数およびリテラル引数以外の引数に対してパラメーター名のヒントを有効にします。
	"typescript.inlayHints.parameterNames.enabled": "none",

	// パラメーター名と同一のテキストを持つ引数に対するパラメーター名のヒントを抑制します。
	"typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

	// 暗黙的なパラメーター型へのインレイ ヒントを有効/無効にする:
	// ' ' ' typescript
	// 
	// addEventListener ('click', e/*: MouseEvent */=>...)
	//  
	// ```
	// ワークスペースで TypeScript 4.4+ を使用する必要があります。
	"typescript.inlayHints.parameterTypes.enabled": false,

	// プロパティ宣言の暗黙的な型へのインレイ ヒントを有効/無効にする:
	// ```tTypescript
	// 
	// class Foo {
	// 	prop /* :number */ = Date.now();
	// }
	//  
	// ```
	// ワークスペースで TypeScript 4.4+ を使用する必要があります。
	"typescript.inlayHints.propertyDeclarationTypes.enabled": false,

	// 暗黙的な変数型のインレイ ヒントを有効/無効にします:
	// ' ' ' typescript
	// 
	// const foo/*: number */= Date。 now ();
	//  
	// ```
	// ワークスペースで TypeScript 4.4 + を使用する必要があります。
	"typescript.inlayHints.variableTypes.enabled": false,

	// JavaScript と TypeScript のエラーを報告するために使用するロケールを設定します。既定では VS Code のロケールを使用します。
	"typescript.locale": "",

	// [自動タイプ取得] に使われる npm 実行可能ファイルへのパスを指定します (https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition)。
	"typescript.npm": "",

	// 自動 import の優先パス スタイル。
	//  - shortest: 相対インポートよりもパス セグメント数が少なくなる場合にのみ、非相対インポートを優先します。
	//  - relative: インポートされたファイルの場所への相対パスを優先します。
	//  - non-relative: `jsconfig.json` または `tsconfig.json` に構成されている `baseUrl` または `paths` に基づいて非相対インポートを優先します。
	//  - project-relative: 相対インポート パスでパッケージまたはプロジェクト ディレクトリが提供される場合にのみ、非相対インポートを優先します。ワークスペースで TypeScript 4.2+ を使用する必要があります。
	"typescript.preferences.importModuleSpecifier": "shortest",

	// 自動インポート用に終了する優先パス。ワークスペースで TypeScript 4.5 以降を使用する必要があります。
	//  - auto: プロジェクト設定を使用してデフォルトを選択します。
	//  - minimal: './component/index.js' を './component' に短縮します。
	//  - index: ./component/index.js' を './component/index' に短縮します。
	//  - js: パスの末尾を短くしないでください。拡張子 '.js' を含めます。
	"typescript.preferences.importModuleSpecifierEnding": "auto",

	// 使用可能な自動インポートについて 'package.json' の依存関係の検索を有効または無効にします。
	//  - auto: パフォーマンスの推定影響に基づいて依存関係を検索します。
	//  - on: 常に依存関係を検索します。
	//  - off: 依存関係を検索しないでください。
	"typescript.preferences.includePackageJsonAutoImports": "auto",

	// JSX 属性補完向けに優先されるスタイル。
	//  - auto: グッズの種類に基づく属性名の後に `={}` または `=""` を挿入します。
	//  - braces: 属性名の後に `={}` を挿入します。
	//  - none: 属性名の挿入のみ。
	"typescript.preferences.jsxAttributeCompletionStyle": "auto",

	// クイック修正に使用するのに好ましい引用符のスタイル: 'single' 引用符、'double' 引用符、既存のインポートから引用符の種類を推測する 'auto'。
	"typescript.preferences.quoteStyle": "auto",

	// 設定 'typescript.preferences.renameShorthandProperties' は非推奨になりました。'typescript.preferences.useAliasesForRenames' をお勧めします
	// 名前の変更時にオブジェクトの省略形のプロパティのエイリアスの導入を有効または無効にします。ワークスペースで TypeScript 3.4 以降を使用する必要があります。
	"typescript.preferences.renameShorthandProperties": true,

	// 名前の変更時にオブジェクトの省略形のプロパティのエイリアスの導入を有効または無効にします。ワークスペースで TypeScript 3.4 以降を使用する必要があります。
	"typescript.preferences.useAliasesForRenames": true,

	// TypeScript ファイルで CodeLens の参照を有効/無効にします。
	"typescript.referencesCodeLens.enabled": false,

	// 有効および無効は、TypeScript ファイル内のすべての関数で CodeLens を参照します。
	"typescript.referencesCodeLens.showOnAllFunctions": false,

	// スタイル チェックを警告として報告します。
	"typescript.reportStyleChecksAsWarnings": true,

	// 自動インポートの提案を有効または無効にします。
	"typescript.suggest.autoImports": true,

	// パラメーター シグネチャを含む完全な関数。
	"typescript.suggest.completeFunctionCalls": false,

	// JSDoc のコメントを完成させるための提案を有効/無効にします。
	"typescript.suggest.completeJSDocs": true,

	// オートコンプリートの提案を有効/無効にします。
	"typescript.suggest.enabled": true,

	// オプションのチェーン呼び出しを挿入する定義されていない可能性のある値で入力候補を表示することを有効または無効にします。TS 3.7+ および厳密な null チェックを有効にする必要があります。
	"typescript.suggest.includeAutomaticOptionalChainCompletions": true,

	// 部分的に入力されたインポート ステートメントで、自動インポート形式の入力候補を有効または無効にします。ワークスペースで TypeScript 4.3 以降を使用する必要があります。
	"typescript.suggest.includeCompletionsForImportStatements": true,

	// クラス メンバーのスニペット補完を有効または無効にします。ワークスペースで TypeScript 4.5 以降を使用する必要があります
	"typescript.suggest.includeCompletionsWithClassMemberSnippets": true,

	// TS サーバーからのスニペットの入力候補を有効または無効にします。ワークスペースで TypeScript 4.3 以降を使用する必要があります。
	"typescript.suggest.includeCompletionsWithSnippetText": true,

	// JSDoc テンプレートの '@return' 注釈の生成を有効または無効にします。ワークスペースで TypeScript 4.2+ を使用する必要があります。
	"typescript.suggest.jsdoc.generateReturns": true,

	// import ステートメントや require 呼び出しでパスの提案を有効/無効にします。
	"typescript.suggest.paths": true,

	// エディター内で TypeScript ファイルの診断の提案を有効または無効にします。
	"typescript.suggestionActions.enabled": true,

	// VS Code の JavaScript と TypeScript のサポートを向上させるために、ときどき行われるアンケートを有効/無効にします。
	"typescript.surveys.enabled": true,

	// tsc タスクの自動検出を制御します。
	//  - on: ビルドとウォッチ、両方のタスクを作成します。
	//  - off: この機能を無効にします。
	//  - build: 単一の実行コンパイルタスクのみを作成します。
	//  - watch: コンパイルタスクとウォッチタスクのみを作成します。
	"typescript.tsc.autoDetect": "on",

	// IntelliSense に使用する、TypeScript インストールの下にある tsserver および lib*.d.ts ファイルのフォルダー パスを指定します。例: './node_modules/typescript/lib'。
	// 
	// - ユーザー設定として指定した場合は、'typescript.tsdk' からの TypeScript バージョンによって組み込みの TypeScript バージョンが自動的に置き換えられます。
	// - ワークスペース設定として指定した場合は、'typescript.tsdk' で 'TypeScript: Select TypeScript version' コマンドを使用することによって、IntelliSense のためにそのワークスペース バージョンの TypeScript を使用するように切り替えることができます。
	// 
	// TypeScript バージョンの管理について詳しくは、[TypeScript のドキュメント](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) をご覧ください。
	"typescript.tsdk": "",

	// ディレクトリへの TS サーバーのパフォーマンスのトレースを有効にします。これらのトレース ファイルは TS サーバーのパフォーマンスの問題を診断するために使用できます。ログには、プロジェクトのファイル パス、ソース コード、その他の潜在的に機密性の高い情報が含まれている場合があります。
	"typescript.tsserver.enableTracing": false,

	// (試験的) プロジェクト全体のエラー報告を有効にします。
	"typescript.tsserver.experimental.enableProjectDiagnostics": false,

	// ファイルへの TS サーバーのログを有効にします。このログは TS サーバーの問題を診断するために使用できます。ログには、プロジェクトのファイルパス、ソースコード、その他の潜在的に機密性の高い情報が含まれている場合があります。
	"typescript.tsserver.log": "off",

	// TypeScript サーバー プロセスに割り当てるメモリの最大量 (MB)。
	"typescript.tsserver.maxTsServerMemory": 3072,

	// TypeScript 言語サービス プラグインを検出する追加のパス。
	"typescript.tsserver.pluginPaths": [],

	// TS サーバーに送信されるメッセージのトレースを有効にします。このトレースは TS サーバーの問題を診断するために使用できます。トレースには、プロジェクトのファイルパス、ソースコード、その他の潜在的に機密性の高い情報が含まれている場合があります。
	"typescript.tsserver.trace": "off",

	// この設定は、'typescript.tsserver.useSyntaxServer' のため廃止されました。
	// 折りたたみの計算やドキュメント シンボルのコンピューティングなど、構文に関連する操作に迅速に応答できる別の TypeScript サーバーの作成を有効または無効にします。ワークスペースで TypeScript 3.4.0 以上を使用する必要があります。
	"typescript.tsserver.useSeparateSyntaxServer": true,

	// TypeScript がコード折りたたみの計算などの構文関連操作をより迅速に処理するため、専用サーバーを起動するかどうかを制御します。
	//  - always: 軽量化構文サーバーを使用して、すべての IntelliSense 操作を処理します。この構文サーバーは、開いているファイルに対してのみ IntelliSense を提供します。
	//  - never: 専用の構文サーバーを使用しないでください。単一のサーバーを使用して、すべての IntelliSense 操作を処理します。
	//  - auto: 構文操作専用の完全なサーバーと、軽量化サーバーの両方を生成します。構文サーバーは、プロジェクトの読み込み中に構文操作を高速化し、IntelliSense を提供するために使用されます。
	"typescript.tsserver.useSyntaxServer": "auto",

	// ファイルとディレクトリを追跡するために使用する監視方法を構成します。ワークスペースで TypeScript 3.8 以降を使用する必要があります。
	"typescript.tsserver.watchOptions": {},

	// VS Code で名前変更や移動を行ったファイルのインポート パスの自動更新を有効または無効にします。
	//  - prompt: 名前を変更するときに確認をします。
	//  - always: 常に自動的にパスを更新します。
	//  - never: パスの名前を変更せず確認も行いません。
	"typescript.updateImportsOnFileMove.enabled": "prompt",

	// TypeScript の検証を有効/無効にします。
	"typescript.validate.enable": true,

	// [ワークスペース内のシンボルへの移動](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name) でどのファイルを検索するかを制御します。
	//  - allOpenProjects: 開いているすべての JavaScript または TypeScript プロジェクトからシンボルを検索します。ワークスペースで TypeScript 3.9 以降を使用する必要があります。
	//  - currentProject: 現在の JavaScript または TypeScript プロジェクトからのみシンボルを検索します。
	"typescript.workspaceSymbols.scope": "allOpenProjects",

	// コメント パネルを開くタイミングを制御します。
	"comments.openPanel": "openOnSessionStartWithComments",

	// 任意のファイルにブレークポイントを設定できるようにします。
	"debug.allowBreakpointsEverywhere": false,

	// アクティブなデバッグ セッションがある場合に、ウィンドウを閉じたときに確認を行うかどうかを制御します。
	//  - never: 確認しません。
	//  - always: デバッグ セッションがあるかどうかを常に確認します。
	"debug.confirmOnExit": "never",

	// デバッグ コンソールの入力候補を受け入れるかどうかを制御します。また、入力は、デバッグコンソールに入力された内容を評価するためにも使用されます。
	"debug.console.acceptSuggestionOnEnter": "off",

	// デバッグ セッションの終了時にデバッグ コンソールを自動的に閉じるかどうかを制御します。
	"debug.console.closeOnEnd": false,

	// デバッグ コンソールで同一の行を折りたたみ、出現回数をバッジ付きで表示するかどうか制御します。
	"debug.console.collapseIdenticalLines": true,

	// デバッグ コンソールのフォント ファミリを制御します。
	"debug.console.fontFamily": "default",

	// デバッグ コンソール内のフォント サイズをピクセル単位で制御します。
	"debug.console.fontSize": 14,

	// 以前に型指定された入力をデバッグ コンソールが提案する必要があるかどうかを制御します。
	"debug.console.historySuggestions": true,

	// デバッグ コンソール内での行の高さをピクセル単位で制御します。フォント サイズから行の高さを計算するには 0 を使用します。
	"debug.console.lineHeight": 0,

	// 行をデバッグ コンソールで折り返す必要があるかどうかを制御します。
	"debug.console.wordWrap": true,

	// 逆アセンブリ ビューでソース コードを表示する。
	"debug.disassemblyView.showSourceCode": true,

	// デバッガーが中断したときにワークベンチ ウィンドウにフォーカスするかどうかを制御します。
	"debug.focusWindowOnBreak": true,

	// デバッグ中にエディターの行内に変数値を表示します。
	//  - true: デバッグ中に変数値を常にインラインでエディターに表示します。
	//  - false: デバッグ中に変数値をインラインでエディターに表示しません。
	//  - auto: 言語でインライン値の場所がサポートされている場合、デバッグ中に変数値をインラインでエディターに表示します。
	"debug.inlineValues": "auto",

	// いつ内部デバッグ コンソールを開くかを制御します。
	"debug.internalConsoleOptions": "openOnFirstSessionStart",

	// preLaunchTask の実行後にエラーが発生した場合の処理を制御します。
	//  - debugAnyway: タスクのエラーを無視し、デバッグを開始します。
	//  - showErrors: 問題ビューを表示し、デバッグを開始しません。
	//  - prompt: ユーザーに確認します。
	//  - abort: デバッグを取り消します。
	"debug.onTaskErrors": "prompt",

	// いつデバッグ ビューを開くかを制御します。
	"debug.openDebug": "openOnDebugBreak",

	// デバッグ セッションの終了時にエクスプローラー ビューを自動的に開きます。
	"debug.openExplorerOnEnd": false,

	// デバッグ セッションを開始する前にどのエディターを保存するかを制御します。
	//  - allEditorsInActiveGroup: デバッグ セッションを開始する前に、アクティブなグループ内のすべてのエディターを保存します。
	//  - nonUntitledEditorsInActiveGroup: デバッグ セッションを開始する前に、アクティブなグループ内のすべてのエディターを、無題のものを除いて保存します。
	//  - none: デバッグ セッションを開始する前にエディターを保存しません。
	"debug.saveBeforeStart": "allEditorsInActiveGroup",

	// ブレークポイントを概要ルーラーに表示するかどうかを制御します。
	"debug.showBreakpointsInOverviewRuler": false,

	// デバッグ中にインライン ブレークポイント候補の装飾をエディターに表示するかどうかを制御します。
	"debug.showInlineBreakpointCandidates": true,

	// いつデバッグ ステータス バーを表示するかを制御します。
	//  - never: 今後ステータス バーにデバッグを表示しない
	//  - always: ステータス バーにデバッグを常に表示する
	//  - onFirstSessionStart: 初めてデバッグが開始されたときのみステータス バーにデバッグを表示する
	"debug.showInStatusBar": "onFirstSessionStart",

	// デバッグ ツール バーにデバッグのサブセッションを表示するかどうかを制御します。false に設定されている場合、サブセッションに対する停止コマンドによって、親セッションも停止します。
	"debug.showSubSessionsInToolBar": false,

	// 統合または外部ターミナルで新しいデバッグ セッションを開始する前に、ターミナルをクリアします。
	"debug.terminal.clearBeforeReusing": false,

	// デバッグ ツールバーの位置を制御します。すべてのビューに表示する場合には `floating`、デバッグ ビューの場合は `docked` に設定します。その他の場合は、`hidden` にします。
	"debug.toolBarLocation": "floating",

	// グローバル デバッグ起動構成。ワークスペースで共有されている 'launch.json' の代わりに使用する必要があります。
	"launch": {
		"configurations": [],
		"compounds": []
	},

	// エラーのピーク ビューを自動的に開くタイミングを構成します。
	//  - failureAnywhere: エラーの場所に関係なく、自動的に開きます。
	//  - failureInVisibleDocument: 参照可能なドキュメントでテストが失敗したときに自動的に開きます。
	//  - never: 自動的に開くことはありません。
	"testing.automaticallyOpenPeekView": "failureInVisibleDocument",

	// 自動実行モードでピーク ビューを自動的に開くかどうかを制御します。
	"testing.automaticallyOpenPeekViewDuringAutoRun": false,

	// テストが期限切れとしてマークされ、新しい実行を開始してから待機する時間 (ミリ秒単位)。
	"testing.autoRun.delay": 1000,

	// どのテストを自動的に実行するかを制御します。
	//  - all: 自動実行が切り替えられたときに、検出されたすべてのテストを自動的に実行します。変更されたときに、個々のテストを再実行します。
	//  - rerun: 変更されたときに、個々のテストを再実行します。まだ実行されていないテストは自動的に実行されません。
	"testing.autoRun.mode": "all",

	// とじしろ内のテスト デコレーションをクリックした場合に実行する操作を制御します。
	//  - run: テストを実行します。
	//  - debug: テストをデバッグします。
	//  - contextMenu: その他のオプションについては、コンテキスト メニューを開きます。
	"testing.defaultGutterClickAction": "run",

	// 実行中のテストをテスト エクスプローラー ビューでフォローするかどうかを制御します
	"testing.followRunningTest": true,

	// テスト デコレーションがエディターのとじしろに表示するかどうかを制御します。
	"testing.gutterEnabled": true,

	// CSS プロパティの完了時に行末にセミコロンを挿入します。
	"css.completion.completePropertyWithSemicolon": true,

	// 既定では、VS Codeは CSS プロパティが選択されるとプロパティ値の補完をトリガーします。この設定を使うことで、この動作は無効にできます。
	"css.completion.triggerPropertyValueCompletion": true,

	// [カスタム データ形式](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md) に従って JSON ファイルを指す相対ファイル パスの一覧。
	// 
	// VS Code では、起動時にカスタム データを読み込んで、ユーザーが JSON ファイルに指定するカスタム CSS プロパティ、ディレクティブ、擬似クラス、擬似要素の CSS サポートを強化します。
	// 
	// ファイル パスはワークスペースに対して相対的であり、ワークスペース フォルダーの設定のみが考慮されます。
	"css.customData": [],

	// CSS ホバー時にタグと属性のドキュメントを表示します。
	"css.hover.documentation": true,

	// CSS ホバー時に MDN への参照を表示します。
	"css.hover.references": true,

	// パラメーター数が無効です。
	"css.lint.argumentsInColorFunction": "error",

	// `padding` や `border` を使用するときに `width` や `height` を使用しないでください
	"css.lint.boxModel": "ignore",

	// ベンダー プレフィックス を使用するときは、他すべてのベンダー プレフィックスも必ず含めてください。
	"css.lint.compatibleVendorPrefixes": "ignore",

	// 重複するスタイル定義を使用しないでください。
	"css.lint.duplicateProperties": "ignore",

	// 空の規則セットを使用しないでください。
	"css.lint.emptyRules": "warning",

	// `float` の使用を避けてください。float は脆弱な CSS につながり、レイアウトの一部が変更されたときに CSS が破損しやすくなります。
	"css.lint.float": "ignore",

	// `@font-face` 規則で `src` プロパティと `font-family` プロパティを定義する必要があります。
	"css.lint.fontFaceProperties": "warning",

	// Hex には 3 つまたは 6 つの 16 進数が含まれる必要があります。
	"css.lint.hexColorLength": "error",

	// セレクターには ID を含めないでください。これらの規則と HTML の結合が密接すぎます。
	"css.lint.idSelector": "ignore",

	// IE ハックは、IE7 以前をサポートする場合にのみ必要です。
	"css.lint.ieHack": "ignore",

	// `!important` の使用を避けてください。これは CSS 全体の特定性が制御不能になり、リファクタリングが必要になります。
	"css.lint.important": "ignore",

	// 複数の Import ステートメントを同時に読み込むことはできません。
	"css.lint.importStatement": "ignore",

	// display によってプロパティを無視します。例: `display: inline` の場合、`width`、`height`、`margin-top`、`margin-bottom`、`float` プロパティには効果がありません。
	"css.lint.propertyIgnoredDueToDisplay": "warning",

	// ユニバーサル セレクター (`*`) を使用すると処理速度が低下することが知られています。
	"css.lint.universalSelector": "ignore",

	// 不明な @ 規則。
	"css.lint.unknownAtRules": "warning",

	// 不明なプロパティ。
	"css.lint.unknownProperties": "warning",

	// 不明なベンダー固有のプロパティ。
	"css.lint.unknownVendorSpecificProperties": "ignore",

	// `UnknownProperties` ルールに対して検証されていないプロパティの一覧です。
	"css.lint.validProperties": [],

	// ベンダー プレフィックスを使用するとき、標準のプロパティーも含めます。
	"css.lint.vendorPrefix": "warning",

	// 0 に単位は必要ありません。
	"css.lint.zeroUnits": "ignore",

	// VS Code と CSS 言語サーバー間の通信をトレースします。
	"css.trace.server": "off",

	// すべての検証を有効または無効にします。
	"css.validate": true,

	// CSS プロパティの完了時に行末にセミコロンを挿入します。
	"less.completion.completePropertyWithSemicolon": true,

	// 既定では、VS Codeは CSS プロパティが選択されるとプロパティ値の補完をトリガーします。この設定を使うことで、この動作は無効にできます。
	"less.completion.triggerPropertyValueCompletion": true,

	// LESS ホバー時にタグと属性のドキュメントを表示します。
	"less.hover.documentation": true,

	// LESS ホバー時に MDN への参照を表示します。
	"less.hover.references": true,

	// パラメーター数が無効です。
	"less.lint.argumentsInColorFunction": "error",

	// `padding` や `border` を使用するときに `width` や `height` を使用しないでください
	"less.lint.boxModel": "ignore",

	// ベンダー プレフィックス を使用するときは、他すべてのベンダー プレフィックスも必ず含めてください。
	"less.lint.compatibleVendorPrefixes": "ignore",

	// 重複するスタイル定義を使用しないでください。
	"less.lint.duplicateProperties": "ignore",

	// 空の規則セットを使用しないでください。
	"less.lint.emptyRules": "warning",

	// `float` の使用を避けてください。float は脆弱な CSS につながり、レイアウトの一部が変更されたときに CSS が破損しやすくなります。
	"less.lint.float": "ignore",

	// `@font-face` 規則で `src` プロパティと `font-family` プロパティを定義する必要があります。
	"less.lint.fontFaceProperties": "warning",

	// Hex には 3 つまたは 6 つの 16 進数が含まれる必要があります。
	"less.lint.hexColorLength": "error",

	// セレクターには ID を含めないでください。これらの規則と HTML の結合が密接すぎます。
	"less.lint.idSelector": "ignore",

	// IE ハックは、IE7 以前をサポートする場合にのみ必要です。
	"less.lint.ieHack": "ignore",

	// `!important` の使用を避けてください。これは CSS 全体の特定性が制御不能になり、リファクタリングが必要になります。
	"less.lint.important": "ignore",

	// 複数の Import ステートメントを同時に読み込むことはできません。
	"less.lint.importStatement": "ignore",

	// display によってプロパティを無視します。例: `display: inline` の場合、`width`、`height`、`margin-top`、`margin-bottom`、`float` プロパティには効果がありません。
	"less.lint.propertyIgnoredDueToDisplay": "warning",

	// ユニバーサル セレクター (`*`) を使用すると処理速度が低下することが知られています。
	"less.lint.universalSelector": "ignore",

	// 不明な @ 規則。
	"less.lint.unknownAtRules": "warning",

	// 不明なプロパティ。
	"less.lint.unknownProperties": "warning",

	// 不明なベンダー固有のプロパティ。
	"less.lint.unknownVendorSpecificProperties": "ignore",

	// `UnknownProperties` ルールに対して検証されていないプロパティの一覧です。
	"less.lint.validProperties": [],

	// ベンダー プレフィックスを使用するとき、標準のプロパティーも含めます。
	"less.lint.vendorPrefix": "warning",

	// 0 に単位は必要ありません。
	"less.lint.zeroUnits": "ignore",

	// すべての検証を有効または無効にします。
	"less.validate": true,

	// CSS プロパティの完了時に行末にセミコロンを挿入します。
	"scss.completion.completePropertyWithSemicolon": true,

	// 既定では、VS Codeは CSS プロパティが選択されるとプロパティ値の補完をトリガーします。この設定を使うことで、この動作は無効にできます。
	"scss.completion.triggerPropertyValueCompletion": true,

	// SCSS ホバー時にタグと属性のドキュメントを表示します。
	"scss.hover.documentation": true,

	// SCSS ホバー時に MDN への参照を表示します。
	"scss.hover.references": true,

	// パラメーター数が無効です。
	"scss.lint.argumentsInColorFunction": "error",

	// `padding` や `border` を使用するときに `width` や `height` を使用しないでください
	"scss.lint.boxModel": "ignore",

	// ベンダー プレフィックス を使用するときは、他すべてのベンダー プレフィックスも必ず含めてください。
	"scss.lint.compatibleVendorPrefixes": "ignore",

	// 重複するスタイル定義を使用しないでください。
	"scss.lint.duplicateProperties": "ignore",

	// 空の規則セットを使用しないでください。
	"scss.lint.emptyRules": "warning",

	// `float` の使用を避けてください。float は脆弱な CSS につながり、レイアウトの一部が変更されたときに CSS が破損しやすくなります。
	"scss.lint.float": "ignore",

	// `@font-face` 規則で `src` プロパティと `font-family` プロパティを定義する必要があります。
	"scss.lint.fontFaceProperties": "warning",

	// Hex には 3 つまたは 6 つの 16 進数が含まれる必要があります。
	"scss.lint.hexColorLength": "error",

	// セレクターには ID を含めないでください。これらの規則と HTML の結合が密接すぎます。
	"scss.lint.idSelector": "ignore",

	// IE ハックは、IE7 以前をサポートする場合にのみ必要です。
	"scss.lint.ieHack": "ignore",

	// `!important` の使用を避けてください。これは CSS 全体の特定性が制御不能になり、リファクタリングが必要になります。
	"scss.lint.important": "ignore",

	// 複数の Import ステートメントを同時に読み込むことはできません。
	"scss.lint.importStatement": "ignore",

	// display によってプロパティを無視します。例: `display: inline` の場合、`width`、`height`、`margin-top`、`margin-bottom`、`float` プロパティには効果がありません。
	"scss.lint.propertyIgnoredDueToDisplay": "warning",

	// ユニバーサル セレクター (`*`) を使用すると処理速度が低下することが知られています。
	"scss.lint.universalSelector": "ignore",

	// 不明な @ 規則。
	"scss.lint.unknownAtRules": "warning",

	// 不明なプロパティ。
	"scss.lint.unknownProperties": "warning",

	// 不明なベンダー固有のプロパティ。
	"scss.lint.unknownVendorSpecificProperties": "ignore",

	// `UnknownProperties` ルールに対して検証されていないプロパティの一覧です。
	"scss.lint.validProperties": [],

	// ベンダー プレフィックスを使用するとき、標準のプロパティーも含めます。
	"scss.lint.vendorPrefix": "warning",

	// 0 に単位は必要ありません。
	"scss.lint.zeroUnits": "ignore",

	// すべての検証を有効または無効にします。
	"scss.validate": true,

	// 有効にした場合、拡張機能の更新を自動的に確認します。拡張機能に更新がある場合は、拡張機能ビューで古くなった拡張機能として表示されます。更新は Microsoft オンライン サービスから取得されます。
	"extensions.autoCheckUpdates": true,

	// 拡張機能の自動更新の動作を制御します。更新プログラムは、Microsoft オンライン サービスからフェッチされます。
	//  - true: すべての拡張機能の更新プログラムを自動的にダウンロードしてインストールします。
	//  - onlyEnabledExtensions: 有効な拡張機能のみの更新プログラムを自動的にダウンロードしてインストールします。無効な拡張機能は自動的には更新されません。
	//  - false: 拡張機能は自動的には更新されません。
	"extensions.autoUpdate": true,

	// 有効にした場合、拡張機能の詳細を表示したエディターは拡張機能ビューから移動すると自動的に閉じられるようになります。
	"extensions.closeExtensionDetailsOnViewChange": false,

	// 拡張機能がここに表示されている場合、その拡張機能が URI を処理するときに確認プロンプトは表示されません。
	"extensions.confirmedUriHandlerExtensionIds": [],

	// 有効にした場合、拡張機能の推奨事項の通知を表示しません。
	"extensions.ignoreRecommendations": false,

	// この設定は非推奨化されています。extensions.ignoreRecommendations 設定を使用して、推奨事項の通知を制御します。既定で推奨ビューを非表示にするには、拡張機能ビューの可視性アクションを使用します。
	// 
	"extensions.showRecommendationsOnlyOnDemand": false,

	// 拡張機能の信頼されていないワークペースのサポートをオーバーライドします。`true` を使用する拡張機能は常に有効になります。`limited` を使用する拡張機能は常に有効になり、信頼を必要とする機能は拡張子により非表示にされます。`false` を使用している拡張機能は、ワークスペースが信頼されている場合にのみ有効になります。
	"extensions.supportUntrustedWorkspaces": {},

	// 拡張機能の仮想ワークスぺースのサポートをオーバーライドします。
	"extensions.supportVirtualWorkspaces": {
		"pub.name": false
	},

	// web worker 拡張機能ホストを有効にします。
	//  - true: Web Worker 拡張機能のホストは常に起動されます。
	//  - false: Web Worker 拡張機能のホストは起動されません。
	//  - auto: Web ワーカー拡張機能のホストは、Web 拡張機能で必要とされるときに起動されます。
	"extensions.webWorker": "auto",

	// 出力ビューでスマート スクロール機能を有効/無効にします。スマート スクロールを使用する場合、出力ビューをクリックすると自動的にスクロールがロックされ、最後の行をクリックするとロックが解除されます。
	"output.smartScroll.enabled": true,

	// 同期中に無視される拡張機能の一覧です。拡張機能の識別子は常に `${publisher}.${name}` です。たとえば、`vscode.csharp` です。
	"settingsSync.ignoredExtensions": [],

	// 同期中に無視される設定を構成します。
	"settingsSync.ignoredSettings": [],

	// 各プラットフォームのキー バインドを同期します。
	"settingsSync.keybindingsPerPlatform": true,

	// 有効にすると、ノートブックの階層リンクにコード セルが含まれます。
	"notebook.breadcrumbs.showCodeCells": true,

	// フォーカスインジケーターが描画されている場所を、セルの境界線または左端余白に沿って制御します。
	"notebook.cellFocusIndicator": "gutter",

	// セルのツールバーを表示するか非表示にするかどうか。
	"notebook.cellToolbarLocation": {
		"default": "right"
	},

	// ポイントしたときまたはクリック時にセルのツールバーを表示するかどうか。
	"notebook.cellToolbarVisibility": "click",

	// ノートブック エディターをコンパクト形式で表示するかどうかを制御します。たとえば、オンにすると、左余白の幅が小さくなります。
	"notebook.compactView": true,

	// 出力アクションを出力ツールバーにレンダリングするかどうかを制御します。
	"notebook.consolidatedOutputButton": true,

	// [実行] ボタンの横にあるドロップダウンで、追加アクションを表示するかどうかを制御します。
	"notebook.consolidatedRunButton": false,

	// ノートブックに拡張テキスト差分エディターを使用するかどうか。
	"notebook.diff.enablePreview": true,

	// メタデータの違いを非表示にする
	"notebook.diff.ignoreMetadata": false,

	// 出力の違いを非表示にする
	"notebook.diff.ignoreOutputs": false,

	// 出力 MIME 種類の優先度リスト
	"notebook.displayOrder": [],

	// ノートブック エディターでドラッグ アンド ドロップによるセルの移動を許可するかどうかを制御します。
	"notebook.dragAndDropEnabled": true,

	// ノートブックで使用されるコード エディターの設定。これを使用して、ほとんどのエディター * 設定をカスタマイズできます。
	"notebook.editorOptionsCustomizations": {},

	// ノートブック エディター内でグローバル ツールバーをレンダリングするかどうかを制御します。
	"notebook.globalToolbar": true,

	// [ノートブック] ツールバーのアクションがラベルをレンダリングするかどうかを制御します。
	"notebook.globalToolbarShowLabel": true,

	// セルを挿入アクションを表示するかどうかを制御します。
	//  - betweenCells: セル間でカーソルを合わせたときに表示されるツールバー。
	//  - notebookToolbar: ノートブック エディターの上部にあるツールバー。
	//  - both: 両方のツールバー。
	//  - hidden: 挿入アクションがどこにも表示されません。
	"notebook.insertToolbarLocation": "both",

	// セル エディターでの行番号の表示を制御します。
	"notebook.lineNumbers": "off",

	// 有効にすると、セルエディター内の現在のカーソルが最初または最後の行にあるときに、カーソルは次または前のセルに移動できます。
	"notebook.navigation.allowNavigateToSurroundingCells": true,

	// 有効にすると、ノートブック アウトラインにコード セルが表示されます。
	"notebook.outline.showCodeCells": false,

	// テキスト出力のテキスト行数を制御します。
	"notebook.output.textLineLimit": 30,

	// セルのステータス バーを表示するかどうか。
	//  - hidden: セルのステータス バーは常に非表示です。
	//  - visible: セルのステータス バーは常に表示されています。
	//  - visibleAfterExecute: セルのステータス バーは、セルが実行されるまで非表示になります。その後可視化され、実行状態を表示できるようになります。
	"notebook.showCellStatusBar": "visible",

	// マークダウン ヘッダー折りたたみ矢印が表示されるタイミングを制御します。
	//  - always: 折りたたみコントロールは常に表示されています。
	//  - mouseover: 折りたたみコントロールは、カーソルを合わせたときにのみ表示されます。
	"notebook.showFoldingControls": "mouseover",

	// セルごとに個別の元に戻す/やり直しのスタックを使用するかどうか。
	"notebook.undoRedoPerCell": true,

	// すべてのタスク プロバイダー拡張機能に対する 'provideTasks' の有効化を制御します。Tasks: Run Task コマンドが低速の場合、タスク プロバイダーの自動検出を無効にすると改善される可能性があります。個々の拡張機能で、自動検出を無効にする設定が備わっている場合もあります。
	"task.autoDetect": "on",

	// タスクの実行時に問題マッチャーのプロンプトを表示するかどうかを構成します。'true' に設定してプロンプトしないようにするか、タスクの種類のディクショナリを使用して、特定のタスクの種類に対してのみプロンプトをオフにします。
	"task.problemMatchers.neverPrompt": false,

	// [タスクの実行] など、タスク クイック ピックに詳細があるタスクについてタスクの詳細を表示するかどうかを制御します。
	"task.quickOpen.detail": true,

	// タスククイックオープンダイアログで追跡された最近のアイテムの数を制御します。
	"task.quickOpen.history": 30,

	// タスクがプロバイダーによってグループ化されている場合、[タスク: タスクの実行] コマンドで、高速の 2 レベル ピッカーの代わりに低速の [すべて表示] の動作を使用します。
	"task.quickOpen.showAll": false,

	// 選択するタスクが 1 つしかない場合に、タスクのクイック ピックをスキップするかどうかを制御します。
	"task.quickOpen.skip": false,

	// タスクを実行する前に、すべてのダーティなエディターを保存してください。
	//  - always: 実行する前に常にすべてのエディターを保存します。
	//  - never: 実行する前にエディターを保存しません。
	//  - prompt: 実行前にエディターを保存するかどうかを確認します。
	"task.saveBeforeRun": "always",

	// プロバイダーの速度が遅いときに警告を表示するかどうかを構成します
	"task.slowProviderWarning": true,

	// 起動するターミナルの種類をカスタマイズします。
	//  - integrated: VS Code の統合ターミナルを使用します。
	//  - external: 構成済みの外部ターミナルを使用します。
	"terminal.explorerKind": "integrated",

	// どのターミナルを Linux で実行するかをカスタマイズします。
	"terminal.external.linuxExec": "xterm",

	// どのターミナル アプリケーションを macOS で実行するかをカスタマイズします。
	"terminal.external.osxExec": "Terminal.app",

	// どのターミナルを Windows で実行するかをカスタマイズします。
	"terminal.external.windowsExec": "C:\\Windows\\System32\\cmd.exe",

	// ターミナルでコードのキー バインドを許可するかどうかを指定します。これが true で、キーストロークでコードを生成した場合、'#terminal.integrated.commandsToSkipShell#' はバイパスされます。これを false に設定すると、Ctrl+K で (VS Code ではなく) シェルに移動したい場合に特に便利です。
	"terminal.integrated.allowChords": true,

	// メニュー バー ニーモニック (Alt+F など) でメニュー バーを開くかどうかを指定します。これを true にした場合、すべての Alt キーストロークがシェルをスキップするようになることにご注意ください。これは、macOS では何の効果もありません。
	"terminal.integrated.allowMnemonics": false,

	// 有効にすれば、`editor.multiCursorModifier` が `'alt'` (既定値) に設定されている場合に、alt または option キーを押しながらクリックすると、プロンプト カーソルがマウスの下に移動します。これは、お客様のシェルによっては正確に動作しないことがあります。
	"terminal.integrated.altClickMovesCursor": true,

	// このパスを設定すると、`terminal.integrated.shell.linux` がオーバーライドされ、`shellArgs` の値が無視されます。この値は、タスクやデバッグなどのオートメーション関連のターミナル使用に関するものです。
	"terminal.integrated.automationShell.linux": null,

	// このパスを設定すると、`terminal.integrated.shell.osx` がオーバーライドされ、`shellArgs` の値が無視されます。この値は、タスクやデバッグなどのオートメーション関連のターミナル使用に関するものです。
	"terminal.integrated.automationShell.osx": null,

	// このパスを設定すると、`terminal.integrated.shell.windows` がオーバーライドされ、`shellArgs` の値が無視されます。この値は、タスクやデバッグなどのオートメーション関連のターミナル使用に関するものです。
	"terminal.integrated.automationShell.windows": null,

	// トリガーされた場合に、ターミナル タブ内にベルを表示するためのミリ秒数です。
	"terminal.integrated.bellDuration": 1000,

	// キー バインドがシェルに送信されず、代わりに常に VS Code で処理されるコマンド ID のセット。これにより、シェルによって通常使用されるキー バインドが、ターミナルがフォーカスされていない場合と同じ動作をするようにします。たとえば、'Ctrl+P' で Quick Open を起動します。
	// 
	// &nbsp;
	// 
	// 既定では、多くのコマンドがスキップされます。既定値をオーバーライドし、代わりにそのコマンドのキー バインドをシェルに渡すには、先頭に '-' 文字が付いているコマンドを追加します。たとえば、'-workbench.action.quickOpen' を追加して、'Ctrl+P' でシェルにアクセスできるようにします。
	// 
	// &nbsp;
	// 
	// 既定でスキップされる以下のコマンドの一覧は、設定エディターで表示したときには切り詰められます。完全な一覧を表示するには、下の一覧から最初のコマンドを [既定の設定の JSON を開く](command:workbench.action.openRawDefaultSettings '既定の設定 (JSON) を開く') して検索します。
	// 
	// &nbsp;
	// 
	// 既定でスキップされるコマンド:
	// 
	// - editor.action.toggleTabFocusMode
	// - notifications.hideList
	// - notifications.hideToasts
	// - workbench.action.debug.continue
	// - workbench.action.debug.pause
	// - workbench.action.debug.restart
	// - workbench.action.debug.run
	// - workbench.action.debug.start
	// - workbench.action.debug.stepInto
	// - workbench.action.debug.stepOut
	// - workbench.action.debug.stepOver
	// - workbench.action.debug.stop
	// - workbench.action.firstEditorInGroup
	// - workbench.action.focusActiveEditorGroup
	// - workbench.action.focusEighthEditorGroup
	// - workbench.action.focusFifthEditorGroup
	// - workbench.action.focusFirstEditorGroup
	// - workbench.action.focusFourthEditorGroup
	// - workbench.action.focusLastEditorGroup
	// - workbench.action.focusNextPart
	// - workbench.action.focusPreviousPart
	// - workbench.action.focusSecondEditorGroup
	// - workbench.action.focusSeventhEditorGroup
	// - workbench.action.focusSixthEditorGroup
	// - workbench.action.focusThirdEditorGroup
	// - workbench.action.lastEditorInGroup
	// - workbench.action.navigateDown
	// - workbench.action.navigateLeft
	// - workbench.action.navigateRight
	// - workbench.action.navigateUp
	// - workbench.action.nextEditor
	// - workbench.action.nextEditorInGroup
	// - workbench.action.nextPanelView
	// - workbench.action.nextSideBarView
	// - workbench.action.openNextRecentlyUsedEditor
	// - workbench.action.openNextRecentlyUsedEditorInGroup
	// - workbench.action.openPreviousRecentlyUsedEditor
	// - workbench.action.openPreviousRecentlyUsedEditorInGroup
	// - workbench.action.previousEditor
	// - workbench.action.previousEditorInGroup
	// - workbench.action.previousPanelView
	// - workbench.action.previousSideBarView
	// - workbench.action.quickOpen
	// - workbench.action.quickOpenLeastRecentlyUsedEditor
	// - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenPreviousEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenView
	// - workbench.action.showCommands
	// - workbench.action.tasks.build
	// - workbench.action.tasks.reRunTask
	// - workbench.action.tasks.restartTask
	// - workbench.action.tasks.runTask
	// - workbench.action.tasks.showLog
	// - workbench.action.tasks.showTasks
	// - workbench.action.tasks.terminate
	// - workbench.action.tasks.test
	// - workbench.action.terminal.clear
	// - workbench.action.terminal.clearSelection
	// - workbench.action.terminal.copySelection
	// - workbench.action.terminal.deleteToLineStart
	// - workbench.action.terminal.deleteWordLeft
	// - workbench.action.terminal.deleteWordRight
	// - workbench.action.terminal.findNext
	// - workbench.action.terminal.findPrevious
	// - workbench.action.terminal.focus
	// - workbench.action.terminal.focusAtIndex1
	// - workbench.action.terminal.focusAtIndex2
	// - workbench.action.terminal.focusAtIndex3
	// - workbench.action.terminal.focusAtIndex4
	// - workbench.action.terminal.focusAtIndex5
	// - workbench.action.terminal.focusAtIndex6
	// - workbench.action.terminal.focusAtIndex7
	// - workbench.action.terminal.focusAtIndex8
	// - workbench.action.terminal.focusAtIndex9
	// - workbench.action.terminal.focusFind
	// - workbench.action.terminal.focusNext
	// - workbench.action.terminal.focusNextPane
	// - workbench.action.terminal.focusPrevious
	// - workbench.action.terminal.focusPreviousPane
	// - workbench.action.terminal.hideFind
	// - workbench.action.terminal.kill
	// - workbench.action.terminal.killEditor
	// - workbench.action.terminal.moveToEditor
	// - workbench.action.terminal.moveToLineEnd
	// - workbench.action.terminal.moveToLineStart
	// - workbench.action.terminal.moveToTerminalPanel
	// - workbench.action.terminal.navigationModeExit
	// - workbench.action.terminal.navigationModeFocusNext
	// - workbench.action.terminal.navigationModeFocusPrevious
	// - workbench.action.terminal.new
	// - workbench.action.terminal.newInActiveWorkspace
	// - workbench.action.terminal.paste
	// - workbench.action.terminal.pasteSelection
	// - workbench.action.terminal.resizePaneDown
	// - workbench.action.terminal.resizePaneLeft
	// - workbench.action.terminal.resizePaneRight
	// - workbench.action.terminal.resizePaneUp
	// - workbench.action.terminal.runActiveFile
	// - workbench.action.terminal.runSelectedText
	// - workbench.action.terminal.scrollDown
	// - workbench.action.terminal.scrollDownPage
	// - workbench.action.terminal.scrollToBottom
	// - workbench.action.terminal.scrollToNextCommand
	// - workbench.action.terminal.scrollToPreviousCommand
	// - workbench.action.terminal.scrollToTop
	// - workbench.action.terminal.scrollUp
	// - workbench.action.terminal.scrollUpPage
	// - workbench.action.terminal.selectAll
	// - workbench.action.terminal.selectToNextCommand
	// - workbench.action.terminal.selectToNextLine
	// - workbench.action.terminal.selectToPreviousCommand
	// - workbench.action.terminal.selectToPreviousLine
	// - workbench.action.terminal.sendSequence
	// - workbench.action.terminal.sizeToContentWidth
	// - workbench.action.terminal.split
	// - workbench.action.terminal.splitInActiveWorkspace
	// - workbench.action.terminal.toggleFindCaseSensitive
	// - workbench.action.terminal.toggleFindRegex
	// - workbench.action.terminal.toggleFindWholeWord
	// - workbench.action.terminal.toggleTerminal
	// - workbench.action.toggleFullScreen
	// - workbench.action.toggleMaximizedPanel
	// - workbench.action.togglePanel
	"terminal.integrated.commandsToSkipShell": [],

	// アクティブなターミナル セッションがある場合に、ウィンドウを閉じたときに確認を行うかどうかを制御します。
	//  - never: 確認しません。
	//  - always: ターミナルがあるかどうか常に確認します。
	//  - hasChildProcesses: 子プロセスがあるターミナルがあるかどうかを確認します。
	"terminal.integrated.confirmOnExit": "never",

	// 子プロセスがある場合にターミナルの強制終了を確認するかどうかを制御します。エディターに設定すると、子プロセスがある場合、エディター領域のターミナルは変更済みとしてマークされます。子プロセスの検出は、シェルの子プロセスとしてプロセスを実行しない Git Bash のようなシェルでは適切に機能しない可能性があることに注意してください。
	//  - never: 確認しません。
	//  - editor: ターミナルがエディター内にあるかどうかを確認します。
	//  - panel: ターミナルがパネル内にあるかどうかを確認します。
	//  - always: ターミナルがエディターとパネルのどちらにあるかを確認します。
	"terminal.integrated.confirmOnKill": "editor",

	// ターミナルで選択したテキストをクリップボードにコピーするかどうかを制御します。
	"terminal.integrated.copyOnSelection": false,

	// ターミナルでカーソルを点滅させるかどうかを制御します。
	"terminal.integrated.cursorBlinking": false,

	// ターミナル カーソルのスタイルを制御します。
	"terminal.integrated.cursorStyle": "block",

	// #terminal.integrated.cursorStyle#' が 'line' に設定されているときに、カーソルの幅を制御します。
	"terminal.integrated.cursorWidth": 1,

	// フォントを使用する代わりに、ブロック要素およびボックス描画文字のカスタム グリフを描画するかどうか。通常は、連続した直線を使用した方が適切なレンダリングを行います。これは DOM レンダラーでは動作しないことにご注意ください
	"terminal.integrated.customGlyphs": true,

	// ターミナルが起動される明示的な開始パスです。これは、シェル プロセスの現在の作業ディレクトリ (cwd) として使用されます。これは特に、ルート ディレクトリが便利な cwd でない場合にワークスペースの設定で役立ちます。
	"terminal.integrated.cwd": "",

	// 新規に作成されたターミナルの表示場所を制御します。
	//  - editor: エディターでのターミナルの作成
	//  - view: ターミナル ビューでのターミナルの作成
	"terminal.integrated.defaultLocation": "view",

	// Linux で使用される既定のプロファイルです。`terminal.integrated.shell.linux` または `terminal.integrated.shellArgs.linux` のいずれかが設定されている場合、現在この設定は無視されます。
	"terminal.integrated.defaultProfile.linux": null,

	// MacOS で使用される既定のプロファイルです。`terminal.integrated.shell.osx` または `terminal.integrated.shellArgs.osx` のいずれかが設定されている場合、現在この設定は無視されます。
	"terminal.integrated.defaultProfile.osx": null,

	// Windows で使用される既定のプロファイルです。`terminal.integrated.shell.windows` または `terminal.integrated.shellArgs.windows` のいずれかが設定されている場合、現在この設定は無視されます。
	//  - PowerShell: $(terminal-powershell) PowerShell
	// - path: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	//  - Command Prompt: $(terminal-cmd) Command Prompt
	// - path: C:\Windows\System32\cmd.exe
	// - args: []
	//  - JavaScript Debug Terminal: $($(debug)) JavaScript Debug Terminal
	// - extensionIdenfifier: ms-vscode.js-debug
	"terminal.integrated.defaultProfile.windows": null,

	// '$LANG' 環境変数を検出して UTF-8 準拠のオプションに設定するかどうかを制御します。これは、VS Code のターミナルでは、シェルからのデータで UTF-8 エンコードのみがサポートされるためです。
	//  - auto: 既存の変数が存在しないか、または `'.UTF-8'` で終わっていない場合に、`$LANG` 環境変数を設定します。
	//  - off: $LANG' 環境変数は設定しないでください。
	//  - on: 常に '$LANG' 環境変数を設定します。
	"terminal.integrated.detectLocale": "auto",

	// ターミナルの太字のテキストで常に "明るい" ANSI 色のバリエーションを使用するかどうかを制御します。
	"terminal.integrated.drawBoldTextInBrightColors": true,

	// 端末のベルを有効にするかどうかを制御します。これは、ターミナル名の横に視覚的ベルで表示されます。
	"terminal.integrated.enableBell": false,

	// ターミナルのファイル リンクを有効にするかどうかを指定します。各ファイルのリンクがファイル システムに対して確認されるため、特にネットワーク ドライブ上での作業時にリンクの動作が低速になることがあります。この変更は、新しいターミナルでのみ有効になります。
	"terminal.integrated.enableFileLinks": true,

	// ウィンドウの再読み込み時にワークスペースのターミナル セッションを保持します。
	"terminal.integrated.enablePersistentSessions": true,

	// Linux 上のターミナルで使用される VS Code プロセスに追加される環境変数を含むオブジェクト。環境変数を削除するには、'null' に設定します。
	"terminal.integrated.env.linux": {},

	// macOS 上のターミナルで使用される VS Code プロセスに追加される環境変数を含むオブジェクトです。環境変数を削除するには、'null' に設定します。
	"terminal.integrated.env.osx": {},

	// Windows 上のターミナルで使用される VS Code プロセスに追加される環境変数を含むオブジェクトです。環境変数を削除するには、'null' に設定します。
	"terminal.integrated.env.windows": {},

	// 各ターミナルに環境変更インジケーターを表示するかどうかを指定します。これは、拡張機能によってターミナルの環境が変更されたかどうか、または変更を加えたいかどうかを示します。
	//  - off: インジケーターを無効にします。
	//  - on: インジケーターを有効にします。
	//  - warnonly: ターミナルの環境が「古く」なった場合にのみ警告インジケーターを表示します。これは、ターミナルの環境が拡張機能によって変更されたことを示す情報インジケーターではありません。
	"terminal.integrated.environmentChangesIndicator": "warnonly",

	// 拡張機能が環境に参加する必要があり、まだ対話が行われていない場合に、自動的に端末を再起動するかどうか。
	"terminal.integrated.environmentChangesRelaunch": true,

	// リンクが検出されるタイミングを向上させ、エディターでの共有リンクの検出を有効にすることにより、ターミナルのリンク検出を改善するための試験的な設定です。現在、この機能は Web リンクのみをサポートしています。
	"terminal.integrated.experimentalLinkProvider": true,

	// 'Alt' キーを押した時のスクロール速度の乗数。
	"terminal.integrated.fastScrollSensitivity": 5,

	// ターミナルのフォント ファミリを制御します。既定では、'#editor.fontFamily#' の値です。
	"terminal.integrated.fontFamily": "",

	// ターミナルのフォント サイズをピクセル単位で制御します。
	"terminal.integrated.fontSize": 14,

	// 端末内で太字以外のテキストに使用するフォントの太さ。"normal" と "bold" のキーワード、または 1 から 1000 の間の数字を受け入れます。
	"terminal.integrated.fontWeight": "normal",

	// 端末内で太字のテキストに使用するフォントの太さ。"normal" と "bold" のキーワード、または 1 から 1000 の間の数字を受け入れます。
	"terminal.integrated.fontWeightBold": "bold",

	// ターミナルで GPU を利用してレンダリングを行うかどうかを制御します。
	//  - auto: 最適なエクスペリエンスを提供するレンダラーを VS Code で検出できるようにします。
	//  - on: ターミナル内の GPU アクセラレーションを有効にします。
	//  - off: ターミナル内の GPU アクセラレーションを無効にします。
	//  - canvas: ターミナル内のフォールバック キャンバス レンダラーを使用します。これは、webgl の代わりに 2D コンテキストを使用しているため、一部のシステムではこちらの方が適している場合があります。
	"terminal.integrated.gpuAcceleration": "auto",

	// プロセスを無視するための個別設定を提供する構成は可能
	"terminal.integrated.ignoreProcessNames": [
		"starship",
		"oh-my-posh",
		"bash",
		"zsh"
	],

	// 新しいシェルがVS Codeから環境を継承する必要があるかどうか。これにより、ログイン シェルがソースとなり、$PATHおよびその他の開発変数が初期化される可能性があります。これは Windows には影響しません。
	"terminal.integrated.inheritEnv": true,

	// ターミナルの文字間隔を制御します。これは、文字間に追加する追加のピクセルの量を表す整数値です。
	"terminal.integrated.letterSpacing": 0,

	// ターミナルの行の高さを制御します。この数にターミナルのフォント サイズを掛けて、実際の行の高さをピクセル単位で算出します。
	"terminal.integrated.lineHeight": 1,

	// 試験段階: これらのプログラム名のいずれかがターミナル タイトルに見つかったとき、ローカル エコーは無効になります。
	"terminal.integrated.localEchoExcludePrograms": [
		"vim",
		"vi",
		"nano",
		"tmux"
	],

	// 試験的: ネットワーク遅延の長さ (ミリ秒単位)。ローカルの編集内容はサーバーの確認を待たずに端末にエコーされます。'0' の場合ローカル エコーは常にオンになり、'-1' の場合は無効になります。
	"terminal.integrated.localEchoLatencyThreshold": 30,

	// 試験的: ローカル エコー テキストの端末スタイル。フォント スタイルまたは RGB カラー。
	"terminal.integrated.localEchoStyle": "dim",

	// macOS で option キーを押しながらクリックしたときに選択を強制するかどうかを制御します。これにより、標準 (行) の選択が強制され、列選択モードが使用されなくなります。これにより、たとえば tmux でマウス モードが有効になっている場合などに、通常のターミナル選択を使用してコピーと貼り付けを行うことができます。
	"terminal.integrated.macOptionClickForcesSelection": false,

	// option キーを macOS 上のターミナルの meta キーとして扱うかどうかを制御します。
	"terminal.integrated.macOptionIsMeta": false,

	// 各セルの前景色を設定すると、指定されたコントラスト比率に合うように変更されます。値の例:
	// 
	// -1: 既定値。何も実行しません。
	// -4.5: [WCAG AA コンプライアンス (最小)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html)。
	// -7: [WCAG AAA コンプライアンス (拡張)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html)。
	// -21: 黒地に白、白地に黒。
	"terminal.integrated.minimumContrastRatio": 1,

	// マウス ホイールのスクロール イベントの 'deltaY' で使用される乗数です。
	"terminal.integrated.mouseWheelScrollSensitivity": 1,

	// ターミナル プロセスをシャットダウンする必要がある場合 (ウィンドウやアプリケーションの終了時など)、以前のターミナル セッションの内容を復元し、次回ワークスペースを開いたときにプロセスを再作成するタイミングを決定します。プロセスの現在の作業ディレクトリの復元は、それがシェルでサポートされているかどうかによって異なります。
	//  - onExit: Windows または Linux で最後のウィンドウが閉じられた後、`workbench.action.quit` コマンドがトリガーされた場合 (コマンド パレット、キー バインド、メニュー) にプロセスの再活性化を行います。
	//  - onExitAndWindowClose: Windows または Linux で最後のウィンドウが閉じられた後、`workbench.action.quit` コマンドがトリガーされた場合 (コマンド パレット、キー バインド、メニュー)、またはウィンドウが閉じられた場合にプロセスの再活性化を行います。
	//  - never: ターミナル バッファーの復元や、プロセスの再作成を行わないでください。
	"terminal.integrated.persistentSessionReviveProcess": "onExit",

	// 永続的なターミナル セッションに再接続するときに復元される回線の最大数を制御します。これを増やすと、より多くのメモリを犠牲にしてスクロールバックの回線が復元され、起動時に端末への接続にかかる時間が長くなります。この設定を有効にするには、値を `terminal.integrated.scrollback` 以下に設定する必要があります。
	"terminal.integrated.persistentSessionScrollback": 100,

	// ターミナル ドロップダウンを使用して新しいターミナルを作成するときに表示する Linux プロファイルです。省略可能な `args` を使用して、`path` プロパティを手動で設定してください。
	// 
	// 既存のプロファイルを一覧から非表示にするには、プロファイルを `null` に設定してください。例: `"bash": null`。
	"terminal.integrated.profiles.linux": {
		"bash": {
			"path": "bash",
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh"
		},
		"fish": {
			"path": "fish"
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// ターミナル ドロップダウンを使用して新しいターミナルを作成するときに表示する macOS プロファイルです。省略可能な `args` を使用して、`path` プロパティを手動で設定してください。
	// 
	// 既存のプロファイルを一覧から非表示にするには、プロファイルを `null` に設定してください。例: `"bash": null`。
	"terminal.integrated.profiles.osx": {
		"bash": {
			"path": "bash",
			"args": [
				"-l"
			],
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh",
			"args": [
				"-l"
			]
		},
		"fish": {
			"path": "fish",
			"args": [
				"-l"
			]
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// ターミナル ドロップダウンを使用して新しいターミナルを作成するときに表示する Windows プロファイルです。シェルの場所を自動的に検出するには、`path` プロパティを使用してください。または、`source` プロパティを省略可能な `args` で手動で設定してください。
	// 
	// 既存のプロファイルを一覧から非表示にするには、プロファイルを `null` に設定してください。例: `"Ubuntu-20.04 (WSL)": null`。
	"terminal.integrated.profiles.windows": {
		"PowerShell": {
			"source": "PowerShell",
			"icon": "terminal-powershell"
		},
		"Command Prompt": {
			"path": [
				"${env:windir}\\Sysnative\\cmd.exe",
				"${env:windir}\\System32\\cmd.exe"
			],
			"args": [],
			"icon": "terminal-cmd"
		},
		"Git Bash": {
			"source": "Git Bash"
		}
	},

	// 右クリックに対するターミナルの反応を制御します。
	//  - default: コンテキスト メニューを表示します。
	//  - copyPaste: 選択範囲がある場合はコピーし、それ以外の場合は貼り付けます。
	//  - paste: 右クリック時に貼り付けます。
	//  - selectWord: カーソルの下にある単語を選択して、コンテキスト メニューを表示します。
	"terminal.integrated.rightClickBehavior": "copyPaste",

	// ターミナルがバッファーに保持する最大行数を制御します。
	"terminal.integrated.scrollback": 1000,

	// 大部分のキー バインドが、ワークベンチではなくターミナルにディスパッチされて、'#terminal.integrated.commandsToSkipShell#' がオーバーライドされます。これは微調整にも使用できます。
	"terminal.integrated.sendKeybindingsToShell": false,

	// これは推奨されていません。既定のシェルを構成するための新しい推奨方法は、`terminal.integrated.profiles.linux#` にターミナル プロファイルを作成し、そのプロファイル名を `#terminal.integrated.defaultProfile.linux` の既定値として設定することです。これは現在、新しいプロファイル設定より優先されていますが、将来は変更されます。
	// Linux 上でターミナルが使用するシェルのパスです。[シェルの構成に関する詳細情報] (https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
	"terminal.integrated.shell.linux": null,

	// これは推奨されていません。既定のシェルを構成するための新しい推奨方法は、`terminal.integrated.profiles.osx#` にターミナル プロファイルを作成し、そのプロファイル名を `#terminal.integrated.defaultProfile.osx` の既定値として設定することです。これは現在、新しいプロファイル設定より優先されていますが、将来は変更されます。
	// Mac OS 上でターミナルが使用するシェルのパスです。[シェルの構成に関する詳細情報] (https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
	"terminal.integrated.shell.osx": null,

	// これは推奨されていません。既定のシェルを構成するための新しい推奨方法は、`terminal.integrated.profiles.windows#` にターミナル プロファイルを作成し、そのプロファイル名を `#terminal.integrated.defaultProfile.windows` の既定値として設定することです。これは現在、新しいプロファイル設定より優先されていますが、将来は変更されます。
	// Windows 上でターミナルが使用するシェルのパスです。[シェルの構成に関する詳細情報] (https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
	"terminal.integrated.shell.windows": null,

	// これは推奨されていません。既定のシェルを構成するための新しい推奨方法は、`terminal.integrated.profiles.linux#` にターミナル プロファイルを作成し、そのプロファイル名を `#terminal.integrated.defaultProfile.linux` の既定値として設定することです。これは現在、新しいプロファイル設定より優先されていますが、将来は変更されます。
	// Linux ターミナルで使用するコマンドラインの引数。[シェルの構成についての詳細情報](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
	"terminal.integrated.shellArgs.linux": [],

	// これは推奨されていません。既定のシェルを構成するための新しい推奨方法は、`terminal.integrated.profiles.osx#` にターミナル プロファイルを作成し、そのプロファイル名を `#terminal.integrated.defaultProfile.osx` の既定値として設定することです。これは現在、新しいプロファイル設定より優先されていますが、将来は変更されます。
	// Mac OS ターミナルで使用するコマンドラインの引数。[シェルの構成についての詳細情報](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
	"terminal.integrated.shellArgs.osx": [
		"-l"
	],

	// これは推奨されていません。既定のシェルを構成するための新しい推奨方法は、`terminal.integrated.profiles.windows#` にターミナル プロファイルを作成し、そのプロファイル名を `#terminal.integrated.defaultProfile.windows` の既定値として設定することです。これは現在、新しいプロファイル設定より優先されていますが、将来は変更されます。
	// Windows ターミナルで使用するコマンドラインの引数。[シェルの構成についての詳細情報](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
	"terminal.integrated.shellArgs.windows": [],

	// 終了コードがゼロ以外の場合に、"ターミナルの処理が終了しました (終了コード: )" という警告を表示するかどうかを制御します。
	"terminal.integrated.showExitAlert": true,

	// ターミナル出力でリンクにホバーを表示するかどうか。
	"terminal.integrated.showLinkHover": true,

	// 分割ターミナルの開始点となる作業ディレクトリを制御します。
	//  - workspaceRoot: 新しい分割ターミナルでは、ワークスペースのルートが作業ディレクトリとして使用されます。マルチ ルートのワークスペースでは、どのルート フォルダーを使用するか選択できます。
	//  - initial: 新しい分割ターミナルでは、親ターミナルの起動時の作業ディレクトリが使用されます。
	//  - inherited: macOS と Linux では、新しい分割ターミナルは親ターミナルの作業ディレクトリを使用します。Windows では、初期の動作と同じになります。
	"terminal.integrated.splitCwd": "inherited",

	// タイトルの右側に表示されるターミナルの説明を制御します。変数は以下のコンテキストに基づいて置換されます。
	// - `${cwd}`: 現在のターミナルの作業ディレクトリ
	// - `${cwdFolder}`: 現在のターミナルの作業ディレクトリ。マルチ ルート ワークスペースの場合は表示され、または初期作業ディレクトリと値が異なる場合にはシングル ルート ワークスペースに表示されます。これは Windows では表示されません。
	// - `${workspaceFolder}`: ターミナルを起動したワークスペース
	// - `${local}`: リモート ワークスペース内のローカル ターミナルを示す
	// - `${process}`: ターミナル プロセスの名前
	// - `${separator}`: 値か固定のテキストで囲われたとき、条件付きの区切り記号 (" - ") を表示します。
	// - `${sequence}`: プロセスが xterm.js に指定した名前
	// - `${task}`: このターミナルがタスクに関連付けられていることを示す
	"terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",

	// ターミナル タブの状態がアニメーションをサポートするかどうかを制御します (例: 進行中のタスク)。
	"terminal.integrated.tabs.enableAnimation": true,

	// ターミナルの側面にターミナル タブを一覧として表示するかどうかを制御します。これを無効にすると、代わりにドロップダウンが表示されます。
	"terminal.integrated.tabs.enabled": true,

	// シングル クリックでタブのターミナルにフォーカスするかどうかを制御します。
	//  - singleClick: ターミナル タブをクリックした場合にターミナルにフォーカス
	//  - doubleClick: ターミナル タブをダブルクリックした場合にターミナルにフォーカス
	"terminal.integrated.tabs.focusMode": "doubleClick",

	// ターミナル タブ ビューが特定の条件下で非表示になるかどうかを制御します。
	//  - never: ターミナル タブ ビューを常に表示する
	//  - singleTerminal: ターミナルを1つだけ開いたときに、ターミナル タブ ビューを非表示にします
	//  - singleGroup: ターミナル グループを 1 つだけ開いた場合に、ターミナル タブ ビューを非表示にします
	"terminal.integrated.tabs.hideCondition": "singleTerminal",

	// ターミナル タブの場所を、実際のターミナルの左または右のいずれかに制御します。
	//  - left: ターミナルの左側にターミナル タブ ビューを表示する
	//  - right: ターミナルの右側にターミナル タブ ビューを表示する
	"terminal.integrated.tabs.location": "right",

	// `terminal.integrated.title` および `terminal.integrated.description` で使用される区切り記号。
	"terminal.integrated.tabs.separator": " - ",

	// 新しいターミナル ボタンの横にターミナルの分割ボタンと強制終了ボタンを表示するかどうかを制御します。
	//  - always: 常にアクションを表示する
	//  - singleTerminal: 唯一のターミナルが開かれている場合にアクションを表示する
	//  - singleTerminalOrNarrow: 唯一のターミナルが開かれているか、タブ ビューがその狭義のテキストなし状態である場合にアクションを表示する
	//  - never: アクションを表示しない
	"terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",

	// アクティブなターミナル情報を表示します。これは、タブ内にタイトルが表示されない場合に特に役立ちます。
	//  - always: アクティブなターミナルを常に表示する
	//  - singleTerminal: アクティブなターミナルが開かれている唯一のターミナルを表示する
	//  - singleTerminalOrNarrow: アクティブなターミナルが開かれている唯一のターミナルを表示するか、タブ ビューがその狭義のテキストなし状態である場合
	//  - never: アクティブなターミナルを常に非表示にする
	"terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",

	// ターミナル タイトルを制御します。変数は以下のコンテキストに基づいて置換されます。
	// - `${cwd}`: 現在のターミナルの作業ディレクトリ
	// - `${cwdFolder}`: 現在のターミナルの作業ディレクトリ。マルチ ルート ワークスペースの場合は表示され、または初期作業ディレクトリと値が異なる場合にはシングル ルート ワークスペースに表示されます。これは Windows では表示されません。
	// - `${workspaceFolder}`: ターミナルを起動したワークスペース
	// - `${local}`: リモート ワークスペース内のローカル ターミナルを示す
	// - `${process}`: ターミナル プロセスの名前
	// - `${separator}`: 値か固定のテキストで囲われたとき、条件付きの区切り記号 (" - ") を表示します。
	// - `${sequence}`: プロセスが xterm.js に指定した名前
	// - `${task}`: このターミナルがタスクに関連付けられていることを示す
	"terminal.integrated.tabs.title": "${process}",

	// ターミナルでの文字幅を評価するときに使用する Unicode のバージョンを制御します。絵文字や他のワイド文字で占める領域の大きさが正しくない場合や、バックスペースによる削除の量が多すぎるか少なすぎる場合には、この設定を微調整してみてください。
	//  - 6: バージョン 6 の Unicode。これは古いバージョンであり、古いシステムで適切に動作するはずです。
	//  - 11: バージョン 11 の Unicode。このバージョンでは、Unicode の最新バージョンを使用する最新のシステムでのサポートが向上しています。
	"terminal.integrated.unicodeVersion": "11",

	// ターミナルのドロップダウンに WSL ディストリビューションを表示するかどうかを制御します
	"terminal.integrated.useWslProfiles": true,

	// Windows ターミナル プロセス通信に ConPTY を使用するかどうかを指定します (Windows 10 のビルド番号 18309 以上が必要です)。これが false の場合は、winpty が使用されます。
	"terminal.integrated.windowsEnableConpty": true,

	// ダブルクリックによる単語選択機能で単語区切り記号として扱われるすべての文字を含む文字列。
	"terminal.integrated.wordSeparators": " ()[]{}',\"`─‘’",

	// ファイルを開くとき、問題ビューに自動的にそのファイルを表示するかどうかを制御します
	"problems.autoReveal": true,

	// ファイルとフォルダーのエラーと警告を表示します。
	"problems.decorations.enabled": true,

	// 有効にすると、現在発生している問題がステータス バーに表示されます。
	"problems.showCurrentInStatus": false,

	// ナビゲーション階層リンクを有効/無効にします。
	"breadcrumbs.enabled": true,

	// 階層リンク ビューでファイル パスをどのように表示するかどうかを制御します。
	//  - on: 階層リンク ビューでファイル パスを表示します。
	//  - off: 階層リンク ビューでファイル パスを表示しません。
	//  - last: 階層リンク ビューでファイル パスの最後の要素のみを表示します。
	"breadcrumbs.filePath": "on",

	// 階層リンク項目をアイコンでレンダリングします。
	"breadcrumbs.icons": true,

	// 有効にすると、階層リンクに '配列' 記号が表示されます。
	"breadcrumbs.showArrays": true,

	// 有効にすると、階層リンクに `ブール型` 記号が表示されます。
	"breadcrumbs.showBooleans": true,

	// 有効にすると、階層リンクに `クラス` 記号が表示されます。
	"breadcrumbs.showClasses": true,

	// 有効にすると、階層リンクに `定数` の記号が表示されます。
	"breadcrumbs.showConstants": true,

	// 有効にすると、階層リンクに 'コンストラクター' 記号が表示されます。
	"breadcrumbs.showConstructors": true,

	// 有効にすると、階層リンクに `enumMember` 記号が表示されます。
	"breadcrumbs.showEnumMembers": true,

	// 有効にすると、階層リンクに '列挙型' 記号が表示されます。
	"breadcrumbs.showEnums": true,

	// 有効にすると、階層リンクに 'イベント' 記号が表示されます。
	"breadcrumbs.showEvents": true,

	// 有効にすると、階層リンクに `フィールド` 記号が表示されます。
	"breadcrumbs.showFields": true,

	// 有効にすると、階層リンクに `ファイル` 記号が表示されます。
	"breadcrumbs.showFiles": true,

	// 有効にすると、階層リンクに '関数' 記号が表示されます。
	"breadcrumbs.showFunctions": true,

	// 有効にすると、階層リンクに `インターフェイス` 記号が表示されます。
	"breadcrumbs.showInterfaces": true,

	// 有効にすると、階層リンクに `キー` 記号が表示されます。
	"breadcrumbs.showKeys": true,

	// 有効にすると、階層リンクに `メソッド` 記号が表示されます。
	"breadcrumbs.showMethods": true,

	// 有効にすると、階層リンクに `モジュール` 記号が表示されます。
	"breadcrumbs.showModules": true,

	// 有効にすると、階層リンクに `名前空間` 記号が表示されます。
	"breadcrumbs.showNamespaces": true,

	// 有効にすると、階層リンクに `null` 記号が表示されます。
	"breadcrumbs.showNull": true,

	// 有効にすると、階層リンクに `数値` 記号が表示されます。
	"breadcrumbs.showNumbers": true,

	// 有効にすると、階層リンクに `オブジェクト` 記号が表示されます。
	"breadcrumbs.showObjects": true,

	// 有効にすると、階層リンクに `演算子` 記号が表示されます。
	"breadcrumbs.showOperators": true,

	// 有効にすると、階層リンクに 'パッケージ' 記号が表示されます。
	"breadcrumbs.showPackages": true,

	// 有効にすると、階層リンクに 'プロパティ' 記号が表示されます。
	"breadcrumbs.showProperties": true,

	// 有効にすると、階層リンクに `文字列` 記号が表示されます。
	"breadcrumbs.showStrings": true,

	// 有効にすると、階層リンクに `構造体` 記号が表示されます。
	"breadcrumbs.showStructs": true,

	// 有効にすると、階層リンクに 'typeParameter' 記号が表示されます。
	"breadcrumbs.showTypeParameters": true,

	// 有効にすると、階層リンクに `変数` 記号が表示されます。
	"breadcrumbs.showVariables": true,

	// 階層リンク ビューでシンボルをどのように表示するかどうかを制御します。
	//  - on: 階層リンク ビューですべてのシンボルを表示します。
	//  - off: 階層リンク ビューでシンボルを表示しません。
	//  - last: 階層リンク ビューで現在のシンボルのみを表示します。
	"breadcrumbs.symbolPath": "on",

	// 階層リンクのアウトライン ビューでシンボルを並び替える方法を制御します。
	//  - position: ファイル内での位置順にシンボルのアウトラインを表示します。
	//  - name: アルファベット順でシンボル アウトラインを表示します。
	//  - type: シンボルの種類の順番でシンボル アウトラインを表示します。
	"breadcrumbs.symbolSortOrder": "position",

	// この設定が false の場合、新しい設定の値に関係なくテレメトリは送信されません。`telemetry.telemetryLevel`設定に結合されているため、非推奨になりました。
	// クラッシュ レポートの収取を有効にします。これにより、安定性が向上します。
	// このオプションを有効にするには、再起動が必要です。
	"telemetry.enableCrashReporter": true,

	// この設定が false の場合、新しい設定の値に関係なくテレメトリは送信されません。`telemetry.telemetryLevel`設定を優先して非推奨になりました。
	// 診断データの収集を有効にします。これにより、Visual Studio Code の実行状況と改善が必要な箇所について理解を深めることができます。収集する情報とプライバシーに関する声明についての [Read more] (https://go.microsoft.com/fwlink/?LinkId=786907) をご覧ください。
	"telemetry.enableTelemetry": true,

	// 
	// すべてのコアおよびファースト パーティ拡張機能テレメトリを制御します。これにより、Visual Studio Codeのパフォーマンス、改善が必要な場所、および機能がどのように使用されているかをより深く理解するのに役立ちます。 [収集するデータ](https://aka.ms/vscode-telemetry) と[プライバシーに関する声明](https://go.microsoft.com/fwlink/?LinkId=786907) を参照してください。 クラッシュ レポートの変更を有効にするには、アプリケーションを完全に再起動する必要があります。
	// 
	// &nbsp;
	// 
	// 次の表は、各設定で送信されるデータの概要を示しています。
	// 
	// |       | クラッシュ レポート | エラー テレメトリ | 使用状況データ |
	// |:------|:---------------------:|:---------------:|:--------------:|
	// | all   |            ✓          |        ✓        |        ✓       |
	// | error |            ✓          |        ✓        |        -       |
	// | crash |            ✓          |        -        |        -       |
	// | off   |            -          |        -        |        -       |
	// 
	// 
	// &nbsp;
	// 
	// ****注:*** この設定が 'off' の場合、他のテレメトリ設定に関係なくテレメトリは送信されません。この設定が 'off' 以外に設定されていて、非推奨の設定でテレメトリが無効になっている場合、テレメトリは送信されません。*
	// 
	//  - all: 使用状況データ、エラー、クラッシュ レポートを送信します。
	//  - error: 一般的なエラー テレメトリとクラッシュ レポートを送信します。
	//  - crash: OS レベルのクラッシュ レポートを送信します。
	//  - off: すべての製品テレメトリを無効にします。
	"telemetry.telemetryLevel": "all",

	// アイコン付きでアウトライン要素を表示します。
	"outline.icons": true,

	// エラーと警告にバッジを使用します。
	"outline.problems.badges": true,

	// エラーと警告に色を使用します。
	"outline.problems.colors": true,

	// アウトライン要素にエラーと警告を表示します。
	"outline.problems.enabled": true,

	// 有効にすると、アウトラインに `配列` 記号が表示されます。
	"outline.showArrays": true,

	// 有効にすると、アウトラインに 'ブール型' 記号が表示されます。
	"outline.showBooleans": true,

	// 有効にすると、アウトラインに `クラス` 記号が表示されます。
	"outline.showClasses": true,

	// 有効にすると、アウトラインに `定数` 記号が表示されます。
	"outline.showConstants": true,

	// 有効にすると、アウトラインに `コンストラクター` 記号が表示されます。
	"outline.showConstructors": true,

	// 有効にすると、アウトラインに `enumMember` 記号が表示されます。
	"outline.showEnumMembers": true,

	// 有効にすると、アウトラインに '列挙型' 記号が表示されます。
	"outline.showEnums": true,

	// 有効にすると、アウトラインに 'イベント' 記号が表示されます。
	"outline.showEvents": true,

	// 有効にすると、アウトラインに `フィールド` 記号が表示されます。
	"outline.showFields": true,

	// 有効にすると、アウトラインに `ファイル` 記号が表示されます。
	"outline.showFiles": true,

	// 有効にすると、アウトラインに `関数` 記号が表示されます。
	"outline.showFunctions": true,

	// 有効にすると、アウトラインに `インターフェイス` 記号が表示されます。
	"outline.showInterfaces": true,

	// 有効にすると、アウトラインに 'キー' 記号が表示されます。
	"outline.showKeys": true,

	// 有効にすると、アウトラインに 'メソッド' 記号が表示されます。
	"outline.showMethods": true,

	// 有効にすると、アウトラインに `モジュール` 記号が表示されます。
	"outline.showModules": true,

	// 有効にすると、アウトラインに `名前空間` 記号が表示されます。
	"outline.showNamespaces": true,

	// 有効にすると、アウトラインに 'null' -記号が表示されます。
	"outline.showNull": true,

	// 有効にすると、アウトラインに '数値' 記号が表示されます。
	"outline.showNumbers": true,

	// 有効にすると、アウトラインに `オブジェクト` 記号が表示されます。
	"outline.showObjects": true,

	// 有効にすると、アウトラインに `演算子` 記号が表示されます。
	"outline.showOperators": true,

	// 有効にすると、アウトラインに `パッケージ` 記号が表示されます。
	"outline.showPackages": true,

	// 有効にすると、アウトラインに `プロパティ` 記号が表示されます。
	"outline.showProperties": true,

	// 有効にすると、アウトラインに `文字列` 記号が表示されます。
	"outline.showStrings": true,

	// 有効にすると、アウトラインに `構造体` 記号が表示されます。
	"outline.showStructs": true,

	// 有効にすると、アウトラインに `typeParameter` 記号が表示されます。
	"outline.showTypeParameters": true,

	// 有効にすると、アウトラインに `変数` 記号が表示されます。
	"outline.showVariables": true,

	// タイムライン ビューから除外する必要があるタイムライン ソースの配列です。
	"timeline.excludeSources": null,

	// 試験段階。リストの最後までスクロールしたとき、タイムライン ビューで次のページの項目を読み込むかどうかを制御します。
	"timeline.pageOnScroll": false,

	// タイムライン ビューで、既定の場合と、さらに項目を読み込む場合に表示する項目数。'null' (既定値) に設定すると、タイムライン ビューの表示可能な領域に基づいて自動的にページ サイズが選択されます。
	"timeline.pageSize": null,

	// [css] 言語の場合にオーバーライドされる設定を構成します。
	"[css]":  {
		"editor.suggest.insertMode": "replace"
	},

	// [django-html] 言語の場合にオーバーライドされる設定を構成します。
	"[django-html]":  {
		"editor.quickSuggestions": {
				"other": true,
				"comments": true,
				"strings": true
		}
	},

	// [dockercompose] 言語の場合にオーバーライドされる設定を構成します。
	"[dockercompose]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced"
	},

	// [dockerfile] 言語の場合にオーバーライドされる設定を構成します。
	"[dockerfile]":  {
		"editor.quickSuggestions": {
				"strings": true
		}
	},

	// [git-commit] 言語の場合にオーバーライドされる設定を構成します。
	"[git-commit]":  {
		"editor.rulers": [
				72
		],
		"workbench.editor.restoreViewState": false
	},

	// [git-rebase] 言語の場合にオーバーライドされる設定を構成します。
	"[git-rebase]":  {
		"workbench.editor.restoreViewState": false
	},

	// [go] 言語の場合にオーバーライドされる設定を構成します。
	"[go]":  {
		"editor.insertSpaces": false
	},

	// [handlebars] 言語の場合にオーバーライドされる設定を構成します。
	"[handlebars]":  {
		"editor.suggest.insertMode": "replace"
	},

	// [html] 言語の場合にオーバーライドされる設定を構成します。
	"[html]":  {
		"editor.suggest.insertMode": "replace"
	},

	// [java] 言語の場合にオーバーライドされる設定を構成します。
	"[java]":  {
		"editor.suggest.snippetsPreventQuickSuggestions": false
	},

	// [javascript] 言語の場合にオーバーライドされる設定を構成します。
	"[javascript]":  {
		"editor.maxTokenizationLineLength": 2500
	},

	// [json] 言語の場合にオーバーライドされる設定を構成します。
	"[json]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace"
	},

	// [jsonc] 言語の場合にオーバーライドされる設定を構成します。
	"[jsonc]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace"
	},

	// [less] 言語の場合にオーバーライドされる設定を構成します。
	"[less]":  {
		"editor.suggest.insertMode": "replace"
	},

	// [makefile] 言語の場合にオーバーライドされる設定を構成します。
	"[makefile]":  {
		"editor.insertSpaces": false
	},

	// [markdown] 言語の場合にオーバーライドされる設定を構成します。
	"[markdown]":  {
		"editor.wordWrap": "on",
		"editor.quickSuggestions": false
	},

	// [php] 言語の場合にオーバーライドされる設定を構成します。
	"[php]":  {
		"cSpell.fixSpellingWithRenameProvider": false
	},

	// [python] 言語の場合にオーバーライドされる設定を構成します。
	"[python]":  {
		"editor.wordBasedSuggestions": false
	},

	// [scss] 言語の場合にオーバーライドされる設定を構成します。
	"[scss]":  {
		"editor.suggest.insertMode": "replace"
	},

	// [search-result] 言語の場合にオーバーライドされる設定を構成します。
	"[search-result]":  {
		"editor.lineNumbers": "off"
	},

	// [shellscript] 言語の場合にオーバーライドされる設定を構成します。
	"[shellscript]":  {
		"files.eol": "\n"
	},

	// [yaml] 言語の場合にオーバーライドされる設定を構成します。
	"[yaml]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced"
	},

	// 有効にすると、新しい実行中のプロセスが検出され、リッスンしているポートが自動的に転送されます。この設定を無効にしても、すべてのポートの転送を防ぐわけではありません。無効にした場合でも、拡張機能は引き続きポートの転送が可能であり、一部の URL を開ことにより、ポートが引き続き転送されます。
	"remote.autoForwardPorts": true,

	// `remote.autoForwardPorts` が true の場合にポートが自動的に転送されるソースを設定します。Windows と Mac のリモートでは、`process` オプションは無効になり、`output` が使用されます。有効にするには、再度読み込む必要があります。
	//  - process: ポートは、開始済みで、ポートが含まれるプロセスを監視することによって検出されたときに自動的に転送されます。
	//  - output: ポートは、ターミナルとデバッグの出力を読み取ることによって検出されたときに自動的に転送されます。ポートを使用するすべてのプロセスで統合ターミナルまたはデバッグ コンソールに出力されるわけではないため、一部のポートは見逃されます。出力に基づいて転送されたポートは、再度読み込むか、ユーザーがポート ビューでポートを閉じない限り、"転送を解除" されることはありません。
	"remote.autoForwardPortsSource": "process",

	// 有効にすると、拡張機能がローカルにダウンロードされ、リモート上にインストールされます。
	"remote.downloadExtensionsLocally": false,

	// 拡張子の種類をオーバーライドします。'ui' 拡張機能はローカル マシンでインストールされて実行されますが、'workspace' 拡張機能はリモートで実行されます。この設定を使用して拡張機能の既定の種類をオーバーライドすることで、その拡張機能をローカルまたはリモートのいずれかでインストールして有効にするかどうかを指定します。
	"remote.extensionKind": {
		"pub.name": [
			"ui"
		]
	},

	// ポート転送に使用するローカル ホスト名を指定します。
	"remote.localPortHost": "localhost",

	// 設定 `remote.portsAttributes` からプロパティを取得しないすべてのポートに適用される既定のプロパティを設定します。例:
	// 
	// ```
	// {
	//   "onAutoForward": "ignore"
	// }
	// ```
	"remote.otherPortsAttributes": {},

	// 特定のポート番号が転送されるときに適用されるプロパティを設定します。例:
	// 
	// ```
	// "3000": {
	//   "label": "Application"
	// },
	// "40000-55000": {
	//   "onAutoForward": "ignore"
	// },
	// ".+\\/server.js": {
	//  "onAutoForward": "openPreview"
	// }
	// ```
	"remote.portsAttributes": {
		"443": {
			"protocol": "https"
		},
		"8443": {
			"protocol": "https"
		}
	},

	// ワークスペースで転送したポートを復元します。
	"remote.restoreForwardedPorts": true,

	// Emmet 省略記法を展開すべきでない言語の配列。
	"emmet.excludeLanguages": [
		"markdown"
	],

	// 各パスに Emmet の syntaxProfile や snippet ファイルを含めることができるパスの配列。
	// 競合が発生した場合、後のパスのプロファイルまたはスニペットが前のパスのプロファイルまたはスニペットを上書きします。
	// 詳細およびスニペット ファイルの例については、https://code.visualstudio.com/docs/editor/emmet を参照してください。
	"emmet.extensionsPath": [],

	// 既定ではサポートされていない言語の emmet 省略記法を有効にします。言語と Emmet でサポートされる言語との間のマッピングをこちらに追加してください。
	//  例: `{"vue-html": "html", "javascript": "javascriptreact"}`
	"emmet.includeLanguages": {},

	// `false` に設定すると、現在位置が emmet 省略記法の展開に有効かどうかを判別するためにファイル全体が解析されます。`true` に設定すると、CSS、SCSS、Less ファイルでの現在位置周辺のコンテンツのみが解析されます。
	"emmet.optimizeStylesheetParsing": true,

	// Emmet の一部のアクションやリゾルバーの動作の変更に使用される基本設定。
	"emmet.preferences": {},

	// 利用できる Emmet 省略記法を候補として表示します。スタイルシートや emmet.showExpandedAbbreviation を `"never"` に設定していると適用されません。
	"emmet.showAbbreviationSuggestions": true,

	// 展開された Emmet 省略形を候補として表示します。
	// オプション `"inMarkupAndStylesheetFilesOnly"` は、html、haml、jade、slim、xml、xsl、css、scss、sass、less、stylus に適用されます。
	// オプション `"always"` は、マークアップと css に関係なくファイルのすべての部分に適用されます。
	"emmet.showExpandedAbbreviation": "always",

	// `true` の場合、Emmet 候補をスニペットとして表示して `editor.snippetSuggestions` 設定に従ってそれらを並び替えます。
	"emmet.showSuggestionsAsSnippets": false,

	// 指定した構文に対してプロファイルを定義するか、特定の規則がある独自のプロファイルをご使用ください。
	"emmet.syntaxProfiles": {},

	// 有効にすると、TAB キーを押したときに Emmet 省略記法が展開されます。
	"emmet.triggerExpansionOnTab": false,

	// Emmet のスニペットで使用される変数。
	"emmet.variables": {},

	// 強制的なプッシュ (--force-with-lease の有無にかかわらず) を有効にするかどうかを制御します。
	"git.allowForcePush": false,

	// pre-commit と commit-msg フックを実行しないコミットを許可するかどうかを制御します。
	"git.allowNoVerifyCommit": false,

	// ステージ済み変更のリソース グループを常に表示します。
	"git.alwaysShowStagedChangesResourceGroup": false,

	// すべてのコミットのサインオフ フラグを制御します。
	"git.alwaysSignOff": false,

	// true に設定すると、現在の Git リポジトリの既定のリモートからコミットが自動的にフェッチされます。[すべて] に設定すると、すべてのリモートからフェッチされます。
	"git.autofetch": false,

	// `git.autofetch` が有効な場合の git の自動フェッチ間隔 (秒単位)。
	"git.autofetchPeriod": 180,

	// 自動更新の有効/無効。
	"git.autorefresh": true,

	// レポジトリを自動的に検出するかどうかを構成します。
	//  - true: 現在開いているフォルダーのサブフォルダーと、開いているファイルの親フォルダーの両方をスキャンします。
	//  - false: リポジトリの自動的なスキャンを無効にします。
	//  - subFolders: 現在開いているフォルダーのサブフォルダーをスキャンします。
	//  - openEditors: 開いているファイルの親フォルダーをスキャンします。
	"git.autoRepositoryDetection": true,

	// プルする前にすべての変更を一時退避し、プル成功後に復元します。
	"git.autoStash": false,

	// ブランチの並べ替え順序を制御します。
	"git.branchSortOrder": "committerdate",

	// 新しいブランチ名を検証するための正規表現。
	"git.branchValidationRegex": "",

	// 新しいブランチ名で空白文字を置換する文字。
	"git.branchWhitespaceChar": "-",

	// 'チェックアウト先...' を実行するとき、どの種類の Git 参照を一覧表示するか制御します。
	//  - local: ローカル ブランチ
	//  - tags: タグ
	//  - remote: リモート ブランチ
	"git.checkoutType": [
		"local",
		"remote",
		"tags"
	],

	// 'Git: Commit Empty' コマンドの空のコミットの作成を常に確認します。
	"git.confirmEmptyCommits": true,

	// 強制的なプッシュの前に確認を求めるかどうかを制御します。
	"git.confirmForcePush": true,

	// 確認せずにコミットする前に確認メッセージを表示するかどうかを制御します。
	"git.confirmNoVerifyCommit": true,

	// Git リポジトリを同期する前に確認します。
	"git.confirmSync": true,

	// Git カウント バッジを制御します。
	//  - all: すべての変更をカウントします。
	//  - tracked: 追跡済みの変更のみカウントします。
	//  - off: カウンターをオフにします。
	"git.countBadge": "all",

	// Git が配色とバッジをエクスプローラーと [開いているエディター] ビューに提供するかどうかを制御します。
	"git.decorations.enabled": true,

	// Git リポジトリをクローンする既定の場所。
	"git.defaultCloneDirectory": null,

	// git サブモジュールを自動的に検出するかどうかを制御します。
	"git.detectSubmodules": true,

	// 検出する git サブモジュール数の制限を制御します。
	"git.detectSubmodulesLimit": 10,

	// GPG または X.509 によるコミットの署名を有効にします。
	"git.enableCommitSigning": false,

	// Git が有効になっているかどうか。
	"git.enabled": true,

	// ステージされた変更がない場合はすべての変更をコミットします。
	"git.enableSmartCommit": false,

	// ステータス バーに Git Sync コマンドを表示するかどうかを制御します。
	"git.enableStatusBarSync": true,

	// 有効にすると、プル時にすべてのブランチをフェッチします。それ以外の場合は、現在のブランチだけをフェッチします。
	"git.fetchOnPull": false,

	// 同期コマンドを実行するときに、すべてのタグをフォロー プッシュします。
	"git.followTagsWhenSync": false,

	// This setting is now deprecated, please use `github.gitAuthentication` instead.
	// 
	"git.githubAuthentication": null,

	// 無視する git リポジトリの一覧。
	"git.ignoredRepositories": [],

	// 古い Git である警告を無視します。
	"git.ignoreLegacyWarning": false,

	// リポジトリ内に変更が多い場合の警告を無視します。
	"git.ignoreLimitWarning": false,

	// Git が見つからない場合の警告を無視します。
	"git.ignoreMissingGitWarning": false,

	// ブランチがプル時にリベースされた可能性があると思われる場合、警告を無視します。
	"git.ignoreRebaseWarning": false,

	// ファイル ツリーでのサブモジュールの変更を無視します。
	"git.ignoreSubmodules": false,

	// Git 2.25 - 2.26 が Windows にインストールされている場合は警告を無視します。
	"git.ignoreWindowsGit27Warning": false,

	// コミット メッセージの入力検証をいつ表示するかを制御します。
	"git.inputValidation": "warn",

	// 警告を表示するコミット メッセージの長さのしきい値を制御します。
	"git.inputValidationLength": 72,

	// 警告を表示するためのコミット メッセージの件名長のしきい値を制御します。'config.inputValidationLength' の値を継承する場合には設定解除します。
	"git.inputValidationSubjectLength": 50,

	// 複製後にリポジトリを自動的に開くかどうかを制御します。
	//  - always: 常に現在のウィンドウで開きます。
	//  - alwaysNewWindow: 常に新しいウィンドウで開きます。
	//  - whenNoFolderOpen: 開いているフォルダーがない場合は現在のウィンドウでのみ開きます。
	//  - prompt: 常にアクションを確認します。
	"git.openAfterClone": "prompt",

	// 変更をクリックすると差分エディターを開くかどうかを制御します。そうでなければ通常のエディターを開きます。
	"git.openDiffOnClick": true,

	// Git 実行可能ファイルのパスとファイル名 (例: Windows の場合は `C:\Program Files\Git\bin\git.exe`)。検索する複数のパスを含む文字列値の配列を指定することもできます。
	"git.path": null,

	// コミットの成功後、git コマンドを実行します。
	//  - none: コミット後、任意のコマンドを実行しません。
	//  - push: コミットの成功後、'Git Push' を実行します。
	//  - sync: コミットの成功後、'Git Sync' を実行します。
	"git.postCommitCommand": "none",

	// コミット前に Git が保存していないファイルを確認すべきかどうかを制御します。
	//  - always: 保存されていないファイルがないか確認します。
	//  - staged: 保存されていないステージング済みファイルのみを確認します。
	//  - never: このチェックを無効にします。
	"git.promptToSaveFilesBeforeCommit": "always",

	// 変更を一時退避する前に Git で保存していないファイルを確認すべきかどうかを制御します。
	//  - always: 保存されていないファイルがないか確認します。
	//  - staged: 保存されていないステージング済みファイルのみを確認します。
	//  - never: このチェックを無効にします。
	"git.promptToSaveFilesBeforeStash": "always",

	// フェッチ時に取り除きます。
	"git.pruneOnFetch": false,

	// プルするときにすべてのタグをフェッチします。
	"git.pullTags": true,

	// 同期コマンドを実行するときに、Git リベースを強制します。
	"git.rebaseWhenSync": false,

	// 明示的な Git ユーザーの構成が必要かどうかを制御するか、指定されていない場合は Git による推測を許可します。
	"git.requireGitUserConfig": true,

	// Git リポジトリを検索するパスのリスト。
	"git.scanRepositories": [],

	// Git ソース管理パネルにコミットの入力を表示するかどうかを制御します。
	"git.showCommitInput": true,

	// Git 変更の表示内にインラインのファイルを開くアクションを表示するかどうかを制御します。
	"git.showInlineOpenFileAction": true,

	// Git 操作の進行状況を表示するかどうかを制御します。
	"git.showProgress": true,

	// プッシュが成功したときに通知を表示するかどうかを制御します。
	"git.showPushSuccessNotification": false,

	// 未公開のコミットがある場合に、同期または公開するアクション ボタンを表示するかどうかを制御します。
	//  - always: 未公開のコミットがある場合、常にアクション ボタンを表示します。
	//  - whenEmpty: 他に変更がなく、未公開のコミットがある場合にのみ、アクション ボタンを表示します。
	//  - never: アクション ボタンを表示しません。
	"git.showUnpublishedCommitsButton": "whenEmpty",

	// スマート コミットで変更を自動的にステージングするかどうかを制御します。
	//  - all: すべての変更を自動的にステージします。
	//  - tracked: 自動的にステージングされた変更箇所のみ。
	"git.smartCommitChanges": "all",

	// Git 状態コマンドで解析できる変更回数の制限方法を制御します。0 に設定すると制限なしにすることができます。
	"git.statusLimit": 10000,

	// スマート コミットを有効にすることを推奨します (ステージング済み変更がない場合、すべての変更をコミットします)。
	"git.suggestSmartCommit": true,

	// ユーザーが操作を中止できる同期アクションの実行時に通知が表示されるかどうかを制御します。
	"git.supportCancellation": false,

	// 統合ターミナルで生成される Git プロセスの認証ハンドラーとして VS Code を有効にするかどうかを制御します。注意: この設定の変更を反映させるには、ターミナルを再起動する必要があります。
	"git.terminalAuthentication": true,

	// タイムライン ビューでアイテムに使用する日付を制御します。
	//  - committed: コミットされた日付を使用する
	//  - authored: 作成日を使用する
	"git.timeline.date": "committed",

	// タイムライン ビューにコミット作成者を表示するかどうかを制御します。
	"git.timeline.showAuthor": true,

	// 追跡対象外の変更の動作を制御します。
	//  - mixed: 追跡対象および追跡対象外のすべての変更は、一緒に表示され、均等に動作します。
	//  - separate: 追跡されていない変更は、ソース管理ビューに個別に表示されます。それらは、複数のアクションからも除外されます。
	//  - hidden: 追跡対象外の変更は非表示になり、複数のアクションから除外されます。
	"git.untrackedChanges": "mixed",

	// コミット入力ボックスからのメッセージを既定の stash メッセージとして使用するかどうかを制御します。
	"git.useCommitInputAsStashMessage": false,

	// force プッシュより安全な force-with-lease 方式を使用するかどうかを制御します。
	"git.useForcePushWithLease": true,

	// VS Code 内で Git コマンドの自動 GitHub 認証を有効にするかどうかを制御します。
	"github.gitAuthentication": true,

	// URI of your GitHub Enterprise Instance
	"github-enterprise.uri": "",

	// Grunt タスク検出の有効化を制御します。Grunt タスク検出を行うと、開いているワークスペース内のファイルが実行される可能性があります。
	"grunt.autoDetect": "off",

	// Gulp タスク検出の有効化を制御します。Gulp タスク検出を行うと、開いているワークスペース内のファイルが実行される可能性があります。
	"gulp.autoDetect": "off",

	// Jake タスク検出の有効化を制御します。Jake タスク検出を行うと、開いているワークスペース内のファイルが実行される可能性があります。
	"jake.autoDetect": "off",

	// 組み込みのマークダウン プレビューでの数式のレンダリングを有効/無効にします。
	"markdown.math.enabled": true,

	// マージ競合を解決した後で、次のマージの競合に自動的に移動するかどうか。
	"merge-conflict.autoNavigateNextConflict.enabled": false,

	// エディター内のマージ競合ブロックのコード レンズを作成します。
	"merge-conflict.codeLens.enabled": true,

	// エディター内のマージ競合ブロック用デコレータを作成します。
	"merge-conflict.decorators.enabled": true,

	// マージの競合の変更を比較するときに、差分ビューを開く場所を制御します。
	//  - Current: 現在のエディター グループで差分ビューを開きます。
	//  - Beside: 現在のエディター グループの隣に差分ビューを開きます。
	//  - Below: 現在のエディター グループの下にある差分ビューを開きます。
	"merge-conflict.diffViewPosition": "Current",

	// Configures which processes to automatically attach and debug when `debug.node.autoAttach` is on. A Node process launched with the `--inspect` flag will always be attached to, regardless of this setting.
	//  - always: Auto attach to every Node.js process launched in the terminal.
	//  - smart: Auto attach when running scripts that aren't in a node_modules folder.
	//  - onlyWithFlag: Only auto attach when the `--inspect` is given.
	//  - disabled: Auto attach is disabled and not shown in status bar.
	"debug.javascript.autoAttachFilter": "disabled",

	// Configures glob patterns for determining when to attach in "smart" `debug.javascript.autoAttachFilter` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners. [Read more on the VS Code docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).
	"debug.javascript.autoAttachSmartPattern": [
		"${workspaceFolder}/**",
		"!**/node_modules/**",
		"**/$KNOWN_TOOLS$/**"
	],

	// Configures whether property getters will be expanded automatically. If this is false, the getter will appear as `get propertyName` and will only be evaluated when you click on it.
	"debug.javascript.autoExpandGetters": false,

	// When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.
	"debug.javascript.automaticallyTunnelRemoteServer": true,

	// Whether to stop when conditional breakpoints throw an error.
	"debug.javascript.breakOnConditionalError": false,

	// Where a "Run" and "Debug" code lens should be shown in your npm scripts. It may be on "all", scripts, on "top" of the script section, or "never".
	"debug.javascript.codelens.npmScripts": "top",

	// Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to "off" to disable this behavior, or "always" to enable debugging in all terminals.
	"debug.javascript.debugByLinkOptions": "on",

	// The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.
	"debug.javascript.defaultRuntimeExecutable": {
		"pwa-node": "node"
	},

	// Default options used when debugging a process through the `Debug: Attach to Node.js Process` command
	"debug.javascript.pickAndAttachOptions": {},

	// Request options to use when loading resources, such as source maps, in the debugger. You may need to configure this if your sourcemaps require authentication or use a self-signed certificate, for instance. Options are used to create a request using the [`got`](https://github.com/sindresorhus/got) library.
	// 
	// A common case to disable certificate verification can be done by passing `{ "https": { "rejectUnauthorized": false } }`.
	"debug.javascript.resourceRequestOptions": {},

	// Whether to suggest pretty printing JavaScript code that looks minified when you step into it.
	"debug.javascript.suggestPrettyPrinting": true,

	// Default launch options for the JavaScript debug terminal and npm scripts.
	"debug.javascript.terminalOptions": {},

	// Configures whether sourcemapped file where the original file can't be read will automatically be unmapped. If this is false (default), a prompt is shown.
	"debug.javascript.unmapMissingSources": false,

	// Controls whether 'Peek References' or 'Find References' is invoked when selecting code lens references
	//  - peek: Show references in peek editor.
	//  - view: Show references in separate view.
	"references.preferredLocation": "peek",

	// npm スクリプトを自動的に検出するかどうかを制御します。
	"npm.autoDetect": "on",

	// エクスプローラー コンテキスト メニューから、フォルダーに含まれる NPM スクリプトの実行を有効にします。
	"npm.enableRunFromFolder": false,

	// The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.
	// 最上位の 'package.json' ファイルがない場合は、npm スクリプトのエクスプローラー ビューを有効にします。
	"npm.enableScriptExplorer": false,

	// 自動スクリプト検出から除外するフォルダーの glob パターンを構成します。
	"npm.exclude": "",

	// https://registry.npmjs.org および https://registry.bower.io からデータをフェッチして、npm 依存関係に対してオート コンプリートとホバー機能に関する情報を提供します。
	"npm.fetchOnlinePackageInfo": true,

	// スクリプトを実行するために使用するパッケージ マネージャー。
	//  - auto: ロック ファイルとインストールされたパッケージ マネージャーに基づいてスクリプトを実行するためにどのパッケージ マネージャーを使用するかを自動検出します。
	//  - npm: スクリプトを実行するためのパッケージ マネージャーとして npm を使用します。
	//  - yarn: スクリプトを実行するためのパッケージ マネージャーとして yarn を使用します。
	//  - pnpm: スクリプトを実行するためのパッケージ マネージャーとして pnpm を使用します。
	"npm.packageManager": "auto",

	// `--silent` オプションを使用して npm コマンドを実行する。
	"npm.runSilent": false,

	// npm スクリプト エクスプローラーで使用される既定のクリック アクション: 'open' または 'run'、既定値は 'open' です。
	"npm.scriptExplorerAction": "open",

	// 単純なブラウザーにフォーカスが置かれたときに表示されるフローティング インジケーターを有効または無効にします。
	"simpleBrowser.focusLockIndicator.enabled": true,

	// Activates the i18n features for snippets (eg.: _(""))
	"django.i18n": true,

	// Seldom show notifications about this extension
	"django.showContributeNotification": true,

	// Exclude Python snippets by their file name. Can be 'import', 'postgres'...
	"django.snippets.exclude": [
		"cms",
		"wagtail"
	],

	// Activates the Python snippets
	"django.snippets.use": true,

	// Sets an absolute path to the current workspace
	"path-intellisense.absolutePathToWorkspace": true,

	// Automatically adds slash after directory
	"path-intellisense.autoSlashAfterDirectory": false,

	// Adds the file extension to a import statements
	"path-intellisense.extensionOnImport": false,

	// Mappings for paths
	"path-intellisense.mappings": {},

	// Show hidden files
	"path-intellisense.showHiddenFiles": false,

	// CSS for the active scope. Use {color} to match the bracket color. The string types listed at https://code.visualstudio.com/docs/extensionAPI/vscode-api#DecorationRenderOptions can be used
	"bracket-pair-colorizer-2.activeScopeCSS": [
		"borderStyle : solid",
		"borderWidth : 1px",
		"borderColor : {color}",
		"opacity: 0.5"
	],

	// Should different brackets share a color group (Consecutive), or use their own color group (Independent)
	"bracket-pair-colorizer-2.colorMode": "Consecutive",

	// Scope colors
	"bracket-pair-colorizer-2.colors": [
		"Gold",
		"Orchid",
		"LightSkyBlue"
	],

	// Don't colorize files of these languages
	"bracket-pair-colorizer-2.excludedLanguages": [],

	// Should opening brackets iterate the color cycle even if they are not nested
	"bracket-pair-colorizer-2.forceIterationColorCycle": false,

	// Ensure that an opening brackets color does not match a previous brackets color
	"bracket-pair-colorizer-2.forceUniqueOpeningColor": false,

	// Should the active scope brackets always be highlighted? Recommended to disable editor.matchBrackets if using this feature.
	"bracket-pair-colorizer-2.highlightActiveScope": false,

	// Show active bracket scope in ruler?
	"bracket-pair-colorizer-2.rulerPosition": "Center",

	// CSS for the scope line. Use {color} to match the bracket color. The string types listed at https://code.visualstudio.com/docs/extensionAPI/vscode-api#DecorationRenderOptions can be used
	"bracket-pair-colorizer-2.scopeLineCSS": [
		"borderStyle : solid",
		"borderWidth : 1px",
		"borderColor : {color}",
		"opacity: 0.5"
	],

	// True: Scope Line will start from the ending bracket position. False: Scope Line will always be at column 0
	"bracket-pair-colorizer-2.scopeLineRelativePosition": true,

	// Show active bracket scope in gutter?
	"bracket-pair-colorizer-2.showBracketsInGutter": false,

	// Show active bracket scope in ruler?
	"bracket-pair-colorizer-2.showBracketsInRuler": false,

	// Show a horizontal line to create a block around the active bracket scope?
	"bracket-pair-colorizer-2.showHorizontalScopeLine": true,

	// Show a vertical line on the left side of the editor representing the active bracket scope?
	"bracket-pair-colorizer-2.showVerticalScopeLine": true,

	// Unmatched Scope Color
	"bracket-pair-colorizer-2.unmatchedScopeColor": "Red",

	// Deprecated, honors VS Code's Workspace Trust setting
	// Prevents running JavaScript in custom rules, markdown-it plugins, and configuration files
	"markdownlint.blockJavaScript": false,

	// markdownlint config object
	"markdownlint.config": {},

	// Array of paths for custom rules to include when linting
	"markdownlint.customRules": [],

	// Deprecated, see CHANGELOG.md and markdownlint.blockJavaScript
	// Array of workspace paths that load custom rules without prompting
	"markdownlint.customRulesAlwaysAllow": [],

	// Makes it easier to focus while typing by hiding issues on or near the current line
	"markdownlint.focusMode": false,

	// Array or file of glob expressions to ignore when linting
	"markdownlint.ignore": ".markdownlintignore",

	// Array of glob expressions to include or ignore when linting the workspace
	"markdownlint.lintWorkspaceGlobs": [
		"**/*.{md,mkd,mdwn,mdown,markdown,markdn,mdtxt,mdtext,workbook}",
		"!**/node_modules",
		"!**/bower_components",
		"!**/.git"
	],

	// Run the linter on save (onSave) or on type (onType)
	"markdownlint.run": "onType",

	// pandoc .docx output option template that you would like to use
	"pandoc.docxOptString": "",

	// pandoc .html output option template that you would like to use
	"pandoc.htmlOptString": "",

	// pandoc .pdf output option template that you would like to use
	"pandoc.pdfOptString": "",

	// The type of image code
	//  - Markdown: Markdown Code as: ![image](./image/file/path.jpg)
	//  - HTML: HTML Code as: <img alt="image" src="./image/file/path.jpg" />
	"markdown-image.base.codeType": "Markdown",

	// The filenname and path format string for upload. Not Support in `Imgur` and `SM.MS`. You can use some variables: 
	// 
	// - `${filename}`: The original filename.  
	// - `${mdname}`: The name of the Markdown file being edited.  
	// - `${path}`: The path of the Markdown file being edited relative to the root directory.  
	// - `${hash}`: The sha256 hash of image.  
	// - `${timestamp}`: The timestamp of upload time.  
	// - `${YY}`: The Year  
	// -`${MM}`:The Month  
	// - `${DD}`: The Day  
	// - `${hh}`: The 12-hour clock  
	// - `${HH}`: The 24-hour clock  
	// - `${mm}`: The minutes  
	// - `${ss}`: The seconds  
	// - `${mss}`: The milliseconds  
	// - `${rand,number}`: A random number, for example: `${rand,100}`. It will generate random numbers from 0 to 99.
	"markdown-image.base.fileNameFormat": "${hash}",

	// The maximum width of the image, if the image is greater than this width, the width is set to this value. Set to 0 means not change.
	"markdown-image.base.imageWidth": 0,

	// Method to upload pictures. To the local or another picture CDN service.
	//  - Local: Upload the image to the project directory. You can use markdown-image.local.path sets the relative path for upload.
	//  - Coding: Upload the image to git repository in Coding.net . You can configure the repository through markdown-image.coding.repository. You need to configure the Token to access the repository through markdown-image.coding.token.
	//  - Imgur: Upload the image to Imgur. You can configure `Client Id` through markdown-image.imgur.clientId.
	//  - SM.MS: Upload the image to sm.ms. You can configure `Token` through markdown-image.sm_ms.token if you have an account.
	//  - Data URL: Turn the picture into the DATA URL insert.
	//  - Qiniu: Upload the image to qiniu.com.
	//  - DIY: You can define your code used to upload. You need to configure the code path through markdown-image.DIY.path
	//  - Cloudinary: Upload the image to Cloudinary. You can configure `Cloud Name` through markdown-image.cloudinary.cloudName.
	"markdown-image.base.uploadMethod": "Local",

	// Whether URL encode for the url of image.
	"markdown-image.base.urlEncode": true,

	// API key for your account.
	"markdown-image.cloudinary.apiKey": "",

	// API secret for your account.
	"markdown-image.cloudinary.apiSecret": "",

	// Your user account name.
	"markdown-image.cloudinary.cloudName": "",

	// Folder to upload the image to.
	"markdown-image.cloudinary.folder": "",

	// Picture upload directory that in the repository (automatically created if it does not exist). The repository must initialization first.
	"markdown-image.coding.path": "/",

	// Coding repository, for example: `https://coding-demo.coding.net/p/coding-demo/d/coding-demo/git`
	"markdown-image.coding.repository": "",

	// Coding person [access token](https://help.coding.net/docs/member/tokens.html).
	"markdown-image.coding.token": "",

	// The Code File Path. You can write a Node.js code file to upload, and fill in the file path to here. Your code must exports a function as `async function (filePath:string, savePath:string, markdownPath:string):string`.
	// 
	// For example: 
	// 
	//  ```javascript
	// const path = require('path');
	// module.exports = async function(filePath, savePath, markdownPath) {
	// 	// Return a picture access link
	// 	return path.relative(path.dirname(markdownPath), filePath); 
	// }
	// ```
	// The arguments are :
	// - `filePath`: The absolute path of the file.  
	// - `savePath`: The path of the saved file generate according to `markdown-image.base.fileNameFormat`.  
	// - `markdownPath`: The path of markdown file being edited.
	"markdown-image.DIY.path": "",

	// The client id registered with imgur. You can registed it at [here](https://api.imgur.com/oauth2/addclient).
	"markdown-image.imgur.clientId": "",

	// Connect to Imgur via http proxy.
	"markdown-image.imgur.httpProxy": "",

	// Picture storage directory that in the local (automatically created if it does not exist). Notice: You can't use variable in here. You can use variable in `markdown-image.base.fileNameFormat`.
	"markdown-image.local.path": "/images",

	// The reference path format in markdown(not include file name). Empty means use relative path. You can use variable of `markdown-image.base.fileNameFormat` in here. For example: `/images/${YY}-${MM}/`
	"markdown-image.local.referencePath": "",

	// AccessKey of upload.
	"markdown-image.qiniu.accessKey": "",

	// Storge name of upload
	"markdown-image.qiniu.bucket": "",

	// Domain bind with storge name
	"markdown-image.qiniu.domain": "",

	// SecretKey of upload
	"markdown-image.qiniu.secretKey": "",

	// Zone of storge
	"markdown-image.qiniu.zone": "East China",

	// SM.MS API token (Options). You can register an account and then visit [API Token](https://sm.ms/home/apitoken) Page to generate secret token.
	"markdown-image.sm_ms.token": "",

	// When activated, selecting a node will navigate to an associated code section.
	"hediet.vscode-drawio.codeLinkActivated": false,

	// Names for colors, eg. {‘FFFFFF’: ‘White’, ‘000000’: ‘Black’} that are used as tooltips (uppercase, no leading # for the colour codes)
	"hediet.vscode-drawio.colorNames": {},

	// Available color schemes in the style section at the top of the format panel. See example [here](https://www.diagrams.net/doc/faq/custom-colours-confluence-cloud#default-colour-schemes---format-panel)
	"hediet.vscode-drawio.customColorSchemes": [],

	// Configures the Draw.io editor to use custom fonts.
	"hediet.vscode-drawio.customFonts": [],

	// Configures the Draw.io editor to use custom libraries.
	"hediet.vscode-drawio.customLibraries": [],

	// Default styling of edges.
	"hediet.vscode-drawio.defaultEdgeStyle": {},

	// Default styling of vertices (shapes).
	"hediet.vscode-drawio.defaultVertexStyle": {},

	// 
	"hediet.vscode-drawio.knownPlugins": [],

	// Only change this property if you know what you are doing. Manual changes to this property are not supported!
	"hediet.vscode-drawio.local-storage": {},

	// When enabled, the bundled instance of Draw.io is used.
	"hediet.vscode-drawio.offline": true,

	// The app to use when offline mode is disabled.
	"hediet.vscode-drawio.online-url": "https://embed.diagrams.net/",

	// Loads Draw.io plugins.
	"hediet.vscode-drawio.plugins": [],

	// Color codes for the upper palette in the color dialog.
	"hediet.vscode-drawio.presetColors": [],

	// Defines an array of objects that contain the colours (fontColor, fillColor, strokeColor and gradientColor) for the Style tab of the format panel if the selection is empty. These objects can have a commonStyle (which is applied to both vertices and edges), vertexStyle (applied to vertices) and edgeStyle (applied to edges), and a graph with background and gridColor. An empty object means apply the default colors
	"hediet.vscode-drawio.styles": [],

	// The theme to use for the Draw.io editor. Use "automatic" to automatically choose a Draw.io theme that matches your current VS Code theme.
	"hediet.vscode-drawio.theme": "automatic",

	// When creating a hanging indent, do not put the closing bracket on its own line.
	"pythonIndent.keepHangingBracketOnLine": false,

	// Trims lines that contain only whitespace after pressing Enter on them.
	"pythonIndent.trimLinesWithOnlyWhitespace": false,

	// After creating a hanging indent, press tab to leave the indented section and go to the ending bracket.
	"pythonIndent.useTabOnHangingIndent": false,

	// Sets how line-breaks are rendered in Marp Markdown. It can set separately because the default setting of Marp ecosystem is different from VS Code.
	//  - off: Ignore line-breaks in rendered Marp Markdown preview.
	//  - on: Show line-breaks in rendered Marp Markdown preview. It is the default setting of Marp ecosystem.
	//  - inherit: Use inherited setting from `markdown.preview.breaks`.
	"markdown.marp.breaks": "on",

	// Sets the custom path for Chrome or Chromium-based browser to export PDF, PPTX, and image. If it's empty, Marp will find out the installed Google Chrome / Chromium / Microsoft Edge.
	"markdown.marp.chromePath": "",

	// Enables all HTML elements in Marp Markdown. This setting is working only in the trusted workspace.
	"markdown.marp.enableHtml": false,

	// Sets default export type.
	//  - html: HTML slide deck
	//  - pdf: PDF slide deck
	//  - pptx: PowerPoint document
	//  - png: PNG image (first slide only)
	//  - jpeg: JPEG image (first slide only)
	"markdown.marp.exportType": "pdf",

	// Controls math syntax and the default library for rendering math (provided by [Marp Core](https://github.com/marp-team/marp-core)). A using library can override by math global directive in Markdown. Please note that math rendering in Marp Markdown is not following the setting in `markdown.math.enabled`.
	//  - off: Disable math syntax and math global directive.
	//  - mathjax: Use MathJax (https://www.mathjax.org/).
	//  - katex: Use KaTeX (https://katex.org/). It is the default library in Marp.
	"markdown.marp.mathTypesetting": "katex",

	// Enables the outline extension for Marp Markdown. If enabled, VS Code's outline view will reflect slide splitters, and you can fold regions of the slide content in the editor.
	"markdown.marp.outlineExtension": true,

	// Adds [presenter notes](https://marpit.marp.app/usage?id=presenter-notes) to exported PDF as note annotations.
	"markdown.marp.pdf.noteAnnotations": false,

	// A list of URLs or local paths to additional [theme CSS](https://marpit.marp.app/theme-css) for Marp core and Marpit framework. The rule for paths is following `markdown.styles`.
	"markdown.marp.themes": [],

	// Shows editor toolbar button to Markdown document, for accessing quick pick of Marp commands.
	"markdown.marp.toolbarButtonForQuickPick": true,

	// List of projects in the workspace to exclude from the projects viewlet
	"dataworkspace.excludedProjects": [],

	// Full path to folder where new projects are saved by default.
	"projects.defaultProjectSaveLocation": "",

	// Always show information message when the current workspace folders contain projects that have not been added to the workspace's projects.
	"projects.showNotAddedProjectsInWorkspacePrompt": true,

	// [省略可能] VSCode の構成済みロケールにローカライズするための構成オプション (設定を有効にするには VSCode を再起動する必要があります)
	"mssql.applyLocalization": false,

	// Chooses which Authentication method to use
	"mssql.azureActiveDirectory": "AuthCodeGrant",

	// [ユーザー設定] で定義されている接続プロファイルが、コマンド パレット内の 'MS SQL: Connect' コマンドの下に表示されます。
	"mssql.connections": [],

	// [省略可能] 結果を結果ビューからコピーするための構成オプション
	"mssql.copyIncludeHeaders": false,

	// [省略可能] 複数行の結果を結果ビューからコピーするための構成オプション
	"mssql.copyRemoveNewLine": true,

	// Enable Query History Capture
	"mssql.enableQueryHistoryCapture": true,

	// Should Query History feature be enabled
	"mssql.enableQueryHistoryFeature": true,

	// 列定義を揃えるかどうか
	"mssql.format.alignColumnDefinitionsInColumns": false,

	// データ型を大文字、小文字、または [なし] (元のまま) のいずれにフォーマットするか
	"mssql.format.datatypeCasing": "none",

	// キーワードを大文字、小文字、または [なし] (元のまま) のいずれにフォーマットするか
	"mssql.format.keywordCasing": "none",

	// コンマを、'mycolumn1,' のようにリスト内の各ステートメントの末尾に配置する代わりに ',mycolumn2' のように先頭に配置するかどうか
	"mssql.format.placeCommasBeforeNextStatement": false,

	// たとえば 'SELECT C1, C2 FROM T1' の場合に C1 と C2 を別々の行にするように、Select ステートメント内のオブジェクトへの参照を別々の行に分割するかどうか
	"mssql.format.placeSelectStatementReferencesOnNewLine": false,

	// [Optional] Do not show unsupported platform warnings
	"mssql.ignorePlatformWarning": false,

	// IntelliSense エラー チェックを有効にするかどうか
	"mssql.intelliSense.enableErrorChecking": true,

	// IntelliSense を有効にするかどうか
	"mssql.intelliSense.enableIntelliSense": true,

	// IntelliSense クイック ヒントを有効にするかどうか
	"mssql.intelliSense.enableQuickInfo": true,

	// IntelliSense 提案を有効にするかどうか
	"mssql.intelliSense.enableSuggestions": true,

	// IntelliSense 提案を小文字にするかどうか
	"mssql.intelliSense.lowerCaseSuggestions": false,

	// [省略可能] デバッグ出力を VS Code コンソールにログとして表示する (ヘルプ -> 開発者ツールの切り替え)
	"mssql.logDebugInfo": false,

	// Maximum number of old files to remove upon startup that have expired mssql.logRetentionMinutes. Files that do not get cleaned up due to this limitation get cleaned up next time Azure Data Studio starts up.
	"mssql.logFilesRemovalLimit": 100,

	// Number of minutes to retain log files for backend services. Default is 1 week.
	"mssql.logRetentionMinutes": 10080,

	// 接続リストに格納する最近使用された接続の最大数。
	"mssql.maxRecentConnections": 5,

	// 既定で開いているメッセージ ウィンドウの場合は true。閉じている場合は false
	"mssql.messagesDefaultOpen": true,

	// タブを切り替えるときにクエリ結果セクションとスクロール位置を保存するかどうか (パフォーマンスに影響する可能性があります)
	"mssql.persistQueryResultTabs": false,

	// Enable Parameterization for Always Encrypted
	"mssql.query.alwaysEncryptedParameterization": false,

	// Enable SET ANSI_DEFAULTS
	"mssql.query.ansiDefaults": false,

	// Enable SET ANSI_NULL_DFLT_ON
	"mssql.query.ansiNullDefaultOn": true,

	// Enable SET ANSI_NULLS
	"mssql.query.ansiNulls": true,

	// Enable SET ANSI_PADDING
	"mssql.query.ansiPadding": true,

	// Enable SET ANSI_WARNINGS
	"mssql.query.ansiWarnings": true,

	// Enable SET ARITHABORT option
	"mssql.query.arithAbort": true,

	// Enable SET CURSOR_CLOSE_ON_COMMIT
	"mssql.query.cursorCloseOnCommit": false,

	// Enable SET DEADLOCK_PRIORITY option
	"mssql.query.deadlockPriority": "Normal",

	// ビット列を数値 (1 または 0) として表示するかどうか。False の場合、ビット列は 'true' または 'false' として表示されます
	"mssql.query.displayBitAsNumber": true,

	// An execution time-out of 0 indicates an unlimited wait (no time-out)
	"mssql.query.executionTimeout": 0,

	// Enable SET IMPLICIT_TRANSACTIONS
	"mssql.query.implicitTransactions": false,

	// Enable SET LOCK TIMEOUT option (in milliseconds)
	"mssql.query.lockTimeout": -1,

	// Number of XML characters to store after running a query
	"mssql.query.maxXmlCharsToStore": 2097152,

	// Enable SET NOCOUNT option
	"mssql.query.noCount": false,

	// Enable SET NOEXEC option
	"mssql.query.noExec": false,

	// Enable SET PARSEONLY option
	"mssql.query.parseOnly": false,

	// Enable SET QUERY_GOVERNOR_COST_LIMIT
	"mssql.query.queryGovernorCostLimit": -1,

	// Enable SET QUOTED_IDENTIFIER
	"mssql.query.quotedIdentifier": true,

	// Maximum number of rows to return before the server stops processing your query.
	"mssql.query.rowCount": 0,

	// Enable SET STATISTICS IO option
	"mssql.query.statisticsIO": false,

	// Enable SET STATISTICS TIME option
	"mssql.query.statisticsTime": false,

	// Maximum size of text and ntext data returned from a SELECT statement
	"mssql.query.textSize": 2147483647,

	// Enable SET TRANSACTION ISOLATION LEVEL option
	"mssql.query.transactionIsolationLevel": "READ COMMITTED",

	// Enable SET XACT_ABORT ON option
	"mssql.query.xactAbortOn": false,

	// Number of query history entries to show in the Query History view
	"mssql.queryHistoryLimit": 20,

	// 結果グリッドのフォント ファミリを設定します。エディターのフォントを使用するには、空白に設定します
	"mssql.resultsFontFamily": "-apple-system,BlinkMacSystemFont,Segoe WPC,Segoe UI,HelveticaNeue-Light,Ubuntu,Droid Sans,sans-serif",

	// 結果グリッドのフォント サイズを設定します。エディターのサイズを使用するには、空白に設定します
	"mssql.resultsFontSize": 13,

	// [省略可能] 結果を CSV として保存するときのデータ項目を区切るための区切り文字
	"mssql.saveAsCsv.delimiter": ",",

	// [省略可能] 結果を CSV として保存するときに使用するファイル エンコード
	"mssql.saveAsCsv.encoding": "utf-8",

	// [省略可能] true の場合、CSV として結果を保存する際に列ヘッダーが組み込まれます
	"mssql.saveAsCsv.includeHeaders": true,

	// [省略可能] 結果を CSV として保存するときに行を区切るために使用する文字 (複数可)
	"mssql.saveAsCsv.lineSeparator": null,

	// [省略可能] 結果を CSV として保存するときにテキスト フィールドを囲むために使用する文字
	"mssql.saveAsCsv.textIdentifier": "\"",

	// 結果ウィンドウに関連するショートカット
	"mssql.shortcuts": {
		"_comment": "Short cuts must follow the format (ctrl)+(shift)+(alt)+[key]",
		"event.toggleResultPane": "ctrl+alt+R",
		"event.focusResultsGrid": "ctrl+alt+G",
		"event.toggleMessagePane": "ctrl+alt+Y",
		"event.prevGrid": "ctrl+up",
		"event.nextGrid": "ctrl+down",
		"event.copySelection": "ctrl+C",
		"event.copyWithHeaders": "",
		"event.copyAllHeaders": "",
		"event.maximizeGrid": "",
		"event.selectAll": "ctrl+A",
		"event.saveAsJSON": "",
		"event.saveAsCSV": "",
		"event.saveAsExcel": ""
	},

	// [省略可能] 各バッチの実行時間を表示するかどうか
	"mssql.showBatchTime": false,

	// [省略可能] どの列を新しい結果ウィンドウで開く必要があるかについての設定オプション
	"mssql.splitPaneSelection": "next",

	// [Optional] Log level for backend services. Azure Data Studio generates a file name every time it starts and if the file already exists the logs entries are appended to that file. For cleanup of old log files see logRetentionMinutes and logFilesRemovalLimit settings. The default tracingLevel does not log much. Changing verbosity could lead to extensive logging and disk space requirements for the logs. Error includes Critical, Warning includes Error, Information includes Warning and Verbose includes Information
	"mssql.tracingLevel": "Critical",

	// Which version of Autorest.Sql to use from NPM.  Latest will be used if not set.
	"sqlDatabaseProjects.autorestSqlVersion": "",

	// Whether to prompt the user to install .NET Core when not detected.
	"sqlDatabaseProjects.netCoreDoNotAsk": false,

	// Whether to prompt the user to install .NET SDK version and add global.json to project when a newer unsupported version is detected.
	"sqlDatabaseProjects.netCoreDowngradeDoNotShow": false,

	// Full path to .NET Core SDK on the machine.
	"sqlDatabaseProjects.netCoreSDKLocation": "",

	// Whether to prompt the user to install Node.js when not detected.
	"sqlDatabaseProjects.nodejsDoNotAsk": false,

	// List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.
	"python.autoComplete.extraPaths": [],

	// Path to the conda executable to use for activation (version 4.4+).
	"python.condaPath": "",

	// Path to Python, you can use a custom version of Python by modifying this setting to include the full path. This default setting is used as a fallback if no interpreter is selected for the workspace. The extension will also not set nor change the value of this setting, it will only read from it.
	"python.defaultInterpreterPath": "python",

	// Enable source map support for meaningful stack traces in error logs.
	"python.diagnostics.sourceMapsEnabled": false,

	// Whether to check if Python is installed (also warn when using the macOS-installed Python).
	"python.disableInstallationCheck": false,

	// Absolute path to a file containing environment variable definitions.
	"python.envFile": "${workspaceFolder}/.env",

	// Enables A/B tests experiments in the Python extension. If enabled, you may get included in proposed enhancements and/or features.
	"python.experiments.enabled": true,

	// List of experiment to opt into. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.
	"python.experiments.optInto": [],

	// List of experiment to opt out of. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.
	"python.experiments.optOutFrom": [],

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.autopep8Args": [],

	// Path to autopep8, you can use a custom version of autopep8 by modifying this setting to include the full path.
	"python.formatting.autopep8Path": "autopep8",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.blackArgs": [],

	// Path to Black, you can use a custom version of Black by modifying this setting to include the full path.
	"python.formatting.blackPath": "black",

	// Provider for formatting. Possible options include 'autopep8', 'black', and 'yapf'.
	"python.formatting.provider": "autopep8",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.yapfArgs": [],

	// Path to yapf, you can use a custom version of yapf by modifying this setting to include the full path.
	"python.formatting.yapfPath": "yapf",

	// Whether to install Python modules globally when not using an environment.
	"python.globalModuleInstallation": false,

	// Set to "weekly" or "daily" to automatically download and install the latest Insiders builds of the python extension, which include upcoming features and bug fixes.
	"python.insidersChannel": "off",

	// Defines type of the language server.
	//  - Default: Automatically select a language server: Pylance if installed and available, otherwise fallback to Jedi.
	//  - Jedi: Use Jedi behind the Language Server Protocol (LSP) as a language server.
	//  - Pylance: Use Pylance as a language server.
	//  - None: Disable language server capabilities.
	"python.languageServer": "Default",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.banditArgs": [],

	// Whether to lint Python files using bandit.
	"python.linting.banditEnabled": false,

	// Path to bandit, you can use a custom version of bandit by modifying this setting to include the full path.
	"python.linting.banditPath": "bandit",

	// Optional working directory for linters.
	"python.linting.cwd": null,

	// Whether to lint Python files.
	"python.linting.enabled": true,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.flake8Args": [],

	// Severity of Flake8 message type 'E'.
	"python.linting.flake8CategorySeverity.E": "Error",

	// Severity of Flake8 message type 'F'.
	"python.linting.flake8CategorySeverity.F": "Error",

	// Severity of Flake8 message type 'W'.
	"python.linting.flake8CategorySeverity.W": "Warning",

	// Whether to lint Python files using flake8
	"python.linting.flake8Enabled": false,

	// Path to flake8, you can use a custom version of flake8 by modifying this setting to include the full path.
	"python.linting.flake8Path": "flake8",

	// Patterns used to exclude files or folders from being linted.
	"python.linting.ignorePatterns": [
		"**/site-packages/**/*.py",
		".vscode/*.py"
	],

	// Whether to lint Python files when saved.
	"python.linting.lintOnSave": true,

	// Controls the maximum number of problems produced by the server.
	"python.linting.maxNumberOfProblems": 100,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.mypyArgs": [
		"--follow-imports=silent",
		"--ignore-missing-imports",
		"--show-column-numbers",
		"--no-pretty"
	],

	// Severity of Mypy message type 'Error'.
	"python.linting.mypyCategorySeverity.error": "Error",

	// Severity of Mypy message type 'Note'.
	"python.linting.mypyCategorySeverity.note": "Information",

	// Whether to lint Python files using mypy.
	"python.linting.mypyEnabled": false,

	// Path to mypy, you can use a custom version of mypy by modifying this setting to include the full path.
	"python.linting.mypyPath": "mypy",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.prospectorArgs": [],

	// Whether to lint Python files using prospector.
	"python.linting.prospectorEnabled": false,

	// Path to Prospector, you can use a custom version of prospector by modifying this setting to include the full path.
	"python.linting.prospectorPath": "prospector",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pycodestyleArgs": [],

	// Severity of pycodestyle message type 'E'.
	"python.linting.pycodestyleCategorySeverity.E": "Error",

	// Severity of pycodestyle message type 'W'.
	"python.linting.pycodestyleCategorySeverity.W": "Warning",

	// Whether to lint Python files using pycodestyle
	"python.linting.pycodestyleEnabled": false,

	// Path to pycodestyle, you can use a custom version of pycodestyle by modifying this setting to include the full path.
	"python.linting.pycodestylePath": "pycodestyle",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pydocstyleArgs": [],

	// Whether to lint Python files using pydocstyle
	"python.linting.pydocstyleEnabled": false,

	// Path to pydocstyle, you can use a custom version of pydocstyle by modifying this setting to include the full path.
	"python.linting.pydocstylePath": "pydocstyle",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pylamaArgs": [],

	// Whether to lint Python files using pylama.
	"python.linting.pylamaEnabled": false,

	// Path to pylama, you can use a custom version of pylama by modifying this setting to include the full path.
	"python.linting.pylamaPath": "pylama",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pylintArgs": [],

	// Severity of Pylint message type 'Convention/C'.
	"python.linting.pylintCategorySeverity.convention": "Information",

	// Severity of Pylint message type 'Error/E'.
	"python.linting.pylintCategorySeverity.error": "Error",

	// Severity of Pylint message type 'Fatal/F'.
	"python.linting.pylintCategorySeverity.fatal": "Error",

	// Severity of Pylint message type 'Refactor/R'.
	"python.linting.pylintCategorySeverity.refactor": "Hint",

	// Severity of Pylint message type 'Warning/W'.
	"python.linting.pylintCategorySeverity.warning": "Warning",

	// Whether to lint Python files using pylint.
	"python.linting.pylintEnabled": false,

	// Path to Pylint, you can use a custom version of pylint by modifying this setting to include the full path.
	"python.linting.pylintPath": "pylint",

	// The logging level the extension logs at, defaults to 'error'
	"python.logging.level": "error",

	// Path to the pipenv executable to use for activation.
	"python.pipenvPath": "pipenv",

	// Path to the poetry executable.
	"python.poetryPath": "poetry",

	// (DEPRECATED: Note this setting is not used when in pythonDeprecatePythonPath experiment) Path to Python, you can use a custom version of Python by modifying this setting to include the full path.
	"python.pythonPath": "python",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.sortImports.args": [],

	// Path to isort script, default using inner version
	"python.sortImports.path": "",

	// Set this setting to your preferred TensorBoard log directory to skip log directory prompt when starting TensorBoard.
	"python.tensorBoard.logDirectory": "",

	// Activate Python Environment in the current Terminal on load of the Extension.
	"python.terminal.activateEnvInCurrentTerminal": false,

	// Activate Python Environment in Terminal created using the Extension.
	"python.terminal.activateEnvironment": true,

	// When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.
	"python.terminal.executeInFileDir": false,

	// Python launch arguments to use when executing a file in the terminal.
	"python.terminal.launchArgs": [],

	// Enable auto run test discovery when saving a test file.
	"python.testing.autoTestDiscoverOnSaveEnabled": true,

	// Optional working directory for tests.
	"python.testing.cwd": null,

	// Port number used for debugging of tests.
	"python.testing.debugPort": 3000,

	// Prompt to configure a test framework if potential tests directories are discovered.
	"python.testing.promptToConfigure": true,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.testing.pytestArgs": [],

	// Enable testing using pytest.
	"python.testing.pytestEnabled": false,

	// Path to pytest (pytest), you can use a custom version of pytest by modifying this setting to include the full path.
	"python.testing.pytestPath": "pytest",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.testing.unittestArgs": [
		"-v",
		"-s",
		".",
		"-p",
		"*test*.py"
	],

	// Enable testing using unittest.
	"python.testing.unittestEnabled": false,

	// Folders in your home directory to look into for virtual environments (supports pyenv, direnv and virtualenvwrapper by default).
	"python.venvFolders": [],

	// Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs).
	"python.venvPath": "",

	// Pylance insiders download channel.
	//  - off: Do not check for insiders updates.
	//  - daily: Automatically check for and install insiders updates daily.
	"pylance.insidersChannel": "off",

	// Offer auto-import completions.
	"python.analysis.autoImportCompletions": true,

	// Automatically add common search paths like 'src'.
	"python.analysis.autoSearchPaths": true,

	// Add parentheses to function completions.
	"python.analysis.completeFunctionParens": false,

	// Analysis mode for diagnostics.
	//  - openFilesOnly: Analyzes and reports errors on only open files.
	//  - workspace: Analyzes and reports errors on all files in the workspace.
	"python.analysis.diagnosticMode": "openFilesOnly",

	// Allows a user to override the severity levels for individual diagnostics.
	"python.analysis.diagnosticSeverityOverrides": {},

	// Additional import search resolution paths
	"python.analysis.extraPaths": [],

	// Specifies the level of logging for the Output panel
	"python.analysis.logLevel": "Information",

	// Path to directory containing custom type stub files.
	"python.analysis.stubPath": "typings",

	// Defines the default rule set for type checking.
	//  - off: Surfaces diagnostics for invalid syntax, unresolved imports, undefined variables.
	//  - basic: All "off" rules + basic type checking rules.
	//  - strict: All "off" rules + all type checking rules.
	"python.analysis.typeCheckingMode": "off",

	// Paths to look for typeshed modules.
	"python.analysis.typeshedPaths": [],

	// Use library implementations to extract type information when type stub is not present.
	"python.analysis.useLibraryCodeForTypes": true,

	// After running a cell, add a 'Goto' code lens on the cell. Note, disabling all code lenses disables this code lens as well.
	"jupyter.addGotoCodeLenses": true,

	// This setting is deprecated and will be removed in the next release.
	// Allows a user to import a jupyter notebook into a python file anytime one is opened.
	"jupyter.allowImportFromNotebook": true,

	// This setting is deprecated and will be removed in the next release.
	// Allow the inputting of python code directly into the Interactive window
	"jupyter.allowInput": true,

	// This setting is deprecated as Live Share support for the interactive window no longer exists in the Jupyter extension.
	// Allow the Interactive window to be shared during a Live Share session
	"jupyter.allowLiveShare": true,

	// Allow for connecting the Interactive window to a https Jupyter server that does not have valid certificates. This can be a security risk, so only use for known and trusted servers.
	"jupyter.allowUnauthorizedRemoteConnection": false,

	// Automatically scroll the interactive window to show the output of the last statement executed. If false, the interactive window will only automatically scroll if the bottom of the prior cell is visible.
	"jupyter.alwaysScrollOnNewCell": false,

	// Warn the user before restarting a kernel.
	"jupyter.askForKernelRestart": true,

	// Warn the user before trying to open really large data frames.
	"jupyter.askForLargeDataFrames": true,

	// When importing or exporting a Jupyter Notebook add a directory change command to allow relative path loading to work.
	"jupyter.changeDirOnImportExport": false,

	// Set of commands to put as code lens above a cell.
	"jupyter.codeLenses": "jupyter.runcell,  jupyter.runallcellsabove, jupyter.debugcell",

	// Regular expression used to identify code cells. All code until the next match is considered part of this cell.
	"jupyter.codeRegularExpression": "^(#\\s*%%|#\\s*\\<codecell\\>|#\\s*In\\[\\d*?\\]|#\\s*In\\[ \\])",

	// Collapse cell input code by default.
	"jupyter.collapseCellInputCodeByDefault": true,

	// This setting is deprecated and will be removed in an upcoming release.
	// Whether or not to use the theme's peek color as the background for the input box.
	"jupyter.colorizeInputBox": true,

	// Set of debug commands to put as code lens above a cell while debugging.
	"jupyter.debugCodeLenses": "jupyter.debugcontinue, jupyter.debugstop, jupyter.debugstepover",

	// When debugging, debug just my code.
	"jupyter.debugJustMyCode": true,

	// Path to debugpy bits for debugging cells.
	"jupyter.debugpyDistPath": "",

	// Draw a highlight behind the currently active cell.
	"jupyter.decorateCells": true,

	// Cell marker used for delineating a cell in a python file.
	"jupyter.defaultCellMarker": "# %%",

	// When true, disables Jupyter from being automatically started for you. You must instead run a cell to start Jupyter.
	"jupyter.disableJupyterAutoStart": false,

	// Enables moving to the next cell when clicking on a 'Run Cell' code lens.
	"jupyter.enableAutoMoveToNextCell": true,

	// Enables code lens for 'cells' in a python file.
	"jupyter.enableCellCodeLens": true,

	// This setting has been deprecated as Jupyter keyboard shortcuts have been moved into the ms-toolsai.jupyter-keymap extension. If you would like to disable Jupyter keyboard shortcuts, please uninstall or disable that extension instead.
	// Enables Jupyter style keyboard shortcuts for Notebooks.
	"jupyter.enableKeyboardShortcuts": true,

	// This setting is deprecated and will be removed in the next release.
	// Enables scrolling for large cell outputs in the Notebook Editor. This setting does not apply to the Interactive Window.
	"jupyter.enableScrollingForCellOutputs": true,

	// Enables/disables A/B tests.
	"jupyter.experiments.enabled": true,

	// List of experiment to opt into. If empty, user is assigned the default experiment groups. [Learn more](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).
	"jupyter.experiments.optInto": [],

	// List of experiment to opt out of. If empty, user is assigned the default experiment groups. [Learn more](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).
	"jupyter.experiments.optOutFrom": [],

	// Enable exporting a python file into a jupyter notebook and run all cells when doing so.
	"jupyter.exportWithOutputEnabled": false,

	// Generate SVG output for notebook plots. This allows for better display in the plot viewer at the cost of generation speed and file size.
	"jupyter.generateSVGPlots": false,

	// This setting is deprecated and will be removed in the next release.
	// Don't use the VS Code theme in the Interactive window (requires reload of VS Code). This forces the Interactive window to use 'Light +(default light)' and disables matplotlib defaults.
	"jupyter.ignoreVscodeTheme": false,

	// Behavior of the Interactive Window. 'perFile' will create a new interactive window for every file that runs a cell. 'single' allows a single window. 'multiple' allows the creation of multiple.
	"jupyter.interactiveWindowMode": "multiple",

	// When a Notebook Editor or Interactive Window Jupyter server is started, these arguments will be passed to it. By default this list is generated by the Jupyter Extension.
	"jupyter.jupyterCommandLineArguments": [],

	// Amount of time (in ms) to wait for an interrupt before asking to restart the Jupyter kernel.
	"jupyter.jupyterInterruptTimeout": 10000,

	// Number of times to attempt to connect to the Jupyter Notebook
	"jupyter.jupyterLaunchRetries": 3,

	// Amount of time (in ms) to wait for the Jupyter Notebook server to start.
	"jupyter.jupyterLaunchTimeout": 60000,

	// Determines the type of connection for talking to jupyter. Local will start kernels locally. Remote allows for connections to remote servers
	"jupyter.jupyterServerType": "",

	// List of Jupyter Kernels and/or python environments that are to be excluded from the Kernel picker.
	"jupyter.kernels.filter": [],

	// This setting is deprecated and will be removed in the next release.
	// Amount of time to wait for guest connections to verify they have the Python extension installed.
	"jupyter.liveShareConnectionTimeout": 1000,

	// The logging level the extension logs at.
	"jupyter.logging.level": "debug",

	// Uncomment shell assignments (#!), line magic (#!%) and cell magic (#!%%) when parsing code cells.
	"jupyter.magicCommandsAsComments": false,

	// Regular expression used to identify markdown cells. All comments after this expression are considered part of the markdown.
	"jupyter.markdownRegularExpression": "^(#\\s*%%\\s*\\[markdown\\]|#\\s*\\<markdowncell\\>)",

	// This setting is deprecated and will be removed in the next release.
	// Maximum size (in pixels) of text output in the Notebook Editor before a scrollbar appears. First enable scrolling for cell outputs in settings.
	"jupyter.maxOutputSize": 400,

	// Append a new empty cell to an interactive window file on running the currently last cell.
	"jupyter.newCellOnRunLast": true,

	// Set the root directory for loading files for the Interactive window.
	"jupyter.notebookFileRoot": "${fileDirname}",

	// The method to use when exporting a notebook to a Python file. 'direct' will copy over the code directly as is. 'commentMagics' will comment out lines starting with line magics (%), cell magics (%%), and shell commands(!). 'nbconvert' will install nbconvert and use that for the conversion which can translate iPython syntax into Python syntax.
	"jupyter.pythonExportMethod": "direct",

	// When debugging a cell, open this port on the remote box. If -1 is specified, a random port between 8889 and 9000 will be attempted.
	"jupyter.remoteDebuggerPort": -1,

	// A series of Python instructions or iPython magic commands. Can be either an array of strings or a single string with commands separated by '\n'. Commands will be silently executed whenever the interactive window loads. For instance, set this to '%load_ext autoreload\n%autoreload 2' to automatically reload changes made to imported files without having to restart the interactive session.
	"jupyter.runStartupCommands": "",

	// This setting is deprecated and will be removed in the next release.
	// Search all installed Python interpreters for a Jupyter installation when starting the Interactive window
	"jupyter.searchForJupyter": true,

	// When pressing shift+enter, send selected code in a Python file to the Jupyter interactive window as opposed to the Python terminal.
	"jupyter.sendSelectionToInteractiveWindow": false,

	// This setting is deprecated and will be removed in the next release.
	// Show cell input code.
	"jupyter.showCellInputCode": true,

	// Show the Outline button in the Jupyter notebook toolbar.
	"jupyter.showOutlineButtonInNotebookToolbar": true,

	// Bring up the Variable View when starting a Run by Line session.
	"jupyter.showVariableViewWhenDebugging": true,

	// Stop running cells if a cell throws an exception.
	"jupyter.stopOnError": true,

	// When debugging a cell, stop on the first line.
	"jupyter.stopOnFirstLineWhileDebugging": true,

	// This setting is deprecated in favor of `notebook.output.textLineLimit`. This setting will be removed in an upcoming release.
	// Limit the amount of text in Interactive cell text output to this value. 0 to allow any amount of characters.
	"jupyter.textOutputLimit": 20000,

	// In the Interactive window and Notebook Editor theme matplotlib outputs to match the VS Code editor theme.
	"jupyter.themeMatplotlibPlots": false,

	// When running Jupyter locally, create a default empty Jupyter config for the Interactive window
	"jupyter.useDefaultConfigForJupyter": true,

	// Types to exclude from showing in the Interactive variable explorer
	"jupyter.variableExplorerExclude": "module;function;builtin_function_or_method;ABCMeta;type",

	// Language to query mapping for returning the list of active variables in a Jupyter kernel. Used by the Variable Explorer in both the Interactive Window and Notebooks. Example:
	// ```
	// [
	//   {
	//     "language": "python",
	//     "query": "%who_ls",
	//     "parseExpr": "'(\\w+)'"
	//   }
	// ]
	// ```
	"jupyter.variableQueries": [],

	// Defines the location and order of the sources where scripts files for Widgets are downloaded from (e.g. ipywidgest, bqplot, beakerx, ipyleaflet, etc). Not selecting any of these could result in widgets not rendering or function correctly. See [here](https://aka.ms/PVSCIPyWidgets) for more information. Once updated you will need to restart the Kernel.
	//  - jsdelivr.com: Loads widget (javascript) scripts from https://www.jsdelivr.com/
	//  - unpkg.com: Loads widget (javascript) scripts from https://unpkg.com/
	"jupyter.widgetScriptSources": [],

	// If set, the output in the WSL log shows debug information.
	"remote.WSL.debug": false,

	// If set, polling is used for file watching inside WSL1. Polling can be CPU intensive but fixes the WSL1 issue that folders can not be renamed when watched. This option requires restart to take effect.
	"remote.WSL.fileWatcher.polling": false,

	// The file watcher polling interval in ms used inside WSL1 distros if `remote.WSL.fileWatcher.polling` is set.
	// This option requires restart to take effect.
	"remote.WSL.fileWatcher.pollingInterval": 5000,

	// If set, the connection to a VS Code server running in WSL2 will use localhost (::1). If not set, the connection will directly use the WSL2 VM's IP addresss if accessible or localhost if not.
	"remote.WSL.server.connectThroughLocalhost": false,

	// If set, the WSL windows gets the environment from the shell it was opened from.
	"remote.WSL.useShellEnvironment": true,

	// Path to custom docstring template (overrides docstringFormat). Path can be absolute or relative to the project root.
	"autoDocstring.customTemplatePath": "",

	// Which docstring format to use.
	"autoDocstring.docstringFormat": "google",

	// Generate docstring on pressing enter after opening a docstring (use quoteStyle)
	"autoDocstring.generateDocstringOnEnter": true,

	// Guess the type of parameters and return values
	"autoDocstring.guessTypes": true,

	// Include [extended_summary] tag
	"autoDocstring.includeExtendedSummary": false,

	// Include function names at the start of docstrings
	"autoDocstring.includeName": false,

	// Output log information
	"autoDocstring.logLevel": "Info",

	// Style of quote used with generate docstring command
	"autoDocstring.quoteStyle": "\"\"\"",

	// Start docstring on new line
	"autoDocstring.startOnNewLine": false,

	// If error color is disabled, indent colors will be rendered until the length of rendered characters (white spaces, tabs, and other ones) is divisible by tabsize. Turn on this option to render white spaces and tabs only.
	"indentRainbow.colorOnWhiteSpaceOnly": false,

	// An array with color (hex, rgba, rgb) strings which are used as colors, can be any length.
	"indentRainbow.colors": [
		"rgba(255,255,64,0.07)",
		"rgba(127,255,127,0.07)",
		"rgba(255,127,255,0.07)",
		"rgba(79,236,236,0.07)"
	],

	// Indent color for when there is an error in the indentation, for example if you have your tabs set to 2 spaces but the indent is 3 spaces. Can be any type of web based color format (hex, rgba, rgb).
	"indentRainbow.errorColor": "rgba(128,32,32,0.6)",

	// For which languages indent-rainbow should be deactivated. When left empty will ignore.
	"indentRainbow.excludedLanguages": [
		"plaintext"
	],

	// For which languages indent-rainbow should skip indent error detection (use '*' to deactivate errors for all languages).
	"indentRainbow.ignoreErrorLanguages": [
		"markdown"
	],

	// Skip error highlighting for RegEx patterns. Defaults to c/cpp decorated block and full line comments.
	"indentRainbow.ignoreLinePatterns": [
		"/[ \t]* [*]/g",
		"/[ \t]+[/]{2}/g"
	],

	// For which languages indent-rainbow should be activated. When empty will use for all languages.
	"indentRainbow.includedLanguages": [],

	// Automatically change indent settings for languages (see README.md for details).
	"indentRainbow.indentSetter": {},

	// Indent color for when there is a mix between spaces and tabs in the indentation. Can be any type of web based color format (hex, rgba, rgb) or a empty string(to be disabled this coloring).
	"indentRainbow.tabmixColor": "rgba(128,32,96,0.6)",

	// The delay in ms until the editor gets updated.
	"indentRainbow.updateDelay": 100,

	// List of additional note title tokens to choose from. If supplied, a picker will be shown when creating a new note.
	"vsnotes.additionalNoteTitles": [],

	// The default commit message used if none is provided with the Commit and Push command.
	"vsnotes.commitPushDefaultCommitMessage": "VS Notes Commit and Push",

	// Shell command to execute in the note directory when the Commit and Push command is executed. The {msg} token will be replaced with the contents of an input box shown or, if empty, the default commit message.
	"vsnotes.commitPushShellCommand": "git add -A && git commit -m \"{msg}\" && git push",

	// Default title for new notes.
	"vsnotes.defaultNoteName": "New_Note",

	// Path to directory to save notes. Use ~/ to denote a relative path from home folder.
	"vsnotes.defaultNotePath": "",

	// Default note title. Utilizes tokens set in vsnotes.tokens.
	"vsnotes.defaultNoteTitle": "{dt}_{title}.{ext}",

	// Default vscode snippet to execute after creating a note. Set both langId and name to null to disable.
	"vsnotes.defaultSnippet": {
		"langId": "markdown",
		"name": "vsnotes"
	},

	// Regular expressions for file names to ignore when parsing documents in note folder.
	"vsnotes.ignorePatterns": [
		"^\\."
	],

	// Number of recent files to show when running command `List Notes`.
	"vsnotes.listRecentLimit": 15,

	// Automatically convert blank spaces in title to character. To disable set to `null`.
	"vsnotes.noteTitleConvertSpaces": "_",

	// A list of markdown templates to choose from when creating a new note.
	"vsnotes.templates": [],

	// Tokens used to replace text in file name.
	"vsnotes.tokens": [
		{
			"type": "datetime",
			"token": "{dt}",
			"format": "YYYY-MM-DD_HH-mm",
			"description": "Insert formatted datetime."
		},
		{
			"type": "title",
			"token": "{title}",
			"description": "Insert note title from input box.",
			"format": "Untitled"
		},
		{
			"type": "extension",
			"token": "{ext}",
			"description": "Insert file vsnotes.",
			"format": "md"
		}
	],

	// Hide the files section in the sidebar. Requires application restart.
	"vsnotes.treeviewHideFiles": false,

	// Hide the tags section in the sidebar. Requires application restart.
	"vsnotes.treeviewHideTags": false,

	// Select an icon pack that enables specific icons.
	//  - angular: Icons for Angular.
	//  - angular_ngrx: Icons for Angular and ngrx.
	//  - react: Icons for React.
	//  - react_redux: Icons for React and Redux.
	//  - vue: Icons for Vue.
	//  - vue_vuex: Icons for Vue and Vuex.
	//  - nest: Icons for NestJS.
	//  - none: No icon pack enabled.
	"material-icon-theme.activeIconPack": "angular",

	// Set custom file icon associations.
	"material-icon-theme.files.associations": {},

	// Set custom folder icon associations.
	"material-icon-theme.folders.associations": {},

	// Change the color of the folder icons.
	"material-icon-theme.folders.color": "#90a4ae",

	// Set the type for the folder icons.
	//  - specific: Select specific folder icons.
	//  - classic: Select classic folder icons.
	//  - none: No folder icons.
	"material-icon-theme.folders.theme": "specific",

	// Hide explorer arrows before folder.
	"material-icon-theme.hidesExplorerArrows": false,

	// Set custom language icon associations.
	"material-icon-theme.languages.associations": {},

	// Change the opacity of the icons.
	"material-icon-theme.opacity": 1,

	// Change the saturation of the icons.
	"material-icon-theme.saturation": 1,

	// Show restart notification.
	"material-icon-theme.showReloadMessage": true,

	// Show the update message after each update.
	"material-icon-theme.showUpdateMessage": false,

	// Show the welcome message after first installation.
	"material-icon-theme.showWelcomeMessage": true,

	// Enable/disable the 'auto build'
	"java.autobuild.enabled": true,

	// Generate method comments when generating the methods.
	"java.codeGeneration.generateComments": false,

	// Use 'instanceof' to compare types when generating the hashCode and equals methods.
	"java.codeGeneration.hashCodeEquals.useInstanceof": false,

	// Use Objects.hash and Objects.equals when generating the hashCode and equals methods. This setting only applies to Java 7 and higher.
	"java.codeGeneration.hashCodeEquals.useJava7Objects": false,

	// Specifies the insertion location of the code generated by source actions.
	//  - afterCursor: Insert the generated code after the member where the cursor is located.
	//  - beforeCursor: Insert the generated code before the member where the cursor is located.
	//  - lastMember: Insert the generated code as the last member of the target type.
	"java.codeGeneration.insertionLocation": "afterCursor",

	// The code style for generating the toString method.
	//  - STRING_CONCATENATION: String concatenation
	//  - STRING_BUILDER: StringBuilder/StringBuffer
	//  - STRING_BUILDER_CHAINED: StringBuilder/StringBuffer - chained call
	//  - STRING_FORMAT: String.format/MessageFormat
	"java.codeGeneration.toString.codeStyle": "STRING_CONCATENATION",

	// Limit number of items in arrays/collections/maps to list, if 0 then list all.
	"java.codeGeneration.toString.limitElements": 0,

	// List contents of arrays instead of using native toString().
	"java.codeGeneration.toString.listArrayContents": true,

	// Skip null values when generating the toString method.
	"java.codeGeneration.toString.skipNullValues": false,

	// The template for generating the toString method.
	"java.codeGeneration.toString.template": "${object.className} [${member.name()}=${member.value}, ${otherMembers}]",

	// Use blocks in 'if' statements when generating the methods.
	"java.codeGeneration.useBlocks": false,

	// Enable/disable code completion support
	"java.completion.enabled": true,

	// Defines a list of static members or types with static members. Content assist will propose those static members even if the import is missing.
	"java.completion.favoriteStaticMembers": [
		"org.junit.Assert.*",
		"org.junit.Assume.*",
		"org.junit.jupiter.api.Assertions.*",
		"org.junit.jupiter.api.Assumptions.*",
		"org.junit.jupiter.api.DynamicContainer.*",
		"org.junit.jupiter.api.DynamicTest.*",
		"org.mockito.Mockito.*",
		"org.mockito.ArgumentMatchers.*",
		"org.mockito.Answers.*"
	],

	// Defines the type filters. All types whose fully qualified name matches the selected filter strings will be ignored in content assist or quick fix proposals and when organizing imports. For example 'java.awt.*' will hide all types from the awt packages.
	"java.completion.filteredTypes": [
		"java.awt.*",
		"com.sun.*",
		"sun.*",
		"jdk.*",
		"org.graalvm.*",
		"io.micrometer.shaded.*"
	],

	// When set to true, method arguments are guessed when a method is selected from as list of code assist proposals.
	"java.completion.guessMethodArguments": false,

	// Defines the sorting order of import statements. A package or type name prefix (e.g. 'org.eclipse') is a valid entry. An import is always added to the most specific group.
	"java.completion.importOrder": [
		"java",
		"javax",
		"com",
		"org"
	],

	// Maximum number of completion results (not including snippets).
	// `0` (the default value) disables the limit, all results are returned. In case of performance problems, consider setting a sensible limit.
	"java.completion.maxResults": 0,

	// When set to true, code completion overwrites the current text. When set to false, code is simply added instead.
	"java.completion.overwrite": true,

	// Controls whether to exclude extension-generated project settings files (.project, .classpath, .factorypath, .settings/) from the file explorer.
	"java.configuration.checkProjectSettingsExclusions": true,

	// Path to Maven's global settings.xml
	"java.configuration.maven.globalSettings": null,

	// Specifies severity if the plugin execution is not covered by Maven build lifecycle.
	"java.configuration.maven.notCoveredPluginExecutionSeverity": "warning",

	// Path to Maven's user settings.xml
	"java.configuration.maven.userSettings": null,

	// Map Java Execution Environments to local JDKs.
	"java.configuration.runtimes": [],

	// Specifies how modifications on build files update the Java classpath/configuration
	"java.configuration.updateBuildConfiguration": "interactive",

	// Preferred content provider (a 3rd party decompiler id, usually)
	"java.contentProvider.preferred": null,

	// Enable/disable download of Maven source artifacts for Eclipse projects.
	"java.eclipse.downloadSources": false,

	// Specifies the severity of the message when the classpath is incomplete for a Java file
	"java.errors.incompleteClasspath.severity": "warning",

	// Enable/disable smart folding range support. If disabled, it will use the default indentation-based folding range provided by VS Code.
	"java.foldingRange.enabled": true,

	// Includes the comments during code formatting.
	"java.format.comments.enabled": true,

	// Enable/disable default Java formatter
	"java.format.enabled": true,

	// Enable/disable automatic block formatting when typing `;`, `<enter>` or `}`
	"java.format.onType.enabled": true,

	// Optional formatter profile name from the Eclipse formatter settings.
	"java.format.settings.profile": null,

	// Specifies the url or file path to the [Eclipse formatter xml settings](https://github.com/redhat-developer/vscode-java/wiki/Formatter-settings).
	"java.format.settings.url": null,

	// Specifies the folder path to the JDK (11 or more recent) used to launch the Java Language Server.
	// On Windows, backslashes must be escaped, i.e.
	// "java.home":"C:\\Program Files\\Java\\jdk11.0_8"
	"java.home": null,

	// Enable/disable the implementations code lens.
	"java.implementationsCodeLens.enabled": false,

	// Configure glob patterns for excluding folders. Use `!` to negate patterns to allow subfolders imports. You have to include a parent directory. The order is important.
	"java.import.exclusions": [
		"**/node_modules/**",
		"**/.metadata/**",
		"**/archetype-resources/**",
		"**/META-INF/maven/**"
	],

	// Arguments to pass to Gradle.
	"java.import.gradle.arguments": null,

	// Enable/disable the Gradle importer.
	"java.import.gradle.enabled": true,

	// Use Gradle from the specified local installation directory or GRADLE_HOME if the Gradle wrapper is missing or disabled and no 'java.import.gradle.version' is specified.
	"java.import.gradle.home": null,

	// The location to the JVM used to run the Gradle daemon.
	"java.import.gradle.java.home": null,

	// JVM arguments to pass to Gradle.
	"java.import.gradle.jvmArguments": null,

	// Enable/disable the Gradle offline mode.
	"java.import.gradle.offline.enabled": false,

	// Setting for GRADLE_USER_HOME.
	"java.import.gradle.user.home": null,

	// Use Gradle from the specific version if the Gradle wrapper is missing or disabled.
	"java.import.gradle.version": null,

	// Use Gradle from the 'gradle-wrapper.properties' file.
	"java.import.gradle.wrapper.enabled": true,

	// Enable/disable the Maven importer.
	"java.import.maven.enabled": true,

	// Defines allowed/disallowed SHA-256 checksums of Gradle Wrappers
	"java.imports.gradle.wrapper.checksums": [],

	// Specifies extra VM arguments used to launch the Java Language Server. Eg. use `-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m ` to optimize memory usage with the parallel garbage collector
	"java.jdt.ls.vmargs": "-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m",

	// Enable/disable download of Maven source artifacts as part of importing Maven projects.
	"java.maven.downloadSources": false,

	// Force update of Snapshots/Releases.
	"java.maven.updateSnapshots": false,

	// Max simultaneous project builds
	"java.maxConcurrentBuilds": 1,

	// [Experimental] Enable/disable progress reports from background processes on the server.
	"java.progressReports.enabled": true,

	// Enable/disable the server-mode switch information, when Java projects import is skipped on startup.
	"java.project.importHint": true,

	// Specifies whether to import the Java projects, when opening the folder in Hybrid mode for the first time.
	"java.project.importOnFirstTimeStartup": "automatic",

	// A relative path to the workspace where stores the compiled output. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.
	"java.project.outputPath": "",

	// Configure glob patterns for referencing local libraries to a Java project.
	"java.project.referencedLibraries": [
		"lib/**/*.jar"
	],

	// Excludes files and folders from being refreshed by the Java Language Server, which can improve the overall performance. For example, ["node_modules",".git"] will exclude all files and folders named 'node_modules' or '.git'. Defaults to ["node_modules",".git"].
	"java.project.resourceFilters": [
		"node_modules",
		".git"
	],

	// Relative paths to the workspace where stores the source files. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.
	"java.project.sourcePaths": [],

	// Show the recommended Dependency Analytics extension.
	"java.recommendations.dependency.analytics.show": true,

	// Include getter, setter and builder/constructor when finding references.
	"java.references.includeAccessors": true,

	// Include the decompiled sources when finding references.
	"java.references.includeDecompiledSources": true,

	// Enable/disable the references code lens.
	"java.referencesCodeLens.enabled": false,

	// Enable/disable auto organize imports on save action
	"java.saveActions.organizeImports": false,

	// Enable/disable Smart Selection support for Java. Disabling this option will not affect the VS Code built-in word-based and bracket-based smart selection.
	"java.selectionRange.enabled": true,

	// The launch mode for the Java extension
	//  - Standard: Provides full features such as intellisense, refactoring, building, Maven/Gradle support etc.
	//  - LightWeight: Starts a syntax server with lower start-up cost. Only provides syntax features such as outline, navigation, javadoc, syntax errors.
	//  - Hybrid: Provides full features with better responsiveness. It starts a standard language server and a secondary syntax server. The syntax server provides syntax features until the standard server is ready.
	"java.server.launchMode": "Hybrid",

	// Specifies the url or file path to the workspace Java settings. See [Setting Global Preferences](https://github.com/redhat-developer/vscode-java/wiki/Settings-Global-Preferences)
	"java.settings.url": null,

	// Automatically show build status on startup.
	"java.showBuildStatusOnStart.enabled": "notification",

	// Enable/disable the signature help.
	"java.signatureHelp.enabled": false,

	// Specifies the number of imports added before a star-import declaration is used.
	"java.sources.organizeImports.starThreshold": 99,

	// Specifies the number of static imports added before a star-import declaration is used.
	"java.sources.organizeImports.staticStarThreshold": 99,

	// Include method declarations from source files in symbol search.
	"java.symbols.includeSourceMethodDeclarations": false,

	// Specifies the file header comment for new Java file. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).
	"java.templates.fileHeader": [],

	// Specifies the type comment for new Java type. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).
	"java.templates.typeComment": [],

	// Traces the communication between VS Code and the Java language server.
	"java.trace.server": "off",

	// Enable/disable lazy loading the content in type hierarchy. Lazy loading could save a lot of loading time but every type should be expanded manually to load its content.
	"java.typeHierarchy.lazyLoad": false,

	// Display Hexdump button
	"hexdump.btnEnabled": true,

	// Identify the source character encoding
	"hexdump.charEncoding": "utf-8",

	// Set default endianness (true for little endian, false for big endian)
	"hexdump.littleEndian": true,

	// How many nibbles per group
	"hexdump.nibbles": 2,

	// Show address on each line
	"hexdump.showAddress": true,

	// Show ASCII section
	"hexdump.showAscii": true,

	// Display the Hex Inspector when hovering data
	"hexdump.showInspector": true,

	// Show offset on first line
	"hexdump.showOffset": true,

	// Maximum size of the buffer to display
	"hexdump.sizeDisplay": 5242880,

	// Display a warning if file is larger than this
	"hexdump.sizeWarning": 5242880,

	// Display hex digits in uppercase
	"hexdump.uppercase": true,

	// Number of bytes per line
	"hexdump.width": 16,

	// Enable / Disable allowing word compounds. `true` means `arraylength` would be ok, `false` means it would not pass.
	"cSpell.allowCompoundWords": false,

	// Control which file schemas will be checked for spelling (VS Code must be restarted for this setting to take effect).
	"cSpell.allowedSchemas": [
		"file",
		"gist",
		"sftp",
		"untitled",
		"vscode-notebook-cell"
	],

	// The maximum average length of chunks of text without word breaks.
	// 
	// A chunk is the characters between absolute word breaks.
	// Absolute word breaks match: `/[\s,{}[\]]/`
	// 
	// **Error Message:** _Average Word Size is Too High._
	// 
	// If you are seeing this message, it means that the file contains mostly long lines
	// without many word breaks.
	"cSpell.blockCheckingWhenAverageChunkSizeGreatherThan": 80,

	// The maximum line length.
	// 
	// Block spell checking if lines are longer than the value given.
	// This is used to prevent spell checking generated files.
	// 
	// **Error Message:** _Lines are too long._
	"cSpell.blockCheckingWhenLineLengthGreaterThan": 10000,

	// The maximum length of a chunk of text without word breaks.
	// 
	// It is used to prevent spell checking of generated files.
	// 
	// A chunk is the characters between absolute word breaks.
	// Absolute word breaks match: `/[\s,{}[\]]/`, i.e. spaces or braces.
	// 
	// **Error Message:** _Maximum Word Length is Too High._
	// 
	// If you are seeing this message, it means that the file contains a very long line
	// without many word breaks.
	"cSpell.blockCheckingWhenTextChunkSizeGreaterThan": 500,

	// Words must match case rules.
	"cSpell.caseSensitive": false,

	// The limit in K-Characters to be checked in a file.
	"cSpell.checkLimit": 500,

	// Define custom dictionaries to be included by default.
	// If `addWords` is `true` words will be added to this dictionary.
	// 
	// **Example:**
	// 
	// ```js
	// "cSpell.customDictionaries": {
	//   "project-words": {
	//     "name": "project-words",
	//     "path": "${workspaceRoot}/project-words.txt",
	//     "description": "Words used in this project",
	//     "addWords": true
	//   },
	//   "custom": true, // Enable the `custom` dictionary
	//   "internal-terms": false // Disable the `internal-terms` dictionary
	// }
	// ```
	"cSpell.customDictionaries": {},

	// - Use `customDictionaries` instead.
	// Define custom dictionaries to be included by default for the folder.
	// If `addWords` is `true` words will be added to this dictionary.
	"cSpell.customFolderDictionaries": [],

	// - Use `customDictionaries` instead.
	// Define custom dictionaries to be included by default for the user.
	// If `addWords` is `true` words will be added to this dictionary.
	"cSpell.customUserDictionaries": [],

	// - Use `customDictionaries` instead.
	// Define custom dictionaries to be included by default for the workspace.
	// If `addWords` is `true` words will be added to this dictionary.
	"cSpell.customWorkspaceDictionaries": [],

	// Issues found by the spell checker are marked with a Diagnostic Severity Level. This affects the color of squiggle.
	//  - Error: Report Spelling Issues as Errors
	//  - Warning: Report Spelling Issues as Warnings
	//  - Information: Report Spelling Issues as Information
	//  - Hint: Report Spelling Issues as Hints, will not show up in Problems
	"cSpell.diagnosticLevel": "Information",

	// Optional list of dictionaries to use. Each entry should match the name of the dictionary. To remove a dictionary from the list add `!` before the name. i.e. `!typescript` will turn off the dictionary with the name `typescript`.
	"cSpell.dictionaries": [],

	// Define additional available dictionaries
	"cSpell.dictionaryDefinitions": [],

	// Enable / Disable the spell checker.
	"cSpell.enabled": true,

	// Specify file types to spell check. Use `cSpell.enableFiletypes` to Enable / Disable checking files types.
	"cSpell.enabledLanguageIds": [
		"asciidoc",
		"c",
		"cpp",
		"csharp",
		"css",
		"git-commit",
		"go",
		"graphql",
		"handlebars",
		"haskell",
		"html",
		"jade",
		"java",
		"javascript",
		"javascriptreact",
		"json",
		"jsonc",
		"jupyter",
		"latex",
		"less",
		"markdown",
		"php",
		"plaintext",
		"python",
		"pug",
		"restructuredtext",
		"rust",
		"scala",
		"scss",
		"text",
		"typescript",
		"typescriptreact",
		"yaml",
		"yml"
	],

	// Enable / Disable checking file types (languageIds).
	// These are in additional to the file types specified by `cSpell.enabledLanguageIds`.
	// To disable a language, prefix with `!` as in `!json`,
	// 
	// Example:
	// ```
	// jsonc       // enable checking for jsonc
	// !json       // disable checking for json
	// kotlin      // enable checking for kotlin
	// ```
	"cSpell.enableFiletypes": [],

	// Show Regular Expression Explorer
	"cSpell.experimental.enableRegexpView": false,

	// Glob patterns of files to be checked. Glob patterns are relative to the `globRoot` of the configuration file that defines them.
	"cSpell.files": [],

	// Use Rename when fixing spelling issues.
	"cSpell.fixSpellingWithRenameProvider": true,

	// list of words to always be considered incorrect.
	"cSpell.flagWords": [],

	// The root to use for glop patterns found in this configuration. Default: The current workspace folder. Use `globRoot` to define a different location. `globRoot` can be relative to the location of this configuration file. Defining globRoot, does not impact imported configurations.
	// 
	// Special Values:
	// 
	// - `${workspaceFolder}` - Default - globs will be relative to the current workspace folder\n
	// - `${workspaceFolder:<name>}` - Where `<name>` is the name of the workspace folder.
	"cSpell.globRoot": "",

	// Glob patterns of files to be ignored. The patterns are relative to the `globRoot` of the configuration file that defines them.
	"cSpell.ignorePaths": [
		"package-lock.json",
		"node_modules",
		"vscode-extension",
		".git/objects",
		".vscode",
		".vscode-insiders"
	],

	// List of RegExp patterns or Pattern names to exclude from spell checking.
	// 
	// Example: ["href"] - to exclude html href
	"cSpell.ignoreRegExpList": [],

	// A list of words to be ignored by the spell checker.
	"cSpell.ignoreWords": [],

	// Other settings files to be included
	"cSpell.import": [],

	// List of RegExp patterns or defined Pattern names to define the text to be included for spell checking. If includeRegExpList is defined, ONLY, text matching the included patterns will be checked.
	"cSpell.includeRegExpList": [],

	// Current active spelling language.
	// Example: "en-GB" for British English
	// Example: "en,nl" to enable both English and Dutch
	"cSpell.language": "en",

	// Additional settings for individual languages.
	"cSpell.languageSettings": [],

	// Set the Debug Level for logging messages.
	//  - None: Do not log
	//  - Error: Log only errors
	//  - Warning: Log errors and warnings
	//  - Information: Log errors, warnings, and info
	//  - Debug: Log everything (noisy)
	"cSpell.logLevel": "Error",

	// The maximum number of times the same word can be flagged as an error in a file.
	"cSpell.maxDuplicateProblems": 5,

	// Controls the maximum number of spelling errors per document.
	"cSpell.maxNumberOfProblems": 100,

	// The minimum length of a word before checking it against a dictionary.
	"cSpell.minWordLength": 4,

	// Prevents searching for local configuration when checking individual documents.
	"cSpell.noConfigSearch": false,

	// Optional list of dictionaries that will not be used for suggestions. Words in these dictionaries are considered correct, but will not be used when making spell correction suggestions.
	// 
	// Note: if a word is suggested by another dictionary, but found in one of these dictionaries, it will be removed from the set of possible suggestions.
	"cSpell.noSuggestDictionaries": [],

	// Controls the number of suggestions shown.
	"cSpell.numSuggestions": 8,

	// Overrides to apply based upon the file path.
	"cSpell.overrides": [],

	// Defines a list of patterns that can be used in ignoreRegExpList and includeRegExpList
	"cSpell.patterns": [],

	// Show Spell Checker actions in Editor Context Menu
	"cSpell.showCommandsInEditorContextMenu": true,

	// Display the spell checker status on the status bar.
	"cSpell.showStatus": true,

	// The side of the status bar to display the spell checker status.
	//  - Left: Left Side of Statusbar
	//  - Right: Right Side of Statusbar
	"cSpell.showStatusAlignment": "Right",

	// Delay in ms after a document has changed before checking it for spelling errors.
	"cSpell.spellCheckDelayMs": 50,

	// Only spell check files that are in the currently open workspace.
	// This same effect can be achieved using the `files` setting.
	// 
	// ```
	// "cSpell.files": ["**", "**​/.*", "**​/.*​/**"]
	// ```
	"cSpell.spellCheckOnlyWorkspaceFiles": false,

	// The type of menu used to display spelling suggestions.
	//  - quickPick: Suggestions will appear as a drop down at the top of the IDE. (Best choice for Vim Key Bindings)
	//  - quickFix: Suggestions will appear inline near the word, inside the text editor.
	"cSpell.suggestionMenuType": "quickPick",

	// The maximum number of changes allowed on a word to be considered a suggestions.
	// 
	// For example, appending an `s` onto `example` -> `examples` is considered 1 change.
	// 
	// Range: between 1 and 5.
	"cSpell.suggestionNumChanges": 3,

	// The maximum amount of time in milliseconds to generate suggestions for a word.
	"cSpell.suggestionsTimeout": 400,

	// Tells the spell checker to load `.gitignore` files and skip files that match the globs in the `.gitignore` files found.
	"cSpell.useGitignore": true,

	// Packages managers like Yarn 2 use a `.pnp.cjs` file to assist in loading packages stored in the repository.
	// 
	// When true, the spell checker will search up the directory structure for the existence of a PnP file and load it.
	"cSpell.usePnP": false,

	// Words to add to global dictionary -- should only be in the user config file.
	"cSpell.userWords": [],

	// list of words to be always considered correct
	"cSpell.words": [],

	// Define the path to the workspace root folder in a multi-root workspace.
	// By default it is the first folder.
	// 
	// This is used to find the `cspell.json` file for the workspace.
	// 
	// Example: use the `client` folder
	// ```
	// ${workspaceFolder:client}
	// ```
	"cSpell.workspaceRootPath": "",

	// The linter to use
	"python.linter": "pyLint",

	// Controls the maximum number of problems produced by the server.
	"python.maxNumberOfProblems": 100,

	// 
	"vsintellicode.features.python.deepLearning": "default",

	// Java の Visual Studio IntelliCode 入力候補を有効にする
	"vsintellicode.java.completionsEnabled": true,

	// ダウンロードしたモデル ファイルを格納するフォルダーのパスを指定します。指定しない場合、既定で拡張機能のインストール ディレクトリに設定されます。
	"vsintellicode.modelDownloadPath": null,

	// `editor.suggestSelection` が IntelliCode の入力候補項目が表示されないようにする値 (`recentlyUsed`) に設定されている場合、Visual Studio IntelliCode が `editor.suggestSelection` を変更するかどうかを制御します。
	//  - enabled: IntelliCode がお客様の代わりに editor.suggestSelection 設定を変更することを許可します。
	//  - disabled: この構成を IntelliCode によって制御しないことが明示的に選択されました。
	//  - automaticallyOverrodeDefaultValue: (手動で設定しないでください) 既定値をオーバーライドするように構成が自動的に変更されたことを記録するために、IntelliCode がこれを設定します。
	//  - choseToUpdateConfiguration: (手動で設定しないでください) IntelliCode が明示的に設定された値から構成を変更できるようにしたことを記録するように、IntelliCode がこれを設定します。
	"vsintellicode.modify.editor.suggestSelection": "enabled",

	// Python の Visual Studio IntelliCode 入力候補を有効にする
	"vsintellicode.python.completionsEnabled": true,

	// MSSQL の Visual Studio IntelliCode 入力候補を有効にする
	"vsintellicode.sql.completionsEnabled": true,

	// TypeScript および JavaScript の Visual Studio IntelliCode 入力候補を有効にする
	"vsintellicode.typescript.completionsEnabled": true,

	// Minimum level of debugger logs that are sent to VS Code.
	"java.debug.logLevel": "warn",

	// The specified console to launch Java program. If you want to customize the console for a specific debug session, please modify the 'console' config in launch.json.
	//  - internalConsole: VS Code debug console (input stream not supported).
	//  - integratedTerminal: VS Code integrated terminal.
	//  - externalTerminal: External terminal that can be configured in user settings.
	"java.debug.settings.console": "integratedTerminal",

	// Enable the run and debug code lens providers over main methods.
	"java.debug.settings.enableRunDebugCodeLens": true,

	// Skip the specified classes when breaking on exception. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, e.g. java.*, *.Foo
	"java.debug.settings.exceptionBreakpoint.skipClasses": [],

	// Force building the workspace before launching java program.
	"java.debug.settings.forceBuildBeforeLaunch": true,

	// Reload the changed Java classes during debugging. Make sure 'java.autobuild.enabled' is not disabled.
	"java.debug.settings.hotCodeReplace": "manual",

	// The maximum number of variables or fields that can be requested in one JDWP request. The higher the value, the less frequently debuggee will be requested when expanding the variable view. Also a large number can cause JDWP request timeout.
	"java.debug.settings.jdwp.limitOfVariablesPerJdwpRequest": 100,

	// The timeout (ms) of JDWP request when the debugger communicates with the target JVM.
	"java.debug.settings.jdwp.requestTimeout": 3000,

	// The maximum length of strings displayed in "Variables" or "Debug Console" viewlet, strings longer than this length will be trimmed, if 0 no trim is performed.
	"java.debug.settings.maxStringLength": 0,

	// The precision when formatting doubles in "Variables" or "Debug Console" viewlet.
	"java.debug.settings.numericPrecision": 0,

	// Force to proceed when build fails
	"java.debug.settings.onBuildFailureProceed": false,

	// Show numbers in hex format in "Variables" viewlet.
	"java.debug.settings.showHex": false,

	// Show the logical structure for the Collection and Map classes in "Variables" viewlet.
	"java.debug.settings.showLogicalStructure": true,

	// Show fully qualified class names in "Variables" viewlet.
	"java.debug.settings.showQualifiedNames": false,

	// Show static variables in "Variables" viewlet.
	"java.debug.settings.showStaticVariables": false,

	// Show 'toString()' value for all classes that override 'toString' method in "Variables" viewlet.
	"java.debug.settings.showToString": true,

	// Skip the specified classes when stepping. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, e.g. java.*, *.Foo
	"java.debug.settings.stepping.skipClasses": [],

	// Skip constructor methods when stepping.
	"java.debug.settings.stepping.skipConstructors": false,

	// Skip static initializer methods when stepping.
	"java.debug.settings.stepping.skipStaticInitializers": false,

	// Skip synthetic methods when stepping.
	"java.debug.settings.stepping.skipSynthetics": false,

	// The default VM arguments to launch the Java program. Eg. Use '-Xmx1G -ea' to increase the heap size to 1GB and enable assertions. If you want to customize the VM arguments for a specific debug session, please modify the 'vmArgs' config in launch.json.
	"java.debug.settings.vmArgs": "",

	// Controls whether notifications can be used to report progress. If true, use status bar to report progress instead.
	"java.silentNotification": false,

	// Synchronize Java Projects explorer with changes
	"java.dependency.autoRefresh": true,

	// Package presentation mode: flat or hierarchical
	"java.dependency.packagePresentation": "flat",

	// The delay time (ms) the auto refresh is invoked when changes are detected
	"java.dependency.refreshDelay": 2000,

	// Show the members in the explorer
	"java.dependency.showMembers": false,

	// Synchronize Java Projects explorer selection with folder explorer
	"java.dependency.syncWithFolderExplorer": true,

	// Specifies the output path of export jar. The default value is `${workspaceFolder}/${workspaceFolderBasename}.jar`. To select the output location manually each time exporting the jar file, simply leave it empty or set it to `askUser`.
	"java.project.exportJar.targetPath": "${workspaceFolder}/${workspaceFolderBasename}.jar",

	// Sets the default view which is presented during the first use.
	//  - auto: Automatically pick the first experience view
	//  - overview: Present the Java Overview page
	//  - gettingStarted: Present the Java Getting Started page
	//  - welcome: Present the Java Help Center page
	//  - none: Do not show any view
	"java.help.firstView": "auto",

	// Show release notes of Extension Pack for Java on startup.
	"java.help.showReleaseNotes": true,

	// Specify the configurations for running the tests
	"java.test.config": {},

	// Specify the name of the default test configuration
	"java.test.defaultConfig": "",

	// Specify whether to show diagnostics for conflict dependencies.
	"maven.dependency.enableConflictDiagnostics": "true",

	// Specifies file path pattern of folders to exclude while searching for Maven projects.
	"maven.excludedFolders": [
		"**/.*",
		"**/node_modules",
		"**/target",
		"**/bin",
		"**/archetype-resources"
	],

	// Specifies default options for all mvn commands.
	"maven.executable.options": "",

	// Specifies absolute path of your 'mvn' executable. When this value is empty, it tries using 'mvn' or 'mvnw' according to the value of 'maven.executable.preferMavenWrapper'.
	"maven.executable.path": "",

	// Specifies whether you prefer to use Maven wrapper. If true, it tries using 'mvnw' by walking up the parent folders. If false, or 'mvnw' is not found, it tries 'mvn' in PATH instead.
	"maven.executable.preferMavenWrapper": "true",

	// Specifies whether to update effective-pom automatically whenever changes detected.
	"maven.pomfile.autoUpdateEffectivePOM": false,

	// Specifies the glob pattern used to look for pom.xml files.
	"maven.pomfile.globPattern": "**/pom.xml",

	// Specifies whether to prefetch effective pom on startup.
	"maven.pomfile.prefetchEffectivePom": false,

	// Default method of opening newly created project.
	"maven.projectOpenBehavior": "Interactive",

	// Specifies the absolute path of your maven configuration file, the default value is ~/.m2/settings.xml
	"maven.settingsFile": null,

	// If this value is true, add a command to create Maven Projects in the Explorer context menu for folders.
	"maven.showInExplorerContextMenu": "true",

	// Specifies an array of environment variable names and values. These environment variable values will be added to the terminal session before Maven is first executed.
	"maven.terminal.customEnv": [],

	// Specify pre-defined favorite commands to execute.
	"maven.terminal.favorites": [],

	// If this value is true, and if the setting java.home has a value, then the environment variable JAVA_HOME will be set to the value of java.home when a new terminal window is created.
	"maven.terminal.useJavaHome": false,

	// Specifies the way of viewing Maven projects.
	"maven.view": "flat",

	// Whether to exclude files from auto-completion using VS Code's `search.exclude` setting. (`node_modules`, `bower_components` and `*.code-search` are **always excluded**, not affected by this option.)
	"markdown.extension.completion.respectVscodeSearchExclude": true,

	// Pathの自動補完におけるルートフォルダ
	"markdown.extension.completion.root": "",

	// 斜体テキストの囲いに `*` と `_` のどちらを使用するか
	"markdown.extension.italic.indicator": "*",

	// ユーザ定義のKaTeXマクロ
	"markdown.extension.katex.macros": {},

	// 異なる構文で異なるインデント幅を使用するかどうか(これは、生成された目次・TOCにも影響します)
	//  - adaptive: 順序なしリストには2つのスペースを使用し、順序付きリストには3つのスペースを使用します
	//  - inherit: 現在のドキュメントで設定済みのタブ幅を使用する (現在の幅はVSCodeのステータスバーを参照)
	"markdown.extension.list.indentationSize": "adaptive",

	// Enable basic math support (Powered by KaTeX).
	"markdown.extension.math.enabled": true,

	// 順序付きリストマーカーの自動修正
	"markdown.extension.orderedList.autoRenumber": true,

	// 順序付きリストのマーカー
	//  - one: 順序付きリストマーカーとして常に `1.` を使用する
	//  - ordered: 順序付きリストマーカーとして増加する連番を使用する
	"markdown.extension.orderedList.marker": "ordered",

	// 自動でプレビューを横に表示する
	"markdown.extension.preview.autoShowPreviewToSide": false,

	// 画像Pathを絶対Pathに変換する
	"markdown.extension.print.absoluteImgPath": true,

	// HTML出力時に画像をbase64へ変換する
	"markdown.extension.print.imgToBase64": false,

	// Include VS Code's basic Markdown styles so that the exported HTML looks similar as inside VS Code.
	"markdown.extension.print.includeVscodeStylesheets": true,

	// ファイル保存時に現在のドキュメントをHTMLへ出力する
	"markdown.extension.print.onFileSave": false,

	// 出力されたHTMLのテーマ
	"markdown.extension.print.theme": "light",

	// 出力時のURL検証の有効化/無効化
	"markdown.extension.print.validateUrls": true,

	// If a file is larger than this size (in byte/B), we won't attempt to render syntax decorations.
	"markdown.extension.syntax.decorationFileSizeLimit": 50000,

	// Add syntax decorations
	"markdown.extension.syntax.decorations": true,

	// `extension.syntax.decorations`が有効な場合にのみ作用させる
	"markdown.extension.syntax.plainTheme": false,

	// GFMテーブルフォーマッターを有効化
	"markdown.extension.tableFormatter.enabled": true,

	// 設定されたtabSizeに最も近い倍数でテーブルのインデントを正規化する
	"markdown.extension.tableFormatter.normalizeIndentation": false,

	// 目次(TOC)用リンクを小文字化する
	"markdown.extension.toc.downcaseLink": true,

	// 目次(TOC)の階層範囲。階層xからyへ`x..y`として使用します
	"markdown.extension.toc.levels": "1..6",

	// プロジェクトファイルの目次(TOC)で除外する見出しの一覧(例. {"README.md": ["# Introduction"]})
	"markdown.extension.toc.omittedFromToc": {},

	// 目次(TOC)に順序付きリストを使用する (1. ..., 2. ...)
	"markdown.extension.toc.orderedList": false,

	// 目次(TOC)にリンクなし(プレーンテキスト)を使用する
	"markdown.extension.toc.plaintext": false,

	// The method to generate heading ID. This affects **links to headings** in **TOC**, **code completion**, and **printing**.
	//  - github: GitHub
	//  - azureDevops: Azure DevOps
	//  - gitea: Gitea
	//  - gitlab: GitLab
	//  - vscode: Visual Studio Code
	"markdown.extension.toc.slugifyMode": "github",

	// 目次(TOC)に `-` `*` `+` のどれを使用するか (順序なしリストの場合)
	"markdown.extension.toc.unorderedList.marker": "-",

	// 目次(TOC)を保存時に自動更新
	"markdown.extension.toc.updateOnSave": true,

}